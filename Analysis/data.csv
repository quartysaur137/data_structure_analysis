,Old Family #,Family Name,Looked at?,Variation,Algo ID,Algorithm Description,Final Call,Exact Problem Statement?,Exact algorithm?,Time Complexity (Average),Average Case Distribution,Reference?,Unnamed: 12,Algorithm Name,Year,Paper/Reference Link,Constants,Derived?,Paper Reference for Constants,Time Complexity Improvement?,Transition Class,Time Complexity Class,Param: Time Class,Time Complexity (Worst Only),Parameter definitions,Preferred Parameter,Time Complexity Reference,Derived Time Complexity?,Computational Model,Unit of Space,Space Complexity Class,Param: Space Class,Space Complexity (Auxiliary),Space Complexity Reference,Derived Space Complexity?,Space Complexity in Original Paper?,Interesting Space Complexity?,Randomized?,"Type of Randomized Algorithm (e.g. Las Vegas, Monte Carlo, Atlantic City)",Approximate?,Approximation Factor (if approximate algorithm),Heuristic-based?,Parallel?,"# of
Processors",Quantum?,GPU-based?,Other References,Problem Statement,"Algorithm family
parameters",Description of Inputs,Ratios of input parameter sizes,Space n = 1000 value,Space n = 1000 rate,Space n = 10^6 value,Space n = 10^6 rate,Space n = 10^9 value,Space n = 10^9 rate,n = 1000 value,n = 1000 scale,n = 1000 Rate,n = 10^6 value,n = 10^6 scale,n = 10^6 Rate,n = 10^9 value,n = 10^9 scale,n = 10^9 Rate,Starting Complexity,Remarks,Papers for ratio evaluations,Domains
0,38.0,Optimal Binary Search Trees,2.0,Alphabetic Tree Problem,351.0,,,1,1,O(n),,,[https://epubs.siam.org/doi/abs/10.1137/S0895480193256651?journalCode=sjdmec Klawe; Mumey (1993)],Klawe; Mumey,1993,https://epubs.siam.org/doi/abs/10.1137/S0895480193256651?journalCode=sjdmec,,,,0.0,0,3,n: 3,O(n),n: number of elements,n,,,,,3,n: 3,O(n),Derived: uses a worklist of size O(n),1.0,0.0,,0,,0,,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,weights within constant factors of each other or exponentially separated,,,,,,,,1000.0,Inf,,1000000,Inf,,1000000000,Inf,,1,,,Combinatorics
1,66.0,The Subset-Sum Problem,2.0,Subset Sum,546.0,,,1,1,O(nt/logt),,,[https://link.springer.com/article/10.1007/s00453-002-0989-y Pisinger (2003)],Pisinger,2003,https://link.springer.com/article/10.1007/s00453-002-0989-y,,,,0.0,0,3,"n: 3,
t: 2.99",O(nt/logt),"n: number of elements in the set
t: target sum",n,,,Word RAM,words,1,"n: 1,
t: 2.5",O(t/logt),https://link.springer.com/article/10.1007/s00453-002-0989-y,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
2,66.0,The Subset-Sum Problem,2.0,Subset Sum,547.0,,,1,1,O(n' t),,,[https://doi.org/10.1287/opre.21.1.332 Faaland (1973)],Faaland,1973,https://doi.org/10.1287/opre.21.1.332,,,,0.0,0,3,"n: 3,
n': 3,
t: 3",O(n' t),"n': number of distinct elements in the set
t: target sum",n,,,,,1,"n: 1,
t: 3",O(t),https://doi.org/10.1287/opre.21.1.332,0.0,1.0,,0,,0,,0,0,,0,0,"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",,,,,,,,,,,,,,,,,,,,1,Dynamic Programming,,Combinatorics
3,66.0,The Subset-Sum Problem,2.0,Subset Sum,548.0,,,1,1,O(n' t),,,[https://link.springer.com/article/10.1007/s006070050042 Pferschy (1999)],Pferschy,1999,https://link.springer.com/article/10.1007/s006070050042,,,,0.0,0,3,"n: 3,
n': 3,
t: 3",O(n' t),"n': number of distinct elements in the set
t: target sum",n,,,,,1,"n: 1,
t: 3",O(t),"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0.0,0.0,,0,,0,,0,0,,0,0,"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
4,66.0,The Subset-Sum Problem,2.0,Subset Sum,549.0,,,1,1,O(σ^{(3/2)}),,,[https://doi.org/10.1002/(SICI)1097-0037(199905)33:3%3C189::AID-NET5%3E3.0.CO;2-2 Klinz (1999)],Klinz,1999,https://doi.org/10.1002/(SICI)1097-0037(199905)33:3%3C189::AID-NET5%3E3.0.CO;2-2,,,,0.0,0,4.5,"n: 4.5,
\sigma: 4.5",$O(σ^{(3/2)})$,$\sigma$: sum of integers in the set ($\sigma \geq n$),n,,,,,1,"n: 1,
t: 3",O(t),"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0.0,0.0,,0,,0,,0,0,,0,0,"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
5,66.0,The Subset-Sum Problem,2.0,Subset Sum,550.0,,,1,1,\tilde{O}(n max(S)),,,[https://www.sciencedirect.com/science/article/abs/pii/S019667749690841X?via%3Dihub Eppstein (1997)],Eppstein,1997,https://www.sciencedirect.com/science/article/abs/pii/S019667749690841X?via%3Dihub,,,,0.0,0,4,"n: 4,
max(S): 3",$\tilde{O}(n max(S))$,"n: number of elements in the set
S: the set
t: target sum",n,,,,,1,"n: 1,
t: 4",O(t logt),"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
6,66.0,The Subset-Sum Problem,2.0,Subset Sum,551.0,,,1,1,\tilde{O}(n max(S)),,,[https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0091507 Serang (2014)],Serang,2014,https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0091507,,,,0.0,0,4,"n: 4,
max(S): 3",$\tilde{O}(n max(S))$,"n: number of elements in the set
S: the set
t: target sum",n,,,,,1,"n: 1,
t: 4",O(t logt),"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
7,66.0,The Subset-Sum Problem,2.0,Subset Sum,552.0,,,1,1,\tilde{O}(n max(S)),,,[https://www.liebertpub.com/doi/10.1089/cmb.2015.0013 Serang (2015)],Serang,2015,https://www.liebertpub.com/doi/10.1089/cmb.2015.0013,,,,0.0,0,4,"n: 4,
max(S): 3",$\tilde{O}(n max(S))$,"n: number of elements in the set
S: the set
t: target sum",n,,,,,1,"n: 1,
t: 4",O(t logt),"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
8,66.0,The Subset-Sum Problem,2.0,Subset Sum,553.0,,,1,1,\tilde{O}(n^3 t),,,[https://dl.acm.org/doi/abs/10.1145/1806689.1806735 Lokshtanov (2010)],Lokshtanov,2010,https://dl.acm.org/doi/abs/10.1145/1806689.1806735,,,,0.0,0,6,"n: 6,
t: 3",$\tilde{O}(n^3 t)$,"n: number of elements in the set
t: target sum",n,,,,,5,"n: 5,
t: 1",O(n^2),"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
9,32.0,Cycle Detection,2.0,Cycle Detection,324.0,,,1,0,(\mu + \lambda)(1+\Theta(1/sqrt(M))),"mentioned in conclusion that the analysis might be interesting, but it wasn't actually done",https://epubs.siam.org/doi/abs/10.1137/0211030?journalCode=smjcat,[https://epubs.siam.org/doi/abs/10.1137/0211030?journalCode=smjcat Sedgewick; Szymanski; and Yao (1982)],Sedgewick; Szymanski; and Yao,1982,https://epubs.siam.org/doi/abs/10.1137/0211030?journalCode=smjcat,1,0.0,https://www.semanticscholar.org/paper/The-Complexity-of-Finding-Cycles-in-Periodic-Sedgewick-Szymanski/8f1e5d92733380112a44630d0561611121c3228d,0.0,0,3,"\mu: 3,
\lambda: 3,
M: 1.5",$(\mu + \lambda)(1+\Theta(1/sqrt(M)))$,"$\mu$: first index of element in cycle
$\lambda$: period
$M$: number of memory cells available",\mu,,,,Memory cells,1,"M: 3,
\mu: 1",M,https://epubs.siam.org/doi/abs/10.1137/0211030?journalCode=smjcat,0.0,1.0,,0,,0,,0,0,,0,0,,"cycle detection or cycle finding is the algorithmic problem of finding a cycle
 in a sequence of iterated function values.",,,,,,,,,,9.965,100.3512293,,#REF!,#REF!,,#REF!,#REF!,,6,,,Combinatorics
10,32.0,Cycle Detection,2.0,Cycle Detection,325.0,,,1,0,\mu + 3/2 \lambda,"Elements have independently random magnitudes, subject to periodicity constraints \mu and \lambda",https://drive.google.com/file/d/16H_lrjeaBJqWvcn07C_w-6VNHldJ-ZZl/view,[https://drive.google.com/file/d/16H_lrjeaBJqWvcn07C_w-6VNHldJ-ZZl/view Nivasch (2004)],Nivasch,2004,https://drive.google.com/file/d/16H_lrjeaBJqWvcn07C_w-6VNHldJ-ZZl/view,,,,0.0,0,3,"\mu: 3,
\lambda: 3",$O(\mu + \lambda)$,"$\mu$: index of first element in cycle
$\lambda$: cycle length",\mu,,,not mentioned,Stack size,2,\mu: 2,O(\log\mu),https://www.gabrielnivasch.org/fun/cycle-detection,0.0,1.0,,0,,0,,0,0,,0,0,,"cycle detection or cycle finding is the algorithmic problem of finding a cycle
 in a sequence of iterated function values.",,,,,,,,,,9.965,,,,,,,,,6,,,Combinatorics
11,1.0,Sorting,2.0,Comparison Sorting,1.0,,,1,1,O( n² ),uniform distribution over all possible permutations,"""CLRS""?",[- Naive sorting (1940)],Naive sorting,1940,-,1,1.0,,1.0,0,5,n: 5,O(n^2),n: size of list,n,,,Word RAM,words,1,n: 1,O(1) (in-situ),in-situ,1.0,0.0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Combinatorics
12,1.0,Sorting,2.0,Comparison Sorting,2.0,,,1,1,O( n² ),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[- Selection Sort (1962)],Selection Sort,1962,-,,,,0.0,0,5,n: 5,O(n^2),n: size of list,n,,,Word RAM,words,1,n: 1,O(1) (in-situ),in-situ,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Selection_sort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000000.0,1,,,,,,,,4,,,Combinatorics
13,1.0,Sorting,2.0,Comparison Sorting,3.0,,,1,1,O(n logn),"Any distribution (runtime is same regardless of input, at least in the typical implementation)",(same behavior across all inputs),[- Merge Sort (1945)],Merge Sort,1945,-,,,,1.0,4->5,4,n: 4,O(n \log n),n: size of list,n,,,Word RAM,words,3,n: 3,O(n),need some way to store partially processed lists while merging,1.0,0.0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Merge_sort#cite_note-2

https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf",A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,9965.0,100.3512293,,,,,,,,4,,,Combinatorics
14,1.0,Sorting,2.0,Comparison Sorting,5.0,,,1,1,O( n² ),uniform distribution over all possible permutations,(can be easily derived),[- Bubble Sort (1956)],Bubble Sort,1956,-,,,,0.0,0,5,n: 5,O(n^2),n: size of list,n,,,Word RAM,words,1,n: 1,O(1) (in-situ),in-situ,1.0,0.0,,0,,0,,0,0,,0,0,https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000000.0,1,,,,,,,,4,,,Combinatorics
15,1.0,Sorting,2.0,Comparison Sorting,8.0,,,1,1,O(n logn),uniform distribution over all possible permutations,(lower bound for average-case in sorting + upper bound for heapsort),[https://onlinelibrary.wiley.com/doi/abs/10.1002/%28SICI%291097-024X%28199708%2927%3A8%3C983%3A%3AAID-SPE117%3E3.0.CO%3B2-%23 Intro Sort (1997)],Intro Sort,1997,https://onlinelibrary.wiley.com/doi/abs/10.1002/%28SICI%291097-024X%28199708%2927%3A8%3C983%3A%3AAID-SPE117%3E3.0.CO%3B2-%23,,,,0.0,0,4,n: 4,O(n \log n),n: size of list,n,,,Word RAM,words,2,n: 2,O(logn),(see quicksort + heapsort),1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Introsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,9965.0,100.3512293,,,,,,,,4,,,Combinatorics
16,1.0,Sorting,2.0,Comparison Sorting,24.0,,,1,1,O(n logn),uniform distribution over all possible permutations (reference proof possibly not complete?),https://www.sciencedirect.com/science/article/pii/030439759390364Y?via%3Dihub,[https://www.bibsonomy.org/bibtex/2f485e4ea9a877871b59ab503151a7f10/bjoern Heap Sort (1964)],Heap Sort,1964,https://www.bibsonomy.org/bibtex/2f485e4ea9a877871b59ab503151a7f10/bjoern,,,,0.0,0,4,n: 4,O(n \log n),n: size of list,n,,,Word RAM,words,1,n: 1,O(1) (in-situ),(can be easily derived),1.0,0.0,,0,,0,,0,0,0,0,0,https://en.wikipedia.org/wiki/Heapsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,9965.0,100.3512293,,,,,,,,4,,,Combinatorics
17,1.0,Sorting,2.0,Non-Comparison Sorting,7.0,,,1,1,O(n+k),uniform distribution over all sets of key values,CLRS,[http://bitsavers.org/pdf/mit/whirlwind/R-series/R-232_Information_Sorting_in_the_Application_of_Electronic_Digital_Computers_to_Business_Operations_May54.pdf Counting Sort (1954)],Counting Sort,1954,http://bitsavers.org/pdf/mit/whirlwind/R-series/R-232_Information_Sorting_in_the_Application_of_Electronic_Digital_Computers_to_Business_Operations_May54.pdf,,,,0.0,0,3,"n: 3,
k: 3",O(n+k),"n: size of list
k: range of non-negative key values",n,,,Word RAM,words,3,"n: 3,
k: 3",O(n+k),(can be easily derived),1.0,0.0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Counting_sort

https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf",A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000.0,1000,,,,,,,,4,,,Combinatorics
18,1.0,Sorting,2.0,Non-Comparison Sorting,16.0,,,1,1,O(n),uniform distribution of elements within domain of array,CLRS,[- Bucket Sort (1940)],Bucket Sort,1940,-,,,,0.0,0,5,n: 5,O( n² ),n: size of list,n,,,Word RAM,words,3,n: 3,O(n),CLRS,0.0,0.0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000000.0,1,,,,,,,,4,,,Combinatorics
19,1.0,Sorting,2.0,Non-Comparison Sorting,21.0,,,1,1,O(wn),Any distribution (runtime is same regardless of input),(same general behavior across all inputs),[- Radix Sort (1940)],Radix Sort,1940,-,4,1.0,,1.0,4->6,3,"n: 3,
w: 3",O(wn),"n: size of list
w: length of word",n,,,Word RAM,words,3,"n: 3,
w: 3",O(w+n),(wikipedia page?),0.0,0.0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Radix_sort

https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf",A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000.0,1000,999.0,1000000,1000000,999999.0,1000000000,1000000000,999999999.0,4,,,Combinatorics
20,2.0,kth Order Statistic,2.0,kth Order Statistic,26.0,,,1,1,O(nlogn),uniform distribution over all possible permutations (see sorting),(can derive from sorting + linear scan),[- Naive Selection (1940)],Naive Selection,1940,-,1,1.0,https://en.wikipedia.org/wiki/Selection_algorithm,1.0,0,4,n: 4,O(n \log n),n: size of list,n,,,Word RAM,words,1,n: 1,O(1) (in-situ),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,the kth order statistic of a statistical sample is equal to its kth-smallest value.,1.0,n is the size of the array,,,,,,,,9965.0,1,,19931568,1,,29897352854,1,,5,,,Combinatorics
21,2.0,kth Order Statistic,2.0,kth Order Statistic,27.0,,,1,1,O(n),uniform distribution over all possible permutations,https://11011110.github.io/blog/2007/10/09/blum-style-analysis-of.html,[https://dl.acm.org/citation.cfm?doid=366622.366647 Hoare's Selection Algorithm (QuickSelect) (1961)],Hoare's Selection Algorithm (QuickSelect),1961,https://dl.acm.org/citation.cfm?doid=366622.366647,,,,0.0,0,5,n: 5,O(n^2),n: size of list,n,,,Word RAM,words,1,n: 1,O(1) (in-situ),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,the kth order statistic of a statistical sample is equal to its kth-smallest value.,1.0,n is the size of the array,,,,,,,,1000.0,9.965,,,,,,,,5,,,Combinatorics
22,3.0,Matrix Chain Multiplication,2.0,Matrix Chain Ordering Problem,29.0,,,1,1,O (4^n),Any distribution (runtime is same regardless of input),CLRS for runtime,[- Brute Force (1940)],Brute Force,1940,-,1,1.0,http://www.cs.tut.fi/~elomaa/teach/AADS-2014-7.pdf,1.0,0,8,n: 8,$O(4^n)$,n: number of matrices,n,,,Word RAM,words,3,n: 3,O(n),can be derived,1.0,0.0,,0,,0,,0,0,,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
23,3.0,Matrix Chain Multiplication,2.0,Matrix Chain Ordering Problem,30.0,,,1,1,O(n^3),Any distribution (runtime is same regardless of input),CLRS for runtime,[- Dynamic Programming Algorithm (S. S. Godbole) (1953)],Dynamic Programming Algorithm (S. S. Godbole),1953,-,,,,1.0,1->3,6,n: 6,O(n^3),n: number of matrices,n,,,Word RAM,words,5,n: 5,O(n^2),CLRS http://mitpress.mit.edu/9780262046305/introduction-to-algorithms/,0.0,0.0,,0,,0,,0,0,,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,1000000000.0,Inf,,,,,,,,1,,,Combinatorics
24,4.0,Longest Common Subsequence,2.0,LCS,38.0,,,1,1,O(mn),Any distribution (runtime is same regardless of input),(can be easily derived),[https://dl.acm.org/citation.cfm?doid=321796.321811 Wagner and Fischer (1974)],Wagner and Fischer,1974,https://dl.acm.org/citation.cfm?doid=321796.321811,,,,1.0,-,5,"n: 3,
m: 3,
m+n: 5",O(mn),"n, m: lengths of input strings",m+n,,,Word RAM,words,5,"n: 3,
m: 3,
m+n: 5",O(mn),https://dl.acm.org/doi/10.1145/360825.360861,0.0,0.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,1000000.0,,1000000000000.0,,1e+18,,250000.0,1,,250000000000,1,,2.5E+17,1,,4,,,Combinatorics
25,5.0,Maximum Flow,2.0,,54.0,,,1,1,O(E^2U),<= possibly open if there's a better bound? i.e. for Erdos-Renyi with uniform edge weights,,[http://www.cs.yale.edu/homes/lans/readings/routing/ford-max_flow-1956.pdf Ford & Fulkerson (1955)],Ford & Fulkerson,1955,http://www.cs.yale.edu/homes/lans/readings/routing/ford-max_flow-1956.pdf,,,,1.0,2->3,7,"V: 7,
E: 5,
U: 3",O(E^2U),"V: number of vertices
E: number of edges
U: maximum edge capacity
Edge weights must be integers",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),https://core.ac.uk/download/pdf/81946904.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",1666.666667,4.623413252,1666666.667,30.6227766,1666666667.0,176.827941,56895766.95,0.004394,,5.68958E+16,0.000004394,,5.68958E+25,0.000000004394,,2,,,Combinatorics
26,5.0,Maximum Flow,2.0,,55.0,,,1,1,O(V^2E),^ see above,,[https://www.scirp.org/(S(lz5mqp453edsnp55rrgjct55))/reference/ReferencesPapers.aspx?ReferenceID=1690549 Dinitz (1970)],Dinitz,1970,https://www.scirp.org/(S(lz5mqp453edsnp55rrgjct55))/reference/ReferencesPapers.aspx?ReferenceID=1690549,,,,0.0,0,7,"V: 7,
E: 3",O(V^2E),"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),https://core.ac.uk/download/pdf/81946904.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,20482476.0,384.6153865,,,,,,,,2,,,Combinatorics
27,5.0,Maximum Flow,2.0,,56.0,,,1,1,O(E^2LogU),^ see above,,[https://web.eecs.umich.edu/~pettie/matching/Edmonds-Karp-network-flow.pdf Edmonds & Karp (1972)],Edmonds & Karp,1972,https://web.eecs.umich.edu/~pettie/matching/Edmonds-Karp-network-flow.pdf,,,,1.0,0,7,"V: 7,
E: 5,
U: 2",O(E^2 \log U),"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),https://core.ac.uk/download/pdf/81946904.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,1270306.607,0.196802881,,2744535051194,0.0910901101,,4.21876E+18,0.05925906969,,2,,,Combinatorics
28,5.0,Maximum Flow,2.0,,58.0,,,1,1,O(V^3),^ see above,,[http://alexander-karzanov.net/Publications/maxflow-acyc.pdf Karzanov (1974)],Karzanov,1974,http://alexander-karzanov.net/Publications/maxflow-acyc.pdf,,,,0.0,0,6,V: 6,O(V^3),"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"E: 1,
V: 5",O(V^2),https://core.ac.uk/download/pdf/81946904.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,12289485.0,641.0256755,,,,,,,,2,,,Combinatorics
29,5.0,Maximum Flow,2.0,,60.0,,,1,1,O(VELog^2V),^ see above,,[https://core.ac.uk/download/pdf/81946904.pdf Galil & Naamad (1980)],Galil & Naamad,1980,https://core.ac.uk/download/pdf/81946904.pdf,,,,1.0,0,6.02,"V: 6.02,
E: 3",O(VE \log^2 V),"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),https://core.ac.uk/download/pdf/81946904.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,7559564.594,#VALUE!,,32701134618989,#VALUE!,,7.54729E+19,#VALUE!,,2,,,Combinatorics
30,6.0,Matrix Product,2.0,Matrix Multiplication,74.0,,,1,1,O(n^3),"""Any distribution (runtime is same regardless of input)""",(can be easily derived because additions and multiplications can be done in constant time),[- Naive algorithm (1940)],Naive algorithm,1940,-,,,,1.0,0,4.5,"n: 6,
n^2: 4.5",O(n^3),n: dimension of square matrix,n^2,,,Word RAM,words,1,"n: 1,
n^2: 1",O(1) auxiliary,can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,1000000000.0,1,,1E+18,1,,1E+27,1,,3,,,Combinatorics
31,6.0,Matrix Product,2.0,Matrix Multiplication,75.0,,,1,1,O(n^{(log7/log2)}) ~ O(n^2.807),"""Any distribution (runtime is same regardless of input)""",(can be easily derived because additions and multiplications can be done in constant time),[https://link.springer.com/article/10.1007%2FBF02165411 Strassen's algorithm (1969)],Strassen's algorithm,1969,https://link.springer.com/article/10.1007%2FBF02165411,,,,1.0,0,4.4035,"n: 5.807,
n^2: 4.4035",$O(n^{(log7/log2)}) ~ O(n^{2.807})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),http://www.cs.cmu.edu/afs/cs/academic/class/15750-s17/ScribeNotes/lecture1.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,263633138.6,3.79314985,0.04704540988,6.95024E+16,14.38798578,0.09630409036,1.83231E+25,54.57578611,0.1478801656,3,,,Combinatorics
32,6.0,Matrix Product,2.0,Matrix Multiplication,76.0,,,1,1,O(n^{(log(143640)/log(70))}) ~ O(n^{2.795}),"""Any distribution (runtime is same regardless of input)""",(can be easily derived because additions and multiplications can be done in constant time),[https://ieeexplore.ieee.org/document/4567976 Pan's algorithm (1978)],Pan's algorithm,1978,https://ieeexplore.ieee.org/document/4567976,,,,1.0,0,4.3975,"n: 5.795,
n^2: 4.3975",$O(n^{(log(143640)/log(70))}) ~ O(n^{2.795})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1.0,0.0,,0,,0,,0,0,,0,0,,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,251188643.2,3.981071706,0.03702559087,6.30957E+16,15.84893192,0.07542207611,1.58489E+25,63.09573445,0.1152402139,3,,,Combinatorics
33,6.0,Matrix Product,2.0,Matrix Multiplication,79.0,,,1,1,O(n^{2.51665}),Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[https://epubs.siam.org/doi/abs/10.1137/0211020 Romani's algorithm (1981)],Romani's algorithm,1981,https://epubs.siam.org/doi/abs/10.1137/0211020,,,,1.0,0,4.258325,"n: 5.51665,
n^2: 4.258325",$O(n^{2.51665})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1.0,0.0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,35809643.71,27.92543841,0.08459673488,1.28233E+15,779.8301105,0.1763500773,4.59198E+22,21777.09772,0.2758654529,3,,,Combinatorics
34,6.0,Matrix Product,2.0,Matrix Multiplication,80.0,,,1,1,O(n^{2.495548}),Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[https://epubs.siam.org/doi/abs/10.1137/0211038 Coppersmith–Winograd algorithm (1981)],Coppersmith–Winograd algorithm,1981,https://epubs.siam.org/doi/abs/10.1137/0211038,,,,1.0,0,4.247774,"n: 5.495568,
n^2: 4.247774",$O(n^{2.495548})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1.0,0.0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,30549211.13,32.73406949,0.08880779024,933254300796992,1071.519305,0.1855024041,2.85102E+22,35075.1874,0.2907842529,3,,,Combinatorics
35,6.0,Matrix Product,2.0,Matrix Multiplication,81.0,,,1,1,O(n^{(log54/log5)}) ~ O(n^{(2.4785)}),Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[https://ieeexplore.ieee.org/abstract/document/4568194 Strassen's algorithm (1986)],Strassen's algorithm,1986,https://ieeexplore.ieee.org/abstract/document/4568194,,,,1.0,0,4.23925,"n: 5.4785,
n^2: 4.23925",$O(n^{(log54/log5)}) ~ O(n^{(2.4785)})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1.0,0.0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,27542287.03,36.30780548,0.08121744309,758577575029184,1318.256739,0.1690311592,2.0893E+22,47863.00923,0.2639768809,3,,,Combinatorics
36,6.0,Matrix Product,2.0,Matrix Multiplication,82.0,,,1,1,O(n^{2.3755}),Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[http://www.cs.umd.edu/~gasarch/TOPICS/ramsey/matrixmult.pdf Coppersmith–Winograd algorithm (1990)],Coppersmith–Winograd algorithm,1990,http://www.cs.umd.edu/~gasarch/TOPICS/ramsey/matrixmult.pdf,,,,1.0,0,4.18775,"n: 5.3755,
n^2: 4.18775",$O(n^{2.3755})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1.0,0.0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,13061708.88,76.55966069,0.0906364297,170608238900312,5861.381645,0.1894878218,2.22844E+21,448745.3899,0.2972987511,3,,,Combinatorics
37,6.0,Matrix Product,2.0,Matrix Multiplication,83.0,,,1,1,O(n^{2.372873}),Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[http://theory.stanford.edu/~virgi/matrixmult-f.pdf Vassilevska Williams (2014)],Vassilevska Williams,2014,http://theory.stanford.edu/~virgi/matrixmult-f.pdf,,,,1.0,0,4.1864365,"n: 5.372873,
n^2: 4.1864365",$O(n^{2.372873})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1.0,0.0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,13152248.0,76.03262956,0.06027597087,179060585403530,5584.701947,0.1236605537,2.39607E+21,417349.5985,0.1911122816,3,,,Combinatorics
38,6.0,Matrix Product,2.0,Matrix Multiplication,84.0,,,1,1,O(n^{2.3728639}),Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[https://arxiv.org/abs/1401.7714 François Le Gall (2014)],François Le Gall,2014,https://arxiv.org/abs/1401.7714,,,,1.0,0,4.18643195,"n: 5.3728639,
n^2: 4.18643195",$O(n^{2.3728639})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1.0,0.0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,12971792.71,77.09034691,0.06047393837,168267406107047,5942.921586,0.124604974,2.18273E+21,458141.8867,0.1926142659,3,,,Combinatorics
39,7.0,Graph Coloring,2.0,3-Graph Coloring,85.0,,,1,1,O((n+m)*3^n),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[- Brute-force search (1852)],Brute-force search,1852,-,1,1.0,,1.0,0,8,"n: 8,
m: 3",$O((m+n)*3^n)$,"n: number of vertices
m: number of edges",n,,,Word RAM,words,3,n: 3,O(n) auxiliary,(can be easily derived),1.0,0.0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
40,8.0,Graph Coloring,2.0,4-Graph Coloring,98.0,,,1,1,O((m+n)*4^n),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[ Brute force (1852)],Brute force,1852,,1,1.0,,1.0,0,8,"n: 8,
m: 3",$O((m+n)*4^n)$,"n: number of vertices
m: number of edges",n,,,Word RAM,words,3,n: 3,O(n) auxiliary,(can be easily derived),1.0,0.0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
41,9.0,Linear System,2.0,"Positive Definite, Hermitian Matrix",103.0,,,1,1,O(n^3),^see above (with caveat that matrix has to be positive definite and hermitian),^see above,[- Cholesky (1940)],Cholesky,1940,-,,,,0.0,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,36926037.0,1,,,,,,,,3,,,Numerical Analysis
42,9.0,Linear System,2.0,"Non-Definite, Symmetric Matrix",105.0,,,1,1,O(n^3),"^see above (non-definite, symmetric)",^see above,[https://link.springer.com/article/10.1007/BF01931804 Aasen's method (1971)],Aasen's method,1971,https://link.springer.com/article/10.1007/BF01931804,,,,0.0,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2) total,can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,36926037.0,1,,,,,,,,3,,,Numerical Analysis
43,9.0,Linear System,2.0,Toeplitz Matrix,106.0,,,1,1,O(n^2),^see above (Toeplitz),^see above,[https://onlinelibrary.wiley.com/doi/abs/10.1002/sapm1946251261 Levinson–Durbin recursion (1947)],Levinson–Durbin recursion,1947,https://onlinelibrary.wiley.com/doi/abs/10.1002/sapm1946251261,,,,0.0,0,3,"n: 5,
n^2: 3",$O(n^2)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2) total,"can be easily derived (lower bounded by input size, upper bounded by runtime)",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Levinson_recursion,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,1000000.0,36.926037,,,,,,,,3,,,Numerical Analysis
44,9.0,Linear System,2.0,Toeplitz Matrix,107.0,,,1,1,O(n^2),^see above (Toeplitz),^see above,[https://link.springer.com/article/10.1007/BF02163269 Bareiss Algorithm (1969)],Bareiss Algorithm,1969,https://link.springer.com/article/10.1007/BF02163269,,,,0.0,0,3,"n: 5,
n^2: 3",$O(n^2)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2) total,"can be easily derived (lower bounded by input size, upper bounded by runtime)",1.0,0.0,,0,,0,,0,0,,0,0,,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,110889.0,333,,,,,,,,3,,,Numerical Analysis
45,9.0,Linear System,2.0,Vandermonde Matrix,108.0,,,1,1,O(n^2),^see above (Vandermonde),^see above,[https://www.jstor.org/stable/2004623?seq=1 Bjorck-Pereyra (1970)],Bjorck-Pereyra,1970,https://www.jstor.org/stable/2004623?seq=1,,,,0.0,0,3,"n: 5,
n^2: 3",$O(n^2)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2) total,"can be easily derived (lower bounded by input size, upper bounded by runtime)",1.0,0.0,,0,,0,,0,0,,0,0,,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,110889.0,333,,,,,,,,3,,,Numerical Analysis
46,10.0,Linear Programming,2.0,,110.0,,,1,1,O((m/4)^{(2^n)}),Any distribution (runtime is same regardless of input),"(same behavior across all inputs, at least for naive implementation)",[- Fourier–Motzkin elimination (1940)],Fourier–Motzkin elimination,1940,-,4,1.0,http://www.cs.cmu.edu/~odonnell/toolkit13/lecture13-anonymous.pdf,1.0,0,8,"n: 8,
m: 7",O((m/4)^{(2^n)}),"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,8,"n: 8,
m: 7",O((m/4)^{(2^n)}),(can be easily derived? you have that many inequalities),1.0,0.0,,0,,0,,0,0,,0,0,https://gallica.bnf.fr/ark:/12148/bpt6k32227/f53,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,,inf,,inf,,inf,,inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis
47,10.0,Linear Programming,2.0,,111.0,,,1,1,O(n^6 * L^2 logL loglogL),Any distribution (runtime is same regardless of input),(same behavior across all inputs?),[https://www.sciencedirect.com/science/article/abs/pii/0041555380900610 Khachiyan Ellipsoid algorithm  (1979)],Khachiyan Ellipsoid algorithm ,1979,https://www.sciencedirect.com/science/article/abs/pii/0041555380900610,,,,1.0,1->2,7,"n: 7,
L: 5.02",O(n^6 * L^2 \log L \log\log L),"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 3,
L: 3",O(nmL),see orginal paper (noting that O(alpha*log(H*alpha)) = O(L)),0.0,1.0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Linear_programming#Ellipsoid_algorithm,_following_Khachiyan",Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,,,,,,,,225400229426.0,Inf,,7.12778E+24,Inf,,2.254E+38,Inf,,1,,,Numerical Analysis
48,11.0,Line segment intersection,2.0,"Reporting all intersection points, line segments",118.0,,,1,1,O(n^2),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[- Naive (1940)],Naive,1940,-,1,1.0,,1.0,1,5,n: 5,O(n^2),"n: number of line segments
k: number of points of intersection",n,,,Real RAM,words,1,n: 1,O(1),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Image Processing
49,11.0,Line segment intersection,2.0,"Reporting all intersection points, line segments",119.0,,,1,1,O( n log n + k log n),^see above,^see above,[https://doi.org/10.1109%2FTC.1979.1675432 Bentley–Ottmann algorithm (1979)],Bentley–Ottmann algorithm,1979,https://doi.org/10.1109%2FTC.1979.1675432,,,,1.0,4->5,4,"n: 4,
k: 3",O( n \log n + k \log n),"n: number of line segments
k: number of points of intersection",n,,,Real RAM,words,3,n: 3,O(n),https://dl.acm.org/doi/pdf/10.1145/147508.147511,0.0,0.0,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,k=n^0.5,,,,,,,10280.93005,97.26746458,0.1245364271,19951500.14,50121.5444,0.3198161773,29898298291,33446719.62,0.5593088428,4,,,Image Processing
50,12.0,Convex Hull,2.0,2-dimensional,127.0,,,1,1,O(n^3),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[- Brute Force (1935)],Brute Force,1935,-,1,1.0,http://math.uaa.alaska.edu/~afkjm/cs351/handouts/bruteforce,1.0,0,6,n: 6,O(n^3),"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,O(n),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,1000.0,,1000000.0,,1000000000.0,,1000000000.0,1,,1E+18,1,,1E+27,1,,3,,,Image Processing
51,12.0,Convex Hull,2.0,2-dimensional,128.0,,,1,1,O(nh),^see above,^see above,[https://linkinghub.elsevier.com/retrieve/pii/0020019073900203 Jarvis (1973)],Jarvis,1973,https://linkinghub.elsevier.com/retrieve/pii/0020019073900203,,,,0.0,0,3,"n: 3,
h: 3",O(nh),"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,1,n: 1,O(1),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,1.0,0.1993539462,1.0,0.4384498883,1.0,0.7252105499,31622.7766,31622.7766,0.3134727062,1000000000,1000000000,0.7252105499,31622776601684,31622776601684,1.26601697,3,,,Image Processing
52,14.0,Minimum Spanning Tree (MST),2.0,"Undirected, General MST",157.0,,,1,1,O(E + Vlog^2(V)),"""Either full or random graphs whose cost edges are assigned at random independently of the rest (using any continuous distribution)""",https://dl.acm.org/doi/10.5555/2791171.2791187,[https://link.springer.com/chapter/10.1007/BFb0028279 Kruskal’s algorithm with demand-sorting (1991)],Kruskal’s algorithm with demand-sorting,1991,https://link.springer.com/chapter/10.1007/BFb0028279,,,,0.0,0,5.01,"V: 5.01,
E: 3",O(E \log V),"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,32120.0,0.1580012453,,,,,,,,5,,,Combinatorics
53,14.0,Minimum Spanning Tree (MST),2.0,"Undirected, General MST",158.0,,,1,1,O(E + Vlog^2(V)),"""Either full or random graphs whose cost edges are assigned at random independently of the rest (using any continuous distribution)""",https://dl.acm.org/doi/10.5555/2791171.2791187,[https://dl.acm.org/citation.cfm?id=2791187 Quick Kruskal algorithm (2006)],Quick Kruskal algorithm,2006,https://dl.acm.org/citation.cfm?id=2791187,,,,0.0,0,5.01,"V: 5.01,
E: 3",O(E \log V),"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,32120.0,0.1580012453,,,,,,,,5,,,Combinatorics
54,14.0,Minimum Spanning Tree (MST),2.0,"Undirected, General MST",162.0,,,1,1,O(E),Randomness within the algorithm steps themselves,http://cs.brown.edu/research/pubs/pdfs/1995/Karger-1995-RLT.pdf,[http://cs.brown.edu/research/pubs/pdfs/1995/Karger-1995-RLT.pdf Karger; Klein & Tarjan (1995)],Karger; Klein & Tarjan,1995,http://cs.brown.edu/research/pubs/pdfs/1995/Karger-1995-RLT.pdf,4,1.0,http://cs.brown.edu/research/pubs/pdfs/1995/Karger-1995-RLT.pdf,1.0,5->6,5,"V: 5,
E: 3","O(min(V^2, ElogV))","V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),can be easily derived,1.0,0.0,,1,Las Vegas,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,583.0,8.704974271,0.04012774621,583333.3333,18.66853416,0.05465664879,583333333.3,28.63431845,0.06289129891,5,,,Combinatorics
55,15.0,Closest Pair Problem,2.0,"k-dimensional space, l_m (or l_infty) norm",164.0,,,1,1,O(kn^2),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[- Naive Implementation (1975)],Naive Implementation,1975,-,1,1.0,,1.0,0,5,"n: 5,
k: 3",O(kn^2),"n: number of points
k: dimension of space",n,,,Real RAM,words,1,n: 1,O(1),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Image Processing
56,20.0,LU Decomposition,2.0,Square Matrix LU Decomposition,209.0,,,1,1,O(n^3),Any,,[ Doolittle Algorithm (1878)],Doolittle Algorithm,1878,,2,1.0,https://www.geeksforgeeks.org/doolittle-algorithm-lu-decomposition/,1.0,0,4.5,"n: 6,
n^2: 4.5",O(n^3),n: dimension of square matrix,n^2,,,Word RAM,words,1,"n: 1,
n^2: 1",$\tilde{O}(1)$,Derived: only storing 1 intermediate variable,1.0,0.0,,0,,0,,0,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,1000000000.0,1,,1E+18,1,,1E+27,1,,3,"This is essentially just Gaussian elimination

Original paper is ""Method employed in the solution of normal equations and the adjustment of a triangularization""",,Numerical Analysis
57,20.0,LU Decomposition,2.0,Square Matrix LU Decomposition,210.0,,,1,1,O(n^3),,,[https://en.wikipedia.org/wiki/Crout_matrix_decomposition Crout and LUP algorithms (2007)],Crout and LUP algorithms,2007,https://en.wikipedia.org/wiki/Crout_matrix_decomposition,,,,0.0,0,4.5,"n: 6,
n^2: 4.5",O(n^3),n: dimension of square matrix,n^2,,,Word RAM,words,1,"n: 1,
n^2: 1",$\tilde{O}(1)$,Derived: only storing 1 intermediate variable,1.0,0.0,,0,,0,,0,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,1000000000.0,1,,,,,,,,3,Slight variation of Doolittle,,Numerical Analysis
58,20.0,LU Decomposition,2.0,Square Matrix LU Decomposition,215.0,,,1,0,O(n^3),,,[https://arxiv.org/abs/math/0506382 Okunev; Johnson (1997)],Okunev; Johnson,1997,https://arxiv.org/abs/math/0506382,,,,0.0,0,6,"n: 6,
n^2: 4.5",O(n^3),n: dimension of square matrix,n^2,,,Word RAM,words,1,"n: 1,
n^2: 1",$O(1)$,Derived: all in-place calculations,1.0,0.0,,0,,0,,0,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,9965.0,100351.2293,,,,,,,,3,,,Numerical Analysis
59,21.0,Informed Search,2.0,Informed Search,217.0,,,1,1,O(b^d),,,[https://ieeexplore.ieee.org/document/4082128/ A* Algorithm (1968)],A* Algorithm,1968,https://ieeexplore.ieee.org/document/4082128/,,,,0.0,0,8,"b: 7,
d: 8",O(b^d),"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),https://en.wikipedia.org/wiki/A*_search_algorithm: Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,https://www.cs.auckland.ac.nz/compsci767s2c/projectReportExamples.d/astarNilsson.pdf,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics
60,21.0,Informed Search,2.0,Informed Search,218.0,,,1,1,O(b^{(d/2)}),,https://arxiv.org/pdf/1703.03868.pdf for experimental results,[https://www.cs.princeton.edu/courses/archive/spr06/cos423/Handouts/EPP%20shortest%20path%20algorithms.pdf Bidirectional A* Algorithm (2007)],Bidirectional A* Algorithm,2007,https://www.cs.princeton.edu/courses/archive/spr06/cos423/Handouts/EPP%20shortest%20path%20algorithms.pdf,2,1.0,http://theory.stanford.edu/~amitp/GameProgramming/Variations.html,1.0,0,8,"b: 7,
d: 8",$O(b^{(d/2)})$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^{(d/2)}),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,https://en.wikipedia.org/wiki/Bidirectional_search,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Robotics
61,21.0,Informed Search,2.0,Informed Search,224.0,,,1,1,O(b^d),,,[http://idm-lab.org/bib/abstracts/papers/aamas09d.pdf Fringe Saving A* (FSA*) (2008)],Fringe Saving A* (FSA*),2008,http://idm-lab.org/bib/abstracts/papers/aamas09d.pdf,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics
62,21.0,Informed Search,2.0,Informed Search,225.0,,,1,1,O(b^d),,,[http://idm-lab.org/bib/abstracts/papers/aamas08b.pdf Generalized Adaptive A* (GAA*) (2008)],Generalized Adaptive A* (GAA*),2008,http://idm-lab.org/bib/abstracts/papers/aamas08b.pdf,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics
63,21.0,Informed Search,2.0,Informed Search,226.0,,,1,1,O(b^d),,,[https://linkinghub.elsevier.com/retrieve/pii/0004370285900840 Iterative Deepening A* (IDA*) (1985)],Iterative Deepening A* (IDA*),1985,https://linkinghub.elsevier.com/retrieve/pii/0004370285900840,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics
64,21.0,Informed Search,2.0,Informed Search,227.0,,,1,1,O(b^d),,,[http://users.cecs.anu.edu.au/~dharabor/data/papers/harabor-grastien-aaai11.pdf Jump Point Search (JPS) (2011)],Jump Point Search (JPS),2011,http://users.cecs.anu.edu.au/~dharabor/data/papers/harabor-grastien-aaai11.pdf,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics
65,21.0,Informed Search,2.0,Informed Search,228.0,,,1,1,O(b^d),,,[http://idm-lab.org/bib/abstracts/papers/aaai02b.pdf Lifelong Planning A* (LPA*) (2001)],Lifelong Planning A* (LPA*),2001,http://idm-lab.org/bib/abstracts/papers/aaai02b.pdf,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics
66,21.0,Informed Search,2.0,Informed Search,229.0,,,1,1,O(b^d),,,[https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.105.7839 Simplified Memory-Bounded A* (SMA*) (1992)],Simplified Memory-Bounded A* (SMA*),1992,https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.105.7839,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics
67,21.0,Informed Search,2.0,Informed Search,230.0,,,1,1,O(b^d),,,[http://idm-lab.org/bib/abstracts/papers/aaai07a.pdf Theta* (2010)],Theta*,2010,http://idm-lab.org/bib/abstracts/papers/aaai07a.pdf,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics
68,21.0,Informed Search,2.0,Informed Search,231.0,,,1,1,O(b^d),,,[https://papers.nips.cc/paper/2382-ara-anytime-a-with-provable-bounds-on-sub-optimality.pdf Anytime Repairing A* (ARA*) (2005)],Anytime Repairing A* (ARA*),2005,https://papers.nips.cc/paper/2382-ara-anytime-a-with-provable-bounds-on-sub-optimality.pdf,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics
69,21.0,Informed Search,2.0,Informed Search,232.0,,,1,1,O(b^d),,,[https://www.cs.du.edu/~sturtevant/papers/TBA.pdf Time-Bounded A* (TBA*) (2009)],Time-Bounded A* (TBA*),2009,https://www.cs.du.edu/~sturtevant/papers/TBA.pdf,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics
70,22.0,String Search,2.0,Single String Search,233.0,Linear searching,,1,1,O(m(n-m+1)),,Wikipedia claims this is O(n+m),[- Naïve string-search algorithm (1940)],Naïve string-search algorithm,1940,-,1,1.0,https://en.wikipedia.org/wiki/String-searching_algorithm,1.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(m(n-m+1))$,"m: pattern length
n: length of searchable text",m+n,,,Word RAM,words,1,"n: 1,
m: 1,
s: 1,
m+n: 1",O(1),Derived (pointer algorithm),1.0,0.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,80100.0,1,,80000100000,1,,8E+16,1,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics
71,22.0,String Search,2.0,Single String Search,234.0,Automaton-based,,1,1,O(m+n),,,[https://pdfs.semanticscholar.org/4479/9559a1067e06b5a6bf052f8f10637707928f.pdf Knuth-Morris-Pratt (KMP) algorithm (1977)],Knuth-Morris-Pratt (KMP) algorithm,1977,https://pdfs.semanticscholar.org/4479/9559a1067e06b5a6bf052f8f10637707928f.pdf,,,,0.0,0,3,"m: 3,
n: 3,
m+n: 3",$O(m+n)$,"m: pattern length
n: length of searchable text",m+n,,,Word RAM,words,3,"n: 1,
m: 3,
s: 1,
m+n: 3",O(m),https://pdfs.semanticscholar.org/4479/9559a1067e06b5a6bf052f8f10637707928f.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics
72,22.0,String Search,2.0,Single String Search,235.0,"Heuristics-based, bad-character and good-suffix heuristics",,1,1,O(mn + s),,,[https://www.cs.utexas.edu/users/moore/publications/fstrpos.pdf Boyer-Moore (BM) algorithm (1977)],Boyer-Moore (BM) algorithm,1977,https://www.cs.utexas.edu/users/moore/publications/fstrpos.pdf,,,,0.0,0,5,"m: 3,
n: 3,
s: 3,
m+n: 5",$O(mn + s)$,"m: pattern length
n: length of searchable text
s: size of the alphabet",m+n,,,Word RAM,words,1,"n: 1,
m: 1,
s: 3,
m+n: 1",O(s),https://www.cs.utexas.edu/users/moore/publications/fstrpos.pdf,0.0,1.0,,0,,0,,1,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics
73,22.0,String Search,2.0,Single String Search,237.0,"Hashing-based, compare the text and patterns via their hash functions",,1,1,O(m + n),,,[https://pdfs.semanticscholar.org/c47d/151f09c567013761632c89e237431c6291a2.pdf Rabin-Karp (RK) algorithm (1987)],Rabin-Karp (RK) algorithm,1987,https://pdfs.semanticscholar.org/c47d/151f09c567013761632c89e237431c6291a2.pdf,,,,0.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"m: pattern length
n: length of searchable text",m+n,,,Word RAM,words,1,"n: 1,
m: 1,
s: 1,
m+n: 1",O(1),Derived: only storing a rolling hash,1.0,0.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics
74,23.0,Sequence Alignment,2.0,"Edit sequence, global alignment",250.0,,,1,1,O(mn),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[https://www.sciencedirect.com/science/article/pii/0022283670900574 Needleman–Wunsch algorithm (1970)],Needleman–Wunsch algorithm,1970,https://www.sciencedirect.com/science/article/pii/0022283670900574,1,1.0,https://www.sciencedirect.com/science/article/pii/0022283670900574,1.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",O(mn),"Uses an m*n array, whose contents are of size O(1)",1.0,0.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",1000000.0,,1000000000000.0,,1e+18,,250000.0,1,,250000000000,1,,2.5E+17,1,,4,,,Bioinformatics
75,23.0,Sequence Alignment,2.0,"Edit sequence, local alignment",251.0,,,1,1,O(mn^2),^see above,^see above,[https://www.sciencedirect.com/science/article/pii/0022283681900875 Smith–Waterman algorithm (1981)],Smith–Waterman algorithm,1981,https://www.sciencedirect.com/science/article/pii/0022283681900875,,,,0.0,0,6,"m: 3,
n: 5,
m+n: 6",$O(mn^2)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",O(mn),"Uses an m*n array, whose contents are of size O(1)",1.0,0.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000.0,1,,,,,,,,4,,,Bioinformatics
76,23.0,Sequence Alignment,2.0,Edit distance,252.0,,,1,1,O(mn / log(n)),^see above,^see above,[https://www.sciencedirect.com/science/article/pii/0022000080900021 Masek; Patterson (1980)],Masek; Patterson,1980,https://www.sciencedirect.com/science/article/pii/0022000080900021,1,1.0,https://reader.elsevier.com/reader/sd/pii/0022000080900021?token=73AF2A185C2FC6C67F5579CDB00D3B782FF86C4EB03694E1E783EFF5885B871AB0841E8A69D206FB16A1EFF882EB712C,1.0,0,4.99,"m: 3,
n: 3,
m+n: 4.99",$O(mn / log(n))$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,3,"n: 3,
m: 1,
m+n: 3",O(n),https://www.sciencedirect.com/science/article/pii/0022000080900021,0.0,1.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,27901.0,8.960252321,0.2451796774,13205456224,18.93156857,0.3418953868,8.65131E+15,28.89735285,0.3998638745,4,,,Bioinformatics
77,23.0,Sequence Alignment,2.0,Edit sequence,253.0,,,1,1,O(mn),^see above,^see above,[https://dl.acm.org/doi/10.1145/360825.360861 Hirschberg's algorithm (1975)],Hirschberg's algorithm,1975,https://dl.acm.org/doi/10.1145/360825.360861,,,,0.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,3,"n: 3,
m: 1,
m+n: 3",O(n),https://dl.acm.org/doi/10.1145/360825.360861,0.0,1.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",1000.0,2.981071706,1000000.0,14.84893192,1000000000.0,62.09573445,250000.0,1,,,,,,,,4,,,Bioinformatics
78,23.0,Sequence Alignment,2.0,"Edit sequence, local alignment",254.0,,,1,1,O(mn),^see above,^see above,[https://www.ncbi.nlm.nih.gov/pubmed/2983426 FASTA (1985)],FASTA,1985,https://www.ncbi.nlm.nih.gov/pubmed/2983426,,,,0.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",O(mn),"Uses an m*n array, whose contents are of size O(1)",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/FASTA,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000.0,1,,,,,,,,4,,,Bioinformatics
79,23.0,Sequence Alignment,2.0,"Edit sequence, local alignment",255.0,,,1,1,O(mn),^see above,^see above,[https://www.sciencedirect.com/science/article/pii/0022283682903989 Gotoh (1982)],Gotoh,1982,https://www.sciencedirect.com/science/article/pii/0022283682903989,,,,0.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",O(mn),"Uses a constant number of m*n arrays, whose contents are of size O(1)",1.0,0.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000.0,1,,,,,,,,4,,,Bioinformatics
80,23.0,Sequence Alignment,2.0,"Edit sequence, local alignment",256.0,,,1,1,O(mn),^see above,^see above,[https://link.springer.com/article/10.1007/BF02462326 Altschul and Erickson (1986)],Altschul and Erickson,1986,https://link.springer.com/article/10.1007/BF02462326,,,,0.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",O(mn),"Uses a constant number of m*n arrays, whose contents are of size O(1)",1.0,0.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000.0,1,,,,,,,,4,,,Bioinformatics
81,23.0,Sequence Alignment,2.0,"Edit sequence, local alignment",257.0,,,1,1,O(mn),^see above,^see above,[https://academic.oup.com/bioinformatics/article/4/1/11/205106?login=true Myers and Miller (1988)],Myers and Miller,1988,https://academic.oup.com/bioinformatics/article/4/1/11/205106?login=true,,,,0.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,3,"n: 3,
m: 2,
m+n: 3",O(n+log(m)),https://academic.oup.com/bioinformatics/article/4/1/11/205106?login=true,0.0,1.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000.0,1,,,,,,,,4,,,Bioinformatics
82,23.0,Sequence Alignment,2.0,"Edit sequence, global alignment",260.0,,,1,1,O(mn),^see above,^see above,[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC427531/ David Sankoff (1972)],David Sankoff,1972,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC427531/,,,,0.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",O(mn),"Uses a constant number of m*n arrays, whose contents are of size O(1)",1.0,0.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000.0,1,,,,,,,,4,,,Bioinformatics
83,25.0,Line Clipping,2.0,Rectangular Window,265.0,,,1,1,O(n),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[https://books.google.com/books/about/Principles_of_interactive_computer_graph.html?id=inJ8AAAAIAAJ Cohen–Sutherland (1967)],Cohen–Sutherland,1967,https://books.google.com/books/about/Principles_of_interactive_computer_graph.html?id=inJ8AAAAIAAJ,1,1.0,https://www.geeksforgeeks.org/line-clipping-set-1-cohen-sutherland-algorithm/,1.0,0,3,n: 3,O(n),n: number of lines,n,,,Word/Real RAM,words,1,n: 1,O(1),"Easily derived (O(1) per segment, space can be re-used)",1.0,0.0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Image Processing
84,25.0,Line Clipping,2.0,Rectangular Window,266.0,,,1,1,O(n),^ see above,^ see above,[https://dl.acm.org/doi/10.1145/357332.357333 Liang–Barsky (1984)],Liang–Barsky,1984,https://dl.acm.org/doi/10.1145/357332.357333,,,,0.0,0,3,n: 3,O(n),n: number of lines,n,,,Word/Real RAM,words,1,n: 1,O(1),"Easily derived (O(1) per segment, space can be re-used)",1.0,0.0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000.0,1,,,,,,,,6,,,Image Processing
85,25.0,Line Clipping,2.0,Rectangular Window,268.0,,,1,1,O(n),^ see above,^ see above,[https://dl.acm.org/doi/10.1145/37401.37432 Nicholl–Lee–Nicholl (1987)],Nicholl–Lee–Nicholl,1987,https://dl.acm.org/doi/10.1145/37401.37432,,,,0.0,0,3,n: 3,O(n),n: number of lines,n,,,Word/Real RAM,words,1,n: 1,O(1),"Easily derived (O(1) per segment, space can be re-used)",1.0,0.0,,0,,0,,0,0,,0,0,https://www.cs.drexel.edu/~david/Classes/Talks/McCurdyPresentation.pdf,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000.0,1,,,,,,,,6,,,Image Processing
86,25.0,Line Clipping,2.0,Rectangular Window,269.0,,,1,1,O(n),^ see above,^ see above,[https://www.sciencedirect.com/science/article/pii/0097849387900616 Fast clipping (1987)],Fast clipping,1987,https://www.sciencedirect.com/science/article/pii/0097849387900616,,,,0.0,0,3,n: 3,O(n),n: number of lines,n,,,Word/Real RAM,words,1,n: 1,O(1),"Easily derived (O(1) per segment, space can be re-used)",1.0,0.0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000.0,1,,,,,,,,6,,,Image Processing
87,26.0,NFA to DFA conversion,2.0,,272.0,,,1,1,O(2^n),,,[https://ieeexplore.ieee.org/document/5392601 Rabin–Scott powerset construction (1959)],Rabin–Scott powerset construction,1959,https://ieeexplore.ieee.org/document/5392601,1,1.0,http://www.cs.nuim.ie/~jpower/Courses/Previous/parsing/node9.html,1.0,0,8,n: 8,O(2^n),n: number of states,n,,,,,1,n: 1,O(1),"Derived: besides the O(2^n) output nodes and the O(n) input nodes, there's nothing to store",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
88,27.0,Multiplication,2.0,,273.0,,,1,1,O(n^1.58),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[http://www.mathnet.ru/php/archive.phtml?wshow=paper&jrnid=dan&paperid=26729&option_lang=eng Karatsuba Algorithm (1962)],Karatsuba Algorithm,1962,http://www.mathnet.ru/php/archive.phtml?wshow=paper&jrnid=dan&paperid=26729&option_lang=eng,,,,1.0,0,4.58,n: 4.58,$O(n^{1.58})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n),Re-use space across recursive subcalls (to obtain the recursion S(n) = S(n/2)+O(n)),1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,54954.08739,18.19700859,0.1409660639,3019951720,331.1311215,0.3018035591,165958690743756,6025.595861,0.4853136828,4,,,Numerical Analysis
89,27.0,Multiplication,2.0,,274.0,,,1,1,O(n^1.46),^see above,^see above,[https://www.ams.org/journals/tran/1969-142-00/S0002-9947-1969-0249212-8/S0002-9947-1969-0249212-8.pdf Toom-3 (1969)],Toom-3,1969,https://www.ams.org/journals/tran/1969-142-00/S0002-9947-1969-0249212-8/S0002-9947-1969-0249212-8.pdf,,,,1.0,0,4.46,n: 4.46,$O(n^{1.46})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n),Re-use space across recursive subcalls (to obtain the recursion S(n) = S(n/3)+O(n)),1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,23988.0,41.68751042,0.1372665733,19952623.15,50118.72336,0.4523422297,19952623.15,50118723363,1.338651544,4,,,Numerical Analysis
90,27.0,Multiplication,2.0,,275.0,,,1,1,O(n^2),^see above,^see above,[ Long Multiplication (1940)],Long Multiplication,1940,,1,1.0,https://en.wikipedia.org/wiki/Multiplication_algorithm,1.0,0,5,n: 5,$O(n^2)$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n),Easily derived (needed for intermediate results),1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Numerical Analysis
91,49.0,Nearest Neighbor Search,2.0,Nearest Neighbor Search (NNS),416.0,,,1,1,O(n),,,[- Linear search (1940)],Linear search,1940,-,1,1.0,,1.0,0,3,n: 3,O(n),,n,,,Real RAM,,1,n: 1,O(1),Derived: Only ever storing the current shortest distance and the corresponding node,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Combinatorics
92,49.0,Nearest Neighbor Search,2.0,Nearest Neighbor Search (NNS),417.0,,,1,1,"k-d Tree construction: O(n log n)
NNS: O(log n)","Beta distribution B(m, n). See paper for details",https://dl.acm.org/doi/pdf/10.1145/355744.355745,[https://dl.acm.org/doi/pdf/10.1145/355744.355745 k-d Tree (1975)],k-d Tree,1975,https://dl.acm.org/doi/pdf/10.1145/355744.355745,1,1.0,https://www.geeksforgeeks.org/k-dimensional-tree/,1.0,4->5,4,n: 4,"k-d Tree construction: $O(n \log n)$
NNS: $O(n)$",n: number of elements,n,,,Real RAM,,3,n: 3,O(n),https://dl.acm.org/doi/pdf/10.1145/355744.355745,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,100.3512293,,19931568.57,50171.66594,,29897352854,33447777.3,,4,,,Combinatorics
93,49.0,Nearest Neighbor Search,2.0,Nearest Neighbor Search (NNS),418.0,,,1,1,"R-Tree construction: O(n log n)
NNS: O(log n)",,,[http://www-db.deis.unibo.it/courses/SI-LS/papers/Gut84.pdf R-tree (1984)],R-tree,1984,http://www-db.deis.unibo.it/courses/SI-LS/papers/Gut84.pdf,,,,0.0,0,4,n: 4,"R-Tree construction: $O(n \log n)$
NNS: $O(n)$",n: number of elements,n,,,Real RAM,,2,n: 2,O(log n),"https://www.sciencedirect.com/science/article/pii/S1877050915019675, Table 2",0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,4,,,Combinatorics
94,66.0,The Subset-Sum Problem,2.0,Subset Sum,541.0,,,1,1,O(2^{(n/2)}),,,[https://dl.acm.org/doi/10.1145/321812.321823 Horowitz and Sahni (1974)],Horowitz and Sahni,1974,https://dl.acm.org/doi/10.1145/321812.321823,,,,1.0,0,8,n: 8,$O(2^{(n/2)})$,n: the number of integers in the set,n,,,Word RAM,words,8,"n: 8,
t: 1",O(2^{(n/2)}),https://dl.acm.org/doi/10.1145/321812.321823,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
95,66.0,The Subset-Sum Problem,2.0,Subset Sum,542.0,,,1,1,O(n t),,,[https://onlinelibrary.wiley.com/doi/10.1002/nav.3800030107 Bellman dynamic programming algorithm (1956)],Bellman dynamic programming algorithm,1956,https://onlinelibrary.wiley.com/doi/10.1002/nav.3800030107,,,,1.0,0,3,"n: 3,
t: 3",$O(n t)$,"n: the number of integers in the set
t: the target sum",n,,,Word RAM,words,1,"n: 1,
t: 3",O(t),"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Subset_sum_problem,,,,,1.0,0.5399265261,1.0,1.371373706,1.0,2.651741273,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
96,66.0,The Subset-Sum Problem,2.0,Subset Sum,543.0,,,1,1,O(n max(S)),,,[https://www.sciencedirect.com/science/article/abs/pii/S0196677499910349 Psinger (1999)],Psinger,1999,https://www.sciencedirect.com/science/article/abs/pii/S0196677499910349,,,,1.0,0,3,"n: 3,
max(S): 3",$O(n max(S))$,"n: the number of integers in the set
max(S): largest number in the set",n,,,Word RAM,words,1,"n: 1,
t: 3",O(t),"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
97,66.0,The Subset-Sum Problem,2.0,Subset Sum,544.0,,,1,1,"\tilde{O}(min{\sqrt{n'}t, t^{5/4}, σ})",,,[https://dl.acm.org/doi/pdf/10.1145/3329863 Koiliaris and Xu (2019)],Koiliaris and Xu,2019,https://dl.acm.org/doi/pdf/10.1145/3329863,,,,1.0,0,4,"n: 4,
t: 4.25,
\sigma: 3","$\tilde{O}(min{\sqrt{n'}t, t^{5/4}, σ})$","n': the number of distinct elements in the set
t: the target sum
σ: sum of elements in the set",n,,,Word RAM,words,1,"n: 1,
t: 3",O(t),"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
98,80.0,Maximum Subarray Problem,2.0,1D Maximum Subarray,622.0,,,1,1,O(n^3),"""Any distribution/runtime same regardless of input""",(same general behavior regardless of input),[- Brute Force (1977)],Brute Force,1977,-,1,1.0,,1.0,0,6,n: 6,O(n^3),n: length of array,n,,,Word/Real RAM,words,1,n: 1,O(1),"keep track of which subarray is being computed, along with current maximum",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,1000000000.0,1,,1E+18,1,,1E+27,1,,3,,,Combinatorics
99,80.0,Maximum Subarray Problem,2.0,1D Maximum Subarray,623.0,,,1,1,O(n^2),^see above,^see above,[- Grenander (1977)],Grenander,1977,-,,,,1.0,3->4,5,n: 5,O(n^2),n: length of array,n,,,Word/Real RAM,words,3,n: 3,O(n),storing precomputed cumulative sums,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,1000000.0,1000,0.2052609369,1000000000000,1000000,0.4526539259,1E+18,1000000000,0.7508270317,3,,1099511627776,Combinatorics
100,80.0,Maximum Subarray Problem,2.0,1D Maximum Subarray,623.0,,,1,1,O(n^2),^see above,^see above,[https://dl.acm.org/doi/pdf/10.1145/358234.381162 Faster Brute Force (via x[L:U] = x[L:U-1]+x[U]) (1977)],Faster Brute Force (via x[L:U] = x[L:U-1]+x[U]),1977,https://dl.acm.org/doi/pdf/10.1145/358234.381162,,,,0.0,0,5,n: 5,O(n^2),n: length of array,n,,,Word/Real RAM,words,1,n: 1,O(1),"keep track of which subarray is being computed, along with current maximum",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,1000000.0,1000,,1000000000000,1000000,,1E+18,1000000000,,3,,1099511627776,Combinatorics
101,80.0,Maximum Subarray Problem,2.0,1D Maximum Subarray,624.0,,,1,1,O(nlogn),^see above,^see above,[- Shamos (1978)],Shamos,1978,-,,,,1.0,4->5,4,n: 4,O(n \log n),n: length of array,n,,,Word/Real RAM,words,2,n: 2,O(\log n),keep track of recursive maximums,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,9965.784285,100343.3319,0.3539982994,19931568.57,50171665944,0.9124540696,29897352854,3.34478E+16,1.721772176,3,,,Combinatorics
102,80.0,Maximum Subarray Problem,2.0,1D Maximum Subarray,625.0,,,1,1,O(n),^see above,^see above,[- Kadane's Algorithm (1982)],Kadane's Algorithm,1982,-,1,1.0,,1.0,5->6,3,n: 3,O(n),n: length of array,n,,,Word/Real RAM,words,1,n: 1,O(1) auxiliary,keep track of current tail sum and best sum,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,1000.0,1000000,0.3894954944,1000000,1000000000000,0.9306977289,1000000000,1E+18,1.682695795,3,,,Combinatorics
103,99.0,Motif Search,2.0,Motif Search,788.0,,,1,1,O(n^2m \sigma),,,[https://link.springer.com/chapter/10.1007/BFb0054337 Speller (1998)],Speller,1998,https://link.springer.com/chapter/10.1007/BFb0054337,,,,0.0,0,5.5,"m: 3,
n: 5,
\sigma: 3,
mn: 5.5",$O(mn^2 \sigma)$,"$n$: size of set of input strings
$m$: size of input strings
$k$: length of substrings
$\sigma$: function V(k, m) defined as the number of k-mers that are at most m Hamming distance from the motif space
$w$: size of a word machine",mn,,,Word RAM,words,5.5,"m: 3,
n: 5,
k: 1,
mn: 5.5",O(mn^2/w),https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/pdf/1471-2105-11-S8-S1.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics
104,99.0,Motif Search,2.0,Motif Search,,,,1,1,O(k nm \sigma),,,[https://pubmed.ncbi.nlm.nih.gov/12169566/ Mitra (2002)],Mitra,2002,https://pubmed.ncbi.nlm.nih.gov/12169566/,,,,0.0,0,3,"m: 3,
n: 3,
k: 3,
\sigma: 3,
mn: 3",$O(k nm \sigma)$,"$n$: size of set of input strings
$m$: size of input strings
$k$: length of substrings
$\sigma$: function V(k, m) defined as the number of k-mers that are at most m Hamming distance from the motif space
$w$: size of a word machine",mn,,,Word RAM,words,3,"m: 3,
n: 3,
k: 3,
mn: 3",O(mnk),https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/pdf/1471-2105-11-S8-S1.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics
105,99.0,Motif Search,2.0,Motif Search,,,,1,1,O(k nm \sigma),,,[https://link.springer.com/chapter/10.1007/978-3-540-45078-8_5 Census (2003)],Census,2003,https://link.springer.com/chapter/10.1007/978-3-540-45078-8_5,,,,0.0,0,3,"m: 3,
n: 3,
k: 3,
\sigma: 3,
mn: 3",$O(k nm \sigma)$,"$n$: size of set of input strings
$m$: size of input strings
$k$: length of substrings
$\sigma$: function V(k, m) defined as the number of k-mers that are at most m Hamming distance from the motif space
$w$: size of a word machine",mn,,,Word RAM,words,3,"m: 3,
n: 3,
k: 3,
mn: 3",O(mnk),https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/pdf/1471-2105-11-S8-S1.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics
106,99.0,Motif Search,2.0,Motif Search,,,,1,1,O(n^2m \sigma),,,[https://link.springer.com/chapter/10.1007/11682462_69 Risotto (2006)],Risotto,2006,https://link.springer.com/chapter/10.1007/11682462_69,,,,0.0,0,5.5,"m: 3,
n: 5,
\sigma: 3,
mn: 5.5",$O(mn^2 \sigma)$,"$n$: size of set of input strings
$m$: size of input strings
$k$: length of substrings
$\sigma$: function V(k, m) defined as the number of k-mers that are at most m Hamming distance from the motif space
$w$: size of a word machine",mn,,,Word RAM,words,5.5,"m: 3,
n: 5,
k: 1,
mn: 5.5",O(mn^2),https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/pdf/1471-2105-11-S8-S1.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics
107,99.0,Motif Search,2.0,Motif Search,,,,1,1,O(nm^2 \sigma),,,[https://ieeexplore.ieee.org/abstract/document/4359890 PMS (2007)],PMS,2007,https://ieeexplore.ieee.org/abstract/document/4359890,,,,0.0,0,5.5,"m: 5,
n: 3,
\sigma: 3,
mn: 5.5",$O(nm^2 \sigma)$,"$n$: size of set of input strings
$m$: size of input strings
$k$: length of substrings
$\sigma$: function V(k, m) defined as the number of k-mers that are at most m Hamming distance from the motif space
$w$: size of a word machine",mn,,,Word RAM,words,5.5,"m: 5,
n: 3,
k: 1,
mn: 5.5",O(m^2 n),https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/pdf/1471-2105-11-S8-S1.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics
108,124.0,Rod-Cutting Problem,2.0,Rod-Cutting Problem,947.0,,,1,1,O(n*2^n),"""Any distribution/runtime same regardless of input""",(same general behavior regardless of input),[ Brute Force (1940)],Brute Force,1940,,1,1.0,https://web.stanford.edu/class/archive/cs/cs161/cs161.1168/lecture12.pdf,1.0,0,8,n: 8,$O(n*2^n)$,n: length of rod,n,,,Word RAM,words,3,n: 3,O(n),easily derived,1.0,0.0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Dynamic_programming

 https://web.stanford.edu/class/archive/cs/cs161/cs161.1168/lecture12.pdf",,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
109,124.0,Rod-Cutting Problem,2.0,Rod-Cutting Problem,948.0,,,1,1,O(n^2),"""Any distribution/runtime same regardless of input""",(same general behavior regardless of input),[ Dynamic Programming (1953)],Dynamic Programming,1953,,0.5,1.0,https://www.geeksforgeeks.org/cutting-a-rod-dp-13/,1.0,1->4,5,n: 5,$O(n^2)$,n: length of rod,n,,,Word RAM,words,3,n: 3,O(n),easily derived,1.0,0.0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Dynamic_programming

https://web.stanford.edu/class/archive/cs/cs161/cs161.1168/lecture12.pdf",,,,,,,,,,,1000000.0,Inf,inf,1000000000000,Inf,inf,1E+18,Inf,inf,1,,,Combinatorics
110,130.0,Change-Making Problem,2.0,Change-Making Problem,960.0,,,1,1,O(S^n),"""Any distribution/runtime same regardless of input""",(same general behavior regardless of input),[NA Brute Force (1940)],Brute Force,1940,,1,1.0,"https://en.wikipedia.org/wiki/Change-making_problem#:~:text=It%20is%20also%20the%20most,the%20order%20of%20the%20coins.",1.0,0,8,"n: 8,
S: 7",$O(S^n)$,"n: number of coin denominations
S: sum to be made",n,,,Word RAM,words,3,n: 3,O(n),Easily derived,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Change-making_problem,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
111,130.0,Change-Making Problem,2.0,Change-Making Problem,961.0,,,1,1,O(Sn),"""Any distribution/runtime same regardless of input""",(same general behavior regardless of input),[https://dl.acm.org/doi/10.1145/321864.321874 Dynamic Programming (1953)],Dynamic Programming,1953,https://dl.acm.org/doi/10.1145/321864.321874,2,1.0,"https://en.wikipedia.org/wiki/Change-making_problem#:~:text=It%20is%20also%20the%20most,the%20order%20of%20the%20coins.",1.0,1->4,5,"n: 5,
S: 3",$O(Sn)$,"n: number of coin denominations
S: sum to be made",n,,,Word RAM,words,5,"n: 5,
S: 3",O(Sn),Easily derived,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Change-making_problem,,,,,,,,,,,50000.0,Inf,inf,50000000,Inf,inf,50000000000,Inf,inf,1,,,Combinatorics
112,7.0,Graph Coloring,2.0,3-Graph Coloring,97.0,,,1,1,O(V^2),,,[https://dl.acm.org/doi/10.1145/359094.359101 Brélaz (DSatur) (1979)],Brélaz (DSatur),1979,https://dl.acm.org/doi/10.1145/359094.359101,,,,0.0,0,5,n: 5,$O(n^2)$,"n: number of nodes
m: number of edges",n,,,Word RAM,words,5,"n: 5,
m: 3",O(m+n),Derived using adjacency lists,1.0,0.0,,0,,0,,1,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,1000000.0,Inf,inf,,,inf,,,inf,1,,,Combinatorics
113,61.0,The Traveling-Salesman Problem,2.0,Minimum TSP,488.0,ILP formulation,,1,1,exp(V),,,[https://dl.acm.org/doi/10.1145/321043.321046 Miller-Tucker-Zemlin (MTZ) formulation  (1960)],Miller-Tucker-Zemlin (MTZ) formulation ,1960,https://dl.acm.org/doi/10.1145/321043.321046,,,,0.0,0,8,V: 8,$exp(V)$,"V: number of vertices
E: number of edges",V,Derived: Integer programming is NP-hard and this uses O(V^2) constraints on O(V^2) variables,1.0,Word RAM,words,7,V:7,O(V^4),"Derived: V^2 + 2V constraints on V^2 variables, most integer programs use space of O(nm) where n=#vars and m=#constraints",1.0,0.0,,0,,0,,1,0,,0,0,,,,,,1000000000000.0,inf,1e+24,inf,1e+36,inf,,,,,,,,,,1,,,Combinatorics
114,61.0,The Traveling-Salesman Problem,2.0,Minimum TSP,489.0,ILP formulation,,1,1,O(1.674^V E^2),,,[https://doi.org/10.1287/opre.2.4.393 Dantzig-Fulkerson-Johnson (DFJ) formulation (1954)],Dantzig-Fulkerson-Johnson (DFJ) formulation,1954,https://doi.org/10.1287/opre.2.4.393,,,,0.0,0,8,"V: 8,
E: 5",$O(1.674^V E^2)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,8,V: 8,O(2^V),http://web.ist.utl.pt/~ist11038/CD_Casquilho/TSP1992EJOR_Laporte.pdf,0.0,0.0,,0,,0,,1,0,,0,0,,,,,,inf,,inf,,inf,,,,,,,,,,,1,,,Combinatorics
115,7.0,Graph Coloring,2.0,3-Graph Coloring,96.0,,,1,1,O(nlogn),,,[https://www.sciencedirect.com/science/article/pii/0012365X89902148 Petford and Welsh (1989)],Petford and Welsh,1989,https://www.sciencedirect.com/science/article/pii/0012365X89902148,,,,1.0,1->5,4,n: 4,$O(n \log n)$,n: #vertices,n,,,Word RAM,words,3,n: 3,O(n),"Derived: we store the coloring of each vertex in a dictionary and the maximum size of this dictionary is equal to the number of vertices in the graph, n.",1.0,0.0,,1,Monte Carlo,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,9965.0,Inf,inf,,,inf,,,inf,1,,,Combinatorics
116,8.0,Graph Coloring,2.0,4-Graph Coloring,101.0,,,1,1,O(1.7272^n),,,[https://link.springer.com/chapter/10.1007/978-3-540-73545-8_9 Fomin; Gaspers & Saurabh (2007)],Fomin; Gaspers & Saurabh,2007,https://link.springer.com/chapter/10.1007/978-3-540-73545-8_9,1,0.0,https://www.researchgate.net/publication/221426668_Improved_Exact_Algorithms_for_Counting_3-_and_4-Colorings,1.0,0,8,n: 8,$O(1.7272^n)$,"n: #vertices
m: #edges",n,,,Word RAM,words,3,n: 3,O(n),"Derived: we store the sets I and C (in algorithm enumIS), and the maximum size of these sets is equal to the number of vertices in the graph. The algorithm also stores the solution sets S1 and S2, which have a maximum size equal to the number of vertices in the graph. We also call a 3-coloring algorithm, which likely has O(n) space complexity",1.0,0.0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
117,15.0,Closest Pair Problem,1.0,,172.0,Randomized Sieve,,1,1,O(n),,,[https://www.sciencedirect.com/science/article/pii/S0890540185710498 Khuller; Matias (1995)],Khuller; Matias,1995,https://www.sciencedirect.com/science/article/pii/S0890540185710498,,,,0.0,0,3,n: 3,$O(n)$,n: #points,n,,,not mentioned,not mentioned,3,n: 3,"O(n), not sure if this is auxiliary","https://www.sciencedirect.com/science/article/pii/S0890540185710498, Theorem 2.3",0.0,1.0,,1,Las Vegas,0,,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,1000.0,1000,0.4125375446,1000000,1000000,0.995262315,1000000000,1000000000,1.818382931,4,,,Image Processing
118,20.0,LU Decomposition,2.0,Square Matrix LU Decomposition,212.0,,,1,1,O(n^2.376),,,[https://dl.acm.org/citation.cfm?id=248979 Bunch; Hopcroft (1974)],Bunch; Hopcroft,1974,https://dl.acm.org/citation.cfm?id=248979,1,1.0,https://www.ams.org/journals/mcom/1974-28-125/S0025-5718-1974-0331751-8/,1.0,0,4.188,"n: 5.376,
n^2: 4.188",$O(n^{2.376})$,n: dimension of square matrix,n^2,,,Word RAM,words,4,"n: 5.01,
n^2: 4",$\tilde{O}(n^2)$,Derived: Uses Strassen multiplication and a constant number of $n \times n$ auxiliary matrices,1.0,0.0,,0,,0,,0,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,13427649.61,74.47319739,0.135164559,180301774085957,5546.25713,0.2885985759,2.42103E+21,413047.502,0.4627714341,3,,,Numerical Analysis
119,22.0,String Search,2.0,Single String Search,242.0,,,1,1,O(mn),,,[https://en.wikipedia.org/wiki/Bitap_algorithm Bitap algorithm (1964)],Bitap algorithm,1964,https://en.wikipedia.org/wiki/Bitap_algorithm,,,,0.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"m: pattern length
n: text length",m+n,,,Word RAM,words,3,"n: 1,
m: 3,
m+n: 3",$O(m)$,Derived: Uses a bit array of size $O(m)$,1.0,0.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,,,,,,,,,,4,,,Combinatorics
120,1.0,Sorting,2.0,Comparison Sorting,4.0,,,1,1,O(n logn),uniform distribution over all possible permutations,(derive from lower + upper bounds),[https://link.springer.com/chapter/10.1007/978-1-349-08147-9_4 Tree sort (1986)],Tree sort,1986,https://link.springer.com/chapter/10.1007/978-1-349-08147-9_4,,,,0.0,0,4,n: 4,$O(n \log n)$,n: size of list,n,,,Word RAM,words,3,n: 3,O(n),"Derived: Need some way to store the tree of elements, so we need $O(n)$ auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,9965.0,100.3512293,,,,,,,,4,,,Combinatorics
121,1.0,Sorting,2.0,Comparison Sorting,6.0,,,1,1,O(n logn),uniform distribution over all possible permutations,https://academic.oup.com/comjnl/article/5/1/10/395338?login=true,[https://apps.dtic.mil/dtic/tr/fulltext/u2/740110.pdf Quick Sort (1961)],Quick Sort,1961,https://apps.dtic.mil/dtic/tr/fulltext/u2/740110.pdf,,,,0.0,0,5,n: 5,$O(n^2)$,n: size of list,n,,,Word RAM,words,2,n: 2,O(\log n),https://academic.oup.com/comjnl/article/5/1/10/395338?login=true,0.0,0.0,,0,,0,,0,0,,0,0,https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000000.0,1,,,,,,,,4,,,Combinatorics
122,1.0,Sorting,2.0,Comparison Sorting,9.0,,,1,1,O(n*log n),uniform distribution over all possible permutations (implicit; reference says runtime is O(n+n*log(rho)) where rho is number of runs but expected value of rho is Theta(n),https://drops.dagstuhl.de/opus/volltexte/2018/9467/,[- Tim Sort (2002)],Tim Sort,2002,-,,,,0.0,0,4,n: 4,$O(n logn)$,n: size of list,n,,,Word RAM,words,3,n: 3,O(n),(can be easily derived),1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Timsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,9965.0,100.3512293,,,,,,,,4,,,Combinatorics
123,1.0,Sorting,1.0,Comparison Sorting,11.0,,,1,1,O( n² ),<= potentially open?,,[https://dl.acm.org/citation.cfm?doid=368370.368387 Shell Sort (Shell) (1959)],Shell Sort (Shell),1959,https://dl.acm.org/citation.cfm?doid=368370.368387,,,,0.0,0,5,n: 5,$O(n^2)$,n: size of list,n,,,Word RAM,words,1,n: 1,O(1),in-situ sorting,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Shellsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000000.0,1,,,,,,,,4,,,Combinatorics
124,1.0,Sorting,1.0,Comparison Sorting,12.0,,,1,1,O(n^1.5),<= I think this is an open problem to determine if there's a better average-case bound,,[https://dl.acm.org/citation.cfm?doid=366947.366957 Shell Sort (Frank & Lazarus) (1960)],Shell Sort (Frank & Lazarus),1960,https://dl.acm.org/citation.cfm?doid=366947.366957,,,,0.0,0,4.5,n: 4.5,$O(n^{1.5})$,n: size of list,n,,,Word RAM,words,1,n: 1,O(1),in-situ sorting,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Shellsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,31622.0,31.62355322,,,,,,,,4,,,Combinatorics
125,1.0,Sorting,1.0,Comparison Sorting,13.0,,,1,1,O(n log² n),<= I think this is an open problem to determine if there's a better average-case bound,,[https://apps.dtic.mil/sti/pdfs/AD0740110.pdf Shell Sort (Pratt) (1971)],Shell Sort (Pratt),1971,https://apps.dtic.mil/sti/pdfs/AD0740110.pdf,,,,0.0,0,4.01,n: 4.01,$O(n \log^2 n)$,n: size of list,n,,,Word RAM,words,1,n: 1,O(1),in-situ sorting,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Shellsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,99301.0,10.07039204,,,,,,,,4,,,Combinatorics
126,1.0,Sorting,1.0,Comparison Sorting,14.0,,,1,1,O(n^1.33),<= I think this is an open problem to determine if there's a better average-case bound,,[https://www.sciencedirect.com/science/article/pii/0196677486900015?via%3Dihub Shell Sort (Sedgewick) (1986)],Shell Sort (Sedgewick),1986,https://www.sciencedirect.com/science/article/pii/0196677486900015?via%3Dihub,,,,0.0,0,4.33,n: 4.33,$O(n^{1.33})$,n: size of list,n,,,Word RAM,words,1,n: 1,O(1),in-situ sorting,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Shellsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,9772.0,102.3331969,,,,,,,,4,,,Combinatorics
127,1.0,Sorting,2.0,Comparison Sorting,22.0,,,1,1,O(n loglogn),,,[https://www.sciencedirect.com/science/article/pii/S0196677402912113 Thorup's Sorting Algorithm (2002)],Thorup's Sorting Algorithm,2002,https://www.sciencedirect.com/science/article/pii/S0196677402912113,,,,0.0,0,4,n: 4,$O(n \log \log n)$,n: size of list,n,,,Word RAM,words,3,n: 3,O(n),https://www.sciencedirect.com/science/article/pii/S0196677402912113,0.0,1.0,,0,,0,,0,0,0,0,0,,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,3316.0,301.5681544,,,,,,,,4,,,Combinatorics
128,1.0,Sorting,2.0,Non-Comparison Sorting,1500.0,,,1,1,O( n² ),uniform distribution over all possible permutations?,can consider expected number of swaps per element,[- Naive sorting (1940)],Naive sorting,1940,-,1,1.0,,1.0,0,5,n: 5,$O(n^2)$,n: size of list,n,,,Word RAM,words,1,n: 1,O(1),in-situ sorting,1.0,0.0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000000.0,1,,1000000,1,,1000000000,1,,4,,,Combinatorics
129,1.0,Sorting,2.0,Non-Comparison Sorting,15.0,,,1,1,O(n),uniform distribution over all sets of key values,(can be easily derived),[http://www.neubert.net/FSOIntro.html Flash Sort (1998)],Flash Sort,1998,http://www.neubert.net/FSOIntro.html,,,,0.0,0,5,n: 5,$O(n^2)$,n: size of list,n,,,Word RAM,words,3,n: 3,O(n),"http://www.neubert.net/FSOIntro.html, ""array of size # of different keys""",0.0,1.0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000.0,1000,,,,,,,,4,,,Combinatorics
130,1.0,Sorting,1.0,Non-Comparison Sorting,18.0,,,1,1,O(n),uniform distribution over all sets of positive key values,(can be easily derived),[https://web.archive.org/web/20170809110409/https://www.cs.auckland.ac.nz/~jaru003/research/publications/journals/beadsort.pdf Bead Sort (2002)],Bead Sort,2002,https://web.archive.org/web/20170809110409/https://www.cs.auckland.ac.nz/~jaru003/research/publications/journals/beadsort.pdf,,,,0.0,0,3,n: 3,$O(n)$,n: size of list,n,,,Word RAM,words,5,n: 5,O(n^2),(wikipedia page?),0.0,0.0,,0,,0,,0,0,,0,0,,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000.0,1000,,,,,,,,4,,,Combinatorics
131,1.0,Sorting,1.0,Non-Comparison Sorting,20.0,,,1,1,O(wn),Any distribution (runtime is same regardless of input)?,(same behavior across all inputs),[https://dl.acm.org/citation.cfm?doid=1005813.1041517 Burst Sort (2004)],Burst Sort,2004,https://dl.acm.org/citation.cfm?doid=1005813.1041517,,,,0.0,0,4,"n: 4,
w: 3",$O(wn)$,"n: size of list
w: length of word",n,,,Word RAM,words,4,"n: 4,
w: 3",O(wn),(wikipedia page?),0.0,0.0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000.0,1000,,,,,,,,4,,,Combinatorics
132,1.0,Sorting,1.0,Non-Comparison Sorting,23.0,,,1,1,O(n),"Lots of distributions (uniform, Gaussian, etc.)",https://www.semanticscholar.org/paper/The-Spreadsort-High-performance-General-case-Ross/41f5b49e9843b2d98b6b22a84924dae5761e6e52,[https://www.semanticscholar.org/paper/The-Spreadsort-High-performance-General-case-Ross/41f5b49e9843b2d98b6b22a84924dae5761e6e52 Spreadsort (2002)],Spreadsort,2002,https://www.semanticscholar.org/paper/The-Spreadsort-High-performance-General-case-Ross/41f5b49e9843b2d98b6b22a84924dae5761e6e52,,,,0.0,0,4,n: 4,$O(n \log n)$,n: size of list,n,,,Word RAM,words,3,n: 3,O(n)?,(can be easily derived?),1.0,0.0,,0,,0,,0,0,0,0,0,"https://en.wikipedia.org/wiki/Spreadsort#cite_note-1

https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf",A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000.0,1000,,,,,,,,4,,,Combinatorics
133,2.0,kth Order Statistic,1.0,kth Order Statistic,28.0,,,1,1,O(n),input values are uniformly distributed over a given range? wikipedia claims expected O(sqrt(n)),,[- Hashing (1940)],Hashing,1940,-,2,1.0,https://en.wikipedia.org/wiki/Selection_algorithm,1.0,5->6,3,n: 3,$O(n)$,n: size of list,n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: size of hashtable,1.0,0.0,,0,,0,,0,0,,0,0,,the kth order statistic of a statistical sample is equal to its kth-smallest value.,1.0,n is the size of the array,,,,,,,,1000.0,9.965,8.965,1000000,19.931568,18.931568,1000000000,29.89735285,28.89735285,5,,,Combinatorics
134,3.0,Matrix Chain Multiplication,2.0,Matrix Chain Ordering Problem,31.0,,,1,1,O(nlogn),Any distribution (runtime is same regardless of input),(same behavior across inputs),[https://doi.org/10.1137/0211028 T. C. Hu ; M. T. Shing (1982)],T. C. Hu ; M. T. Shing,1982,https://doi.org/10.1137/0211028,3,1.0,http://www.cs.ust.hk/mjg_lib/bibs/DPSu/DPSu.Files/0213017.pdf,1.0,3->5,4,n: 4,$O(n \log n)$,n: number of matrices,n,,,Word RAM,words,3,n: 3,O(n),can be derived?,1.0,0.0,,0,,0,,0,0,,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,9965.0,Inf,inf,19931568,Inf,inf,29897352854,Inf,inf,1,,,Combinatorics
135,4.0,Longest Common Subsequence,2.0,LCS,39.0,,,1,1,O((n^2/k) \log n),Average case value of $p$ is $n^2/k$ where $k = |\Sigma|$,https://dl.acm.org/doi/10.1145/74697.74702,[http://www.cs.ust.hk/mjg_lib/bibs/DPSu/DPSu.Files/HuSz77.pdf Hunt and Szymanski (1977)],Hunt and Szymanski,1977,http://www.cs.ust.hk/mjg_lib/bibs/DPSu/DPSu.Files/HuSz77.pdf,,,,1.0,-,3,"n: 4,
p: 3,
m+n: 3",$O((n + p) \log n)$,"$n$: length of the longer input string
$m$: length of the shorter input string
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$k$: $|\Sigma|$",m+n,,,Word RAM,words,3,"n: 3,
p: 3,
m+n: 3",$O(p + n)$,https://cse.hkust.edu.hk/mjg_lib/bibs/DPSu/DPSu.Files/HuSz77.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,1000.0,9.0,1000000.0,99.0,1000000000.0,999.0,9965.784285,25.08583297,1.927360278,19931568.57,12542.91649,22.23447392,29897352854,8361944.324,201.9718253,4,,,Combinatorics
136,4.0,Longest Common Subsequence,2.0,LCS,40.0,,,1,1,"1. O(m + n)

2. O((m+ n)\log(m+ n))","1. Finite alphabet

2. Infinite alphabet",https://www.sciencedirect.com/science/article/pii/0020025580900250,[https://www.sciencedirect.com/science/article/pii/0020025580900250 Mukhopadhyay (1980)],Mukhopadhyay,1980,https://www.sciencedirect.com/science/article/pii/0020025580900250,,,,0.0,-,3,"n: 4,
p: 3,
m+n: 3",$O((n + p) \log n)$,"$n$: length of the longer input string
$m$: length of the shorter input string
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$k$: $|\Sigma|$",m+n,,,Word RAM,words,3,"n: 3,
p: 3,
m+n: 3",$O(p + n)$,https://www.sciencedirect.com/science/article/pii/0020025580900250,0.0,1.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics
137,5.0,Maximum Flow,1.0,,53.0,,,1,1,O(V^2EU),<= possibly open if there's a better bound? i.e. for Erdos-Renyi with uniform edge weights,,[ Dantzig (1951)],Dantzig,1951,,,,,1.0,0,7,"V: 7,
E: 3,
U: 3",$O(V^2EU)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,6,"V: 6,
E: 3",O(VE)?,"Assuming this is referring to translating maximum flow into linear programming and using the simplex algorithm, this requires $O(VE)$ space.",1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",1666666.667,,1666666666667.0,,1.66667e+18,,7877875424.0,1,,7.87788E+21,1,,7.87788E+33,1,,2,,,Combinatorics
138,5.0,Maximum Flow,2.0,,57.0,,,1,1,O(VELogU),^ see above,,[https://www.scirp.org/(S(lz5mqp453edsnp55rrgjct55))/reference/ReferencesPapers.aspx?ReferenceID=1690549 Dinitz (with dynamic trees) (1973)],Dinitz (with dynamic trees),1973,https://www.scirp.org/(S(lz5mqp453edsnp55rrgjct55))/reference/ReferencesPapers.aspx?ReferenceID=1690549,,,,0.0,0,6,"V: 6,
E: 3,
U: 2",$O(VE \log U)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E),"The dynamic tree should take $O(E)$ extra space, and that should be the only extra space (if any) compared to Dinitz's original algorithm. Thus, this requires $O(E)$ space.",1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,762183.964,10335.92387,0.5221954617,1646721030716,4783976929,1.754167902,2.53126E+18,3.11224E+15,4.060932865,2,,,Combinatorics
139,5.0,Maximum Flow,2.0,,59.0,,,1,1,O(V^2E^0.5),^ see above,,[https://www.sciencedirect.com/science/article/abs/pii/S037722179600269X Cherkassky (1977)],Cherkassky,1977,https://www.sciencedirect.com/science/article/abs/pii/S037722179600269X,,,,0.0,0,6,"V: 6,
E: 2.5",$O(V^2E^{0.5})$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E),https://core.ac.uk/download/pdf/81946904.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,1044405.0,7542.931549,,,,,,,,2,,,Combinatorics
140,5.0,Maximum Flow,1.0,,61.0,,,1,1,O(VELogV),^ see above,,[https://www.sciencedirect.com/science/article/pii/0022000083900065 Sleator & Tarjan (1983)],Sleator & Tarjan,1983,https://www.sciencedirect.com/science/article/pii/0022000083900065,,,,0.0,0,6.01,"V: 6.01,
E: 3",$O(VE \log V)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E),can be derived?,1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,761538.0,10344.69117,,,,,,,,2,,,Combinatorics
141,5.0,Maximum Flow,1.0,,62.0,,,1,1,O(VELog(V^2/E)),^ see above,,[https://www.cs.princeton.edu/courses/archive/fall03/cs528/handouts/a%20new%20approach.pdf Goldberg & Tarjan (1986)],Goldberg & Tarjan,1986,https://www.cs.princeton.edu/courses/archive/fall03/cs528/handouts/a%20new%20approach.pdf,,,,0.0,0,6,"V: 6,
E: 3",$O(VE \log (V^2/E))$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E),can be derived? also hints of space complexity might be in the paper,1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,753550.0,10454.34998,,,,,,,,2,,,Combinatorics
142,5.0,Maximum Flow,1.0,,63.0,,,1,1,O(VE + V^2LogU),^ see above,,[https://www.researchgate.net/publication/38008130_A_Fast_and_Simple_Algorithm_for_the_Maximum_Flow_Problem Ahuja & Orlin (1987)],Ahuja & Orlin,1987,https://www.researchgate.net/publication/38008130_A_Fast_and_Simple_Algorithm_for_the_Maximum_Flow_Problem,,,,0.0,0,6,"V: 6,
E: 3,
U: 2",$O(VE + V^2 \log U)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"V: 5,
E: 3,
U: 2",O(ELogU),derived in sheet,1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,545676.0,14436.91023,,,,,,,,2,,,Combinatorics
143,5.0,Maximum Flow,2.0,st-Maximum Flow,65.0,Push-relabel method,,1,1,O(VE + V^2(LogV)^2),[some distribution in this paper],https://ieeexplore.ieee.org/document/63465,[https://ieeexplore.ieee.org/document/63465 Cheriyan & Hagerup (1989)],Cheriyan & Hagerup,1989,https://ieeexplore.ieee.org/document/63465,,,,0.0,0,6.01,"V: 6.01,
E: 3",$O(VE \log V)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://ieeexplore.ieee.org/document/63465,0.0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: d_heap and e_heap are size O(V). Adjacency list of a given vertex is O(V). Dynamic trees data structure is size O(E).,1.0,0.0,,1,Las Vegas,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,3362046.0,2343.178952,,,,,,,,2,,,Combinatorics
144,5.0,Maximum Flow,2.0,st-Maximum Flow,66.0,Derandomization of Cheriyan & Hagerup,,1,1,O(V^3 / LogV),see 233,,[https://link.springer.com/chapter/10.1007/BFb0032035 Cheriyan et al. (1990)],Cheriyan et al.,1990,https://link.springer.com/chapter/10.1007/BFb0032035,,,,0.0,0,5.99,V: 5.99,$O(V^3 / \log V)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://link.springer.com/chapter/10.1007/BFb0032035,0.0,Uniform-Cost RAM (is this the same as Word RAM?),words,5,"V: 5,
E: 3",O(V + E),Derived: essentially the same as [CH89] above but derandomized,1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,1567523.0,5025.684104,,,,,,,,2,,,Combinatorics
145,5.0,Maximum Flow,2.0,st-Maximum Flow,67.0,Derandomization of Cheriyan & Hagerup,,1,1,O(VE + V^{(2.66)}LogV),^ see 233,,[https://www.sciencedirect.com/science/article/pii/002001909090024R Alon (1990)],Alon,1990,https://www.sciencedirect.com/science/article/pii/002001909090024R,,,,0.0,0,6,"V: 6,
E: 3",$O(VE + V^{2.66} \log V)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://www.sciencedirect.com/science/article/pii/002001909090024R,0.0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: essentially the same as [CH89] above but derandomized,1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,15237244.0,517.0144564,0.1737537478,3.28759E+15,2396247.828,0.4573965487,4.8957E+23,16091415411,0.8268695823,2,,,Combinatorics
146,5.0,Maximum Flow,2.0,st-Maximum Flow,68.0,Derandomization of Cheriyan & Hagerup,,1,1,O(VE + V^{(2+\epsilon)}),^ see 233,,[https://dl.acm.org/citation.cfm?id=139438 King et al. (KRT) (1992)],King et al. (KRT),1992,https://dl.acm.org/citation.cfm?id=139438,,,,0.0,0,6,"V: 6,
E: 3",$O(VE + V^{2+\epsilon})$,"V: number of vertices
E: number of edges
U: maximum edge capacity
eps: any positive real number",V,https://dl.acm.org/citation.cfm?id=139438,0.0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: essentially the same as [CH89] above but derandomized,1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,142011.0,55473.69869,,,,,,,,2,,,Combinatorics
147,5.0,Maximum Flow,2.0,st-Maximum Flow,69.0,Derandomization of Cheriyan & Hagerup,,1,1,O(VE(Log(V;V/E)) + V^2(LogV)^2 ),^ see 233,,[https://dl.acm.org/citation.cfm?id=167201 Phillips & Westbrook (1993)],Phillips & Westbrook,1993,https://dl.acm.org/citation.cfm?id=167201,,,,1.0,0,6,"V: 6,
E: 3",$O(VE(\log(V;V/E)) + V^2(\log V)^2 )$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://dl.acm.org/citation.cfm?id=167201,0.0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: essentially the same as [CH89] above but derandomized,1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,4524418.767,0.0002210228653,,26027057526546,0,,6.51599E+19,0,,2,,,Combinatorics
148,5.0,Maximum Flow,2.0,Integer Maximum Flow,71.0,Finding blocking flows,,1,1,O(E^{1.5} Log(V^2/E) LogU),^ see 233,,[https://dl.acm.org/citation.cfm?id=290181 Goldberg & Rao (1997)],Goldberg & Rao,1997,https://dl.acm.org/citation.cfm?id=290181,,,,1.0,3->4,6,"V: 6,
E: 4.5,
U: 2",$O(E^{1.5} \log(V^2/E) \log U)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://dl.acm.org/citation.cfm?id=290181,0.0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: creates and updates an auxiliary graph,1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,460753.7601,16.40695149,,75582472025,0,,5.81778E+15,0,,2,,,Combinatorics
149,5.0,Maximum Flow,2.0,Integer Maximum Flow,72.0,Finding blocking flows,,1,1,O(V^{0.66}E Log(V^2/E) LogU),^ see 233,,[https://dl.acm.org/citation.cfm?id=290181 Goldberg & Rao (1997)],Goldberg & Rao,1997,https://dl.acm.org/citation.cfm?id=290181,,,,0.0,0,5.66,"V: 5.66,
E: 3,
U: 2",$O(V^{0.66}E \log(V^2/E) \log U)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://dl.acm.org/citation.cfm?id=290181,0.0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: creates and updates an auxiliary graph,1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,851225.0,9254.751005,,,,,,,,2,,,Combinatorics
150,5.0,Maximum Flow,2.0,st-Maximum Flow,73.0,Improvement of the KRT algorithm,,1,1,O(VE),^ see 233,,[https://dl.acm.org/citation.cfm?id=2488705 James B Orlin's + KRT (King; Rao; Tarjan)'s algorithm (2013)],James B Orlin's + KRT (King; Rao; Tarjan)'s algorithm,2013,https://dl.acm.org/citation.cfm?id=2488705,,,,1.0,0,6,"V: 6,
E: 3",$O(VE)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://dl.acm.org/citation.cfm?id=2488705,0.0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: creates and updates an auxiliary graph,1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,88757.0,88757.7929,0.2017379668,88757396440,88757396408,0.5017026406,8.87574E+16,8.87574E+16,0.8765413472,2,,,Combinatorics
151,7.0,Graph Coloring,1.0,3-Graph Coloring,86.0,,,1,1,O(m*n*3^{(n/3)}) ~ O(mn(1.445)^n),,,[https://www.sciencedirect.com/science/article/pii/002001907690065X?via%3Dihub Lawler (1976)],Lawler,1976,https://www.sciencedirect.com/science/article/pii/002001907690065X?via%3Dihub,,,,1.0,0,8,"n: 8,
m: 3",$O(m*n*3^{(n/3)}) ~ O(mn(1.445)^n)$,"n: number of vertices
m: number of edges",n,,,Word RAM,words,3,"n: 3,
m: 1",O(n),(can be easily derived; see section 6 of ref),1.0,0.0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
152,7.0,Graph Coloring,1.0,3-Graph Coloring,87.0,,,1,1,O(1.415^n),,,[https://link.springer.com/chapter/10.1007/3-540-57899-4_51 Schiermeyer (1994)],Schiermeyer,1994,https://link.springer.com/chapter/10.1007/3-540-57899-4_51,,,,0.0,0,8,n: 8,$O(1.415^n)$,"n: number of vertices
m: number of edges",n,,,Word RAM,words,6,"n: 6,
m: 3","O(nm+n^2) loose bound, possibly O(n+m)?",(can be derived from steps of algorithm),1.0,0.0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,inf,1,,,,,,,,1,,,Combinatorics
153,7.0,Graph Coloring,1.0,3-Graph Coloring,88.0,,,1,1,O(1.3446^n),(unclear if there is a notable distribution where average runtime is faster),(none),[https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=492575 Beigel & Eppstein (1995)],Beigel & Eppstein,1995,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=492575,,,,0.0,0,8,n: 8,$O(1.3446^n)$,"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2)?,"can be derived from steps of algorithm? you add at most O(n^2) constraints, other info shouldn't take more than O(n^2) space, and you can reuse space during recursive steps",1.0,0.0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,inf,1,,,,,,,,1,,,Combinatorics
154,7.0,Graph Coloring,1.0,3-Graph Coloring,89.0,,,1,1,O(1.3289^n),^see above,(none),[https://www.sciencedirect.com/science/article/pii/S0196677404001117?via%3Dihub Beigel & Eppstein (2000)],Beigel & Eppstein,2000,https://www.sciencedirect.com/science/article/pii/S0196677404001117?via%3Dihub,,,,0.0,0,8,n: 8,$O(1.3289^n)$,"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2)?,can be derived from steps of algorithm? similar to above,1.0,0.0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,inf,1,,,,,,,,1,,,Combinatorics
155,8.0,Graph Coloring,1.0,4-Graph Coloring,99.0,,,1,1,O((m + n)*2^n),,,[https://www.sciencedirect.com/science/article/pii/002001907690065X?via%3Dihub Lawler (1976)],Lawler,1976,https://www.sciencedirect.com/science/article/pii/002001907690065X?via%3Dihub,,,,1.0,0,8,"n: 8,
m: 3",$O((m + n)*2^n)$,"n: number of vertices
m: number of edges",n,,,Word RAM,words,3,"n: 3,
m: 1",O(n),(can be easily derived; see section 6 of ref),1.0,0.0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
156,8.0,Graph Coloring,1.0,4-Graph Coloring,100.0,,,1,1,O(1.7504^n),,,[https://www.sciencedirect.com/science/article/abs/pii/S0167637704000409?via%3Dihub Byskov (2004)],Byskov,2004,https://www.sciencedirect.com/science/article/abs/pii/S0167637704000409?via%3Dihub,,,,0.0,0,8,n: 8,$O(1.7504^n)$,"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2)?,can be derived from algo 89 plus the paper's algo for finding MIS's?,1.0,0.0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,inf,1,,,,,,,,1,,,Combinatorics
157,10.0,Linear Programming,1.0,,112.0,,,1,1,O(n^3.5 L^2 logL loglogL),,,[https://web.archive.org/web/20131228145520/http://retis.sssup.it/~bini/teaching/optim2010/karmarkar.pdf Karmarkar's algorithm (1984)],Karmarkar's algorithm,1984,https://web.archive.org/web/20131228145520/http://retis.sssup.it/~bini/teaching/optim2010/karmarkar.pdf,,,,1.0,0,6.5,"n: 6.5,
L: 5.02",$O(n^{3.5} L^2 logL loglogL)$,"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 3,
L: 3",O(nmL),can be derived from paper?,1.0,0.0,,0,,0,,0,0,,0,0,,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",,,,,,,389062121651.0,Inf,,1.23032E+22,Inf,,3.89062E+32,Inf,,1,,,Numerical Analysis
158,10.0,Linear Programming,1.0,,113.0,,,1,1,"O(2^n*poly(n, m))? (previously O(2^n))",,,[- Simplex Algorithm (1947)],Simplex Algorithm,1947,-,,,,0.0,0,8,"n: 8,
m: 7","$O(2^n*poly(n, m))$","n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 3",O(nm),can be easily derived?,1.0,0.0,,0,,0,,0,0,,0,0,http://www-leland.stanford.edu/group/SOL/reports/OR-80-27.pdf,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",333333.3333,inf,333333333333.0,inf,3.33333e+17,inf,inf,1,,,,,,,,1,,,Numerical Analysis
159,10.0,Linear Programming,1.0,,114.0,,,1,1,"O(2^n*poly(n, m))? (previously O(2^n))",,,[- Terlaky's Criss-cross algorithm (1985)],Terlaky's Criss-cross algorithm,1985,-,,,,0.0,0,8,"n: 8,
m: 7","$O(2^n*poly(n, m))$","n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 3",O(nm),can be easily derived?,1.0,0.0,,0,,0,,0,0,,0,0,https://link.springer.com/content/pdf/10.1007/BF01585729.pdf,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",,,,,,,inf,1,,,,,,,,1,,,Numerical Analysis
160,10.0,Linear Programming,1.0,,115.0,,,1,1,? (originally O(n^{3.5} L) but seems unclear),,,[- Affine scaling (1967)],Affine scaling,1967,-,,,,0.0,0,6.5,"n: 6.5,
L: 3",? (originally $O(n^{3.5} L)$ but seems unclear),"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 5",O(nm+m^2)?,can be easily derived?,1.0,0.0,,0,,0,,0,0,,0,0,https://pdfs.semanticscholar.org/c23c/43d781da35b8314489d83ee8f3b5490541ea.pdf,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",,,,,,,316227766017.0,Inf,inf,,,inf,,,inf,1,,,Numerical Analysis
161,10.0,Linear Programming,1.0,,116.0,,,1,1,"$O(n^{(max(omega, 2.5-alpha/2, 13/6))}*polylog(n, m, L))$, where omega is the exponent on matrix multiplication, alpha is the dual exponent of matrix multiplication;
currently $O(n^{2.37285956})$",,,[https://arxiv.org/abs/1810.07896 Cohen; Lee and Song (2018)],Cohen; Lee and Song,2018,https://arxiv.org/abs/1810.07896,1,1.0,https://arxiv.org/abs/1810.07896,1.0,2->3,6,n: 6,"$O(n^{max(omega, 2.5-alpha/2, 13/6)}*polylog(n, m, L))$, where omega is the exponent on matrix multiplication, alpha is the dual exponent of matrix multiplication;
currently $O(n^2.37285956)$","n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,5,"n: 5,
m: 3",O(nm+n^2)?,"Not entirely sure about this, but it seems like each iteration manipulates a constant number of $O(m+n)\times O(n)$ matrices, along with a constant number of vectors of size $O(m+n)$, all of whose elements are of size $O(1)$ words.",1.0,0.0,,0,,0,,0,0,,0,0,,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",,,,,,,12971792.0,Inf,,168267406107047,Inf,,2.18273E+21,Inf,,1,,,Numerical Analysis
162,10.0,Linear Programming,1.0,,117.0,,,1,1,O((nnz(A) + n^2) n^{0.5}),,,[https://arxiv.org/abs/1503.01752 Lee and Sidford (2015)],Lee and Sidford,2015,https://arxiv.org/abs/1503.01752,,,,0.0,0,5.5,n: 5.5,$O((nnz(A) + n^2) n^{0.5})$,"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,5,"n: 5,
m: 3",O(nm+n^2)??,Same reasoning as ^,1.0,0.0,,0,,0,,0,0,,0,0,,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",,,,,,,31654399.0,Inf,inf,,,inf,,,inf,1,,,Numerical Analysis
163,11.0,Line segment intersection,1.0,"Reporting all intersection points, line segments",120.0,,,1,1,O( nlog n + k ),,,[https://dl.acm.org/doi/10.1145/147508.147511 Chazelle & Edelsbrunner (1992)],Chazelle & Edelsbrunner,1992,https://dl.acm.org/doi/10.1145/147508.147511,,,,0.0,0,4,"n: 4,
k: 3",$O( n \log n + k )$,"n: number of line segments
k: number of points of intersection",n,,,Real RAM,words,3,"n: 3,
k: 3",O(n+k) total?,https://dl.acm.org/doi/10.1145/147508.147511,0.0,1.0,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,9996.0,100.040016,,,,,,,,4,,,Image Processing
164,11.0,Line segment intersection,1.0,"Reporting all intersection points, line segments",121.0,,,1,1,O( n*log^2(n)/(log log n) + k),,,[https://www.sciencedirect.com/science/article/pii/0022000086900255 CHAZELLE (1986)],CHAZELLE,1986,https://www.sciencedirect.com/science/article/pii/0022000086900255,,,,0.0,0,4,"n: 4,
k: 3",$O( n*log^2(n)/(log log n) + k)$,"n: number of line segments
k: number of points of intersection",n,,,Real RAM,words,3,"n: 3,
k: 3",O(n+k) total (and possibly auxiliary as well?),https://www.sciencedirect.com/science/article/pii/0022000086900255,0.0,1.0,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,3336.9,299.6793431,,,,,,,,4,,,Image Processing
165,11.0,Line segment intersection,1.0,"Reporting all intersection points, convex polygons",122.0,,,1,1,O( nlog n + k ),,,[https://pdfs.semanticscholar.org/a571/cc92218132a1b0e65c2adbf663c79d015737.pdf NIEVERGELT. J.. AND PREPARATA (Section 3) (1982)],NIEVERGELT. J.. AND PREPARATA (Section 3),1982,https://pdfs.semanticscholar.org/a571/cc92218132a1b0e65c2adbf663c79d015737.pdf,3,1.0,https://dl.acm.org/doi/pdf/10.1145/358656.358681,1.0,0,4,"n: 4,
k: 3",$O( n \log n + k )$,"n: number of line segments
k: number of points of intersection",n,,,Real RAM,words,3,"n: 3,
k: 1",O(n),https://courses.cs.duke.edu/cps234/spring04/papers/NP82.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,9996.0,100.040016,,19932568,8441832.789,,29897384477,73007386768,,4,,,Image Processing
166,11.0,Line segment intersection,1.0,"Reporting all intersection points, generalized segments",123.0,,,1,1,O( n log n + k log n),,,"[https://epubs.siam.org/doi/abs/10.1137/S0097539797329373 Jean-Daniel Boissonnat and Franco P.
Preparata.  (1997)]","Jean-Daniel Boissonnat and Franco P.
Preparata. ",1997,https://epubs.siam.org/doi/abs/10.1137/S0097539797329373,,,,0.0,0,4,"n: 4,
k: 3",$O(n \log n + k \log n)$,"n: number of line segments
k: number of points of intersection",n,,,"Real RAM, under more restrictions/considerations? (predicate arithmetic, exact arithmetic)",words,3,"n: 3,
k: 1",O(n),https://epubs.siam.org/doi/epdf/10.1137/S0097539797329373,0.0,1.0,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,10280.0,97.27626459,,,,,,,,4,,,Image Processing
167,11.0,Line segment intersection,1.0,"Reporting all intersection points, generalized segments",124.0,,,1,1,O( nlog n + k ),,,[https://dl.acm.org/doi/pdf/10.1145/220279.220302 Balaban. (1995)],Balaban.,1995,https://dl.acm.org/doi/pdf/10.1145/220279.220302,,,,0.0,0,4,"n: 4,
k: 3",$O(n \log n + k )$,"n: number of line segments
k: number of points of intersection",n,,,Real RAM,words,3,"n: 3,
k: 1",O(n),https://dl.acm.org/doi/pdf/10.1145/220279.220302,0.0,1.0,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,9996.0,100.040016,,,,,,,,4,,,Image Processing
168,11.0,Line segment intersection,1.0,"Reporting all intersection points, generalized segments",125.0,,,1,1,O( nlog n + k ),,,[https://dl.acm.org/citation.cfm?id=304991 Boissonnat; Snoeyink (1999)],Boissonnat; Snoeyink,1999,https://dl.acm.org/citation.cfm?id=304991,,,,0.0,0,4,"n: 4,
k: 3",$O(n \log n + k )$,"n: number of line segments
k: number of points of intersection",n,,,"Real RAM, under more restrictions/considerations? (predicate arithmetic)",words,3,"n: 3,
k: 1",O(n),https://dl.acm.org/citation.cfm?id=304991,0.0,1.0,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,9996.0,100.040016,,,,,,,,4,,,Image Processing
169,12.0,Convex Hull,1.0,2-dimensional,129.0,,,1,1,O(nlogn),Any distribution (runtime is same regardless of input),https://link.springer.com/chapter/10.1007/978-1-4612-1098-6_3,[https://www.sciencedirect.com/science/article/pii/0020019072900452?via%3Dihub Graham (1972)],Graham,1972,https://www.sciencedirect.com/science/article/pii/0020019072900452?via%3Dihub,,,,1.0,3->5,4,n: 4,$O(n \log n)$,"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,O(n),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9965.0,100351.2293,0.3651371615,19931568.57,50171665944,0.9462632475,29897352854,3.34478E+16,1.796433658,3,,,Image Processing
170,12.0,Convex Hull,1.0,2-dimensional,130.0,,,1,1,O(nh),(pseudorandom sampling; experimental),https://dl.acm.org/citation.cfm?id=355766,[https://dl.acm.org/citation.cfm?id=355766 W. Eddy Quickhull (1977)],W. Eddy Quickhull,1977,https://dl.acm.org/citation.cfm?id=355766,,,,0.0,0,5,"n: 5,
h: 3",$O(nh)$,"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,"n: 3,
h: 3",O(h)?,can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9965.0,100351.2293,,,,,,,,3,,,Image Processing
171,12.0,Convex Hull,1.0,2-dimensional,132.0,,,1,1,O(nlogn),,,[https://www.sciencedirect.com/science/article/pii/0020019079900723 Andrew's algorithm (1979)],Andrew's algorithm,1979,https://www.sciencedirect.com/science/article/pii/0020019079900723,,,,0.0,0,4,n: 4,$O(nlogn)$,"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,O(n),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9965.0,100351.2293,,,,,,,,3,,,Image Processing
172,12.0,Convex Hull,1.0,2-dimensional,134.0,,,1,1,O(n log h),,,[https://ecommons.cornell.edu/handle/1813/6417 The ultimate planar convex hull algorithm (1986)],The ultimate planar convex hull algorithm,1986,https://ecommons.cornell.edu/handle/1813/6417,2,1.0,https://www.cs.princeton.edu/~chazelle/temp/451/451-2019/KirkSeidel.pdf,1.0,0,4,"n: 4,
h: 2",$O(n log h)$,"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,O(n),https://ecommons.cornell.edu/handle/1813/6417,0.0,1.0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,4982.892142,2.006063891,,9965784.285,0,,14948676427,0,,3,,,Image Processing
173,13.0,Strongly Connected Components,1.0,SCCs,137.0,,,1,1,O(V+E),,,[https://www.sciencedirect.com/science/article/pii/0898122181900080 Kosaraju's algorithm (1978)],Kosaraju's algorithm,1978,https://www.sciencedirect.com/science/article/pii/0898122181900080,,,,0.0,0,5,"V: 5,
E: 3",$O(V+E)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"V: 5,
E: 3",O(V+E),auxiliary data structures take up at most that much space,1.0,0.0,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000.0,1,,,,,,,,4,,https://www.sciencedirect.com/science/article/pii/B9780123743640500114,Combinatorics
174,13.0,Strongly Connected Components,1.0,SCCs,138.0,,,1,1,O(V+E),,,[https://www.semanticscholar.org/paper/Depth-First-Search-and-Linear-Graph-Algorithms-Tarjan/385742fffcf113656f0d3cf6c06ef95cb8439dc6 Tarjan's strongly connected components algorithm (1972)],Tarjan's strongly connected components algorithm,1972,https://www.semanticscholar.org/paper/Depth-First-Search-and-Linear-Graph-Algorithms-Tarjan/385742fffcf113656f0d3cf6c06ef95cb8439dc6,2,1.0,https://www.geeksforgeeks.org/tarjan-algorithm-find-strongly-connected-components/,1.0,5->6,5,"V: 5,
E: 3",$O(V+E)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V),https://www.sciencedirect.com/science/article/pii/S0020019015001532,0.0,0.0,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000.0,183.673,,1000000,183673.4694,,1000000000,183673469.4,,4,,,Combinatorics
175,13.0,Strongly Connected Components,1.0,SCCs,139.0,,,1,1,O(V+E),,,[https://www.worldcat.org/title/discipline-of-programming/oclc/1958445 Path-based strong components algorithm; Dijkstra (1976)],Path-based strong components algorithm; Dijkstra,1976,https://www.worldcat.org/title/discipline-of-programming/oclc/1958445,,,,0.0,0,5,"V: 5,
E: 3",$O(V+E)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V),constant number of auxiliary stacks?,1.0,0.0,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000.0,1,,,,,,,,4,,,Combinatorics
176,13.0,Strongly Connected Components,1.0,SCCs,141.0,,,1,1,O(V+E),,,[https://www.sciencedirect.com/science/article/pii/S0020019015001532 Pearce (2016)],Pearce,2016,https://www.sciencedirect.com/science/article/pii/S0020019015001532,,,,0.0,0,5,"V: 5,
E: 3",$O(V+E)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V),https://www.sciencedirect.com/science/article/pii/S0020019015001532,0.0,1.0,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000.0,1,,,,,,,,4,,,Combinatorics
177,13.0,Strongly Connected Components,1.0,SCCs,142.0,,,1,1,O(V+E),,,[https://www.sciencedirect.com/science/article/pii/S002001900000051X?via%3Dihub Path-based depth-first search Gabow (2000)],Path-based depth-first search Gabow,2000,https://www.sciencedirect.com/science/article/pii/S002001900000051X?via%3Dihub,,,,0.0,0,5,"V: 5,
E: 3",$O(V+E)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1","O(V+E) total, O(V) auxiliary?",https://www.sciencedirect.com/science/article/pii/S002001900000051X?via%3Dihub,0.0,1.0,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000.0,1,,,,,,,,4,,,Combinatorics
178,13.0,Strongly Connected Components,1.0,Transitive Closure,143.0,,,1,1,O(V^2),"Each edge is selected with probability p, 0<p<1",https://link.springer.com/content/pdf/10.1007/BF01940892.pdf,[https://link.springer.com/article/10.1007%2FBF01940892 Paul Purdom (1970)],Paul Purdom,1970,https://link.springer.com/article/10.1007%2FBF01940892,4,1.0,https://link.springer.com/content/pdf/10.1007/BF01940892.pdf,1.0,0,6,"V: 6,
E: 3",$O(V^2+VE)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"V: 5,
E: 1",O(V^2),https://link.springer.com/content/pdf/10.1007/BF01940892.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",1000000.0,,1000000000000.0,,1e+18,,183673.0,0.005444458358,,183673469388,1,,1.83673E+17,1,,4,,,Combinatorics
179,13.0,Strongly Connected Components,1.0,SCCs,146.0,,,1,1,O(V+E),,,[https://link.springer.com/chapter/10.1007/3-540-48119-2_16 Couvreur (1999)],Couvreur,1999,https://link.springer.com/chapter/10.1007/3-540-48119-2_16,,,,0.0,0,5,"V: 5,
E: 3",$O(V+E)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V)?,can be easily derived?,1.0,0.0,,0,,0,,0,0,,0,0,http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000.0,1,,,,,,,,4,,,Combinatorics
180,13.0,Strongly Connected Components,1.0,SCCs,147.0,,,1,1,O(E + VlogV),,,[https://www.sciencedirect.com/science/article/pii/0020019071900068 Munro’s algorithm (1971)],Munro’s algorithm,1971,https://www.sciencedirect.com/science/article/pii/0020019071900068,,,,1.0,4->5,5,"V: 5,
E: 3",$O(E + V \log V)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V)?,can be easily derived?,1.0,0.0,,0,,0,,0,0,,0,0,http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",1000.0,999.0,1000000.0,999999.0,1000000000.0,999999999.0,4318.596513,42.53071558,41.53071558,8589646.921,21383.12216,21382.12216,12860697328,14281765.96,14281764.96,4,,,Combinatorics
181,14.0,Minimum Spanning Tree (MST),1.0,"Undirected, General MST",151.0,,,1,1,O(ElogV),,,[- Borůvka's algorithm (1926)],Borůvka's algorithm,1926,-,1,1.0,https://www.geeksforgeeks.org/boruvkas-algorithm-greedy-algo-9/,1.0,0,5.01,"V: 5.01,
E: 3",$O(E \log V)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V) auxiliary,can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,5075.0,1,,10889978.26,1,,16703352428,1,,5,,https://scholarworks.rit.edu/cgi/viewcontent.cgi?article=1658&context=theses,Combinatorics
182,14.0,Minimum Spanning Tree (MST),1.0,"Undirected, General MST",152.0,,,1,1,O(V^2),,,[https://ieeexplore.ieee.org/document/6773228 Prim's algorithm + adjacency matrix searching (1957)],Prim's algorithm + adjacency matrix searching,1957,https://ieeexplore.ieee.org/document/6773228,,,,0.0,0,5,V: 5,$O(V^2)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V) auxiliary,can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,173611.0,0.02923201871,,,,,,,,5,,,Combinatorics
183,14.0,Minimum Spanning Tree (MST),1.0,"Undirected, General MST",153.0,,,1,1,O(E + VlogV),,,[https://dl.acm.org/citation.cfm?id=28874 Prim's algorithm + Fibonacci heaps; Fredman & Tarjan (1987)],Prim's algorithm + Fibonacci heaps; Fredman & Tarjan,1987,https://dl.acm.org/citation.cfm?id=28874,,,,0.0,0,5,"V: 5,
E: 3",$O(E + V \log V)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V) auxiliary?,can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,4208.0,1.206036122,,,,,,,,5,,,Combinatorics
184,14.0,Minimum Spanning Tree (MST),1.0,"Undirected, General MST",154.0,,,1,1,O(ElogE),,,[https://www.jstor.org/stable/2033241 Kruskal's algorithm (1956)],Kruskal's algorithm,1956,https://www.jstor.org/stable/2033241,,,,0.0,0,5.01,"V: 5.01,
E: 4",$O(E \log E)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E) auxiliary,can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,5355.0,0.9477124183,,,,,,,,5,,,Combinatorics
185,14.0,Minimum Spanning Tree (MST),1.0,"Undirected, General MST",155.0,,,1,1,O(EloglogV),,,[https://www.sciencedirect.com/science/article/pii/0020019075900563 Yao's algorithm (1975)],Yao's algorithm,1975,https://www.sciencedirect.com/science/article/pii/0020019075900563,,,,1.0,0,5.001,"V: 5.001,
E: 4",$O(E \log \log V)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E) auxiliary?,can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,1820.0,2.788461538,0.02973317467,2463146.436,4.421165588,0.04338336425,2823142793,5.916580794,0.05210519661,5,,,Combinatorics
186,14.0,Minimum Spanning Tree (MST),1.0,"Undirected, General MST",156.0,,,1,1,O(EloglogV),,,[https://epubs.siam.org/doi/abs/10.1137/0205051 Cheriton-Tarjan Algorithm (1976)],Cheriton-Tarjan Algorithm,1976,https://epubs.siam.org/doi/abs/10.1137/0205051,,,,0.0,0,5.001,"V: 5.001,
E: 4",$O(E \log \log V)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E) auxiliary?,keep track of copy of graph where edges may be deleted?,1.0,0.0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,1820.0,2.788461538,,,,,,,,5,,,Combinatorics
187,14.0,Minimum Spanning Tree (MST),1.0,"Undirected, General MST",159.0,,,1,1,"O(E+Vlog(V)log(E/V)), equivalent to O(E + Vlog(V)loglog(V))","""Arbitrary graph, random edge weights""",https://dl.acm.org/doi/10.5555/2791220.2791225,[https://dl.acm.org/citation.cfm?id=2791225 Filter Kruskal algorithm (2009)],Filter Kruskal algorithm,2009,https://dl.acm.org/citation.cfm?id=2791225,,,,0.0,0,5.01,"V: 5.01,
E: 4",$O(E \log V)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E) auxiliary?,"Kruskal-based, with minimal overhead? filtering should only remove edges, and each edge should only require O(1) information",1.0,0.0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,12258.0,0.4140153369,,,,,,,,5,,,Combinatorics
188,14.0,Minimum Spanning Tree (MST),1.0,"Undirected, General MST",160.0,,,1,1,"O(E*alpha(E, V))",,,[https://www.cs.princeton.edu/~chazelle/pubs/mst.pdf Chazelle's algorithm (2000)],Chazelle's algorithm,2000,https://www.cs.princeton.edu/~chazelle/pubs/mst.pdf,,,,0.0,0,5,"V: 5,
E: 3","$O(E*\alpha(E, V))$","V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E) auxiliary??,"Seems like it uses Boruvka phases and contracts the graph, which requires $O(E)$ space, and then additional information in the tree data structure/soft heap don't require space beyond that",,,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,583.0,8.704974271,,,,,,,,5,,,Combinatorics
189,14.0,Minimum Spanning Tree (MST),1.0,"Undirected, General MST",161.0,,,1,1,O(E LogV (loglogV)^3),,,[https://www.cs.princeton.edu/courses/archive/spr10/cos423/handouts/NearOpt.pdf Thorup (reverse-delete) (2000)],Thorup (reverse-delete),2000,https://www.cs.princeton.edu/courses/archive/spr10/cos423/handouts/NearOpt.pdf,,,,0.0,0,5.02,"V: 5.02,
E: 3",$O(E \log V (\log \log V)^3)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E) auxiliary?,can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,154134.0,0.03292589565,,,,,,,,5,,,Combinatorics
190,15.0,Closest Pair Problem,1.0,"k-dimensional space, l_m (or l_infty) norm",165.0,,,1,1,O(kn loglogn+n*3^k),,,[https://www.sciencedirect.com/science/article/pii/0020019079900851 Fortune and Hopcroft (1979)],Fortune and Hopcroft,1979,https://www.sciencedirect.com/science/article/pii/0020019079900851,,,,0.0,0,4,"n: 4,
k: 8",$O(kn \log\log n+n*3^k)$,"n: number of points
k: dimension of space",n,,,Real RAM,words,3,n: 3,O(n),can be easily derived? (can re-use space from recursive calls),1.0,0.0,,0,,0,,0,0,,0,0,https://ecommons.cornell.edu/bitstream/handle/1813/7460/78-340.pdf,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,3316.0,301.5681544,,,,,,,,4,,,Image Processing
191,15.0,Closest Pair Problem,1.0,"k-dimensional space, l_m (or l_infty) norm",166.0,,,1,1,O(kn logn),,,[https://www.springer.com/gp/book/9780387961316 F. Preparata and M. Shamos (1986)],F. Preparata and M. Shamos,1986,https://www.springer.com/gp/book/9780387961316,,,,0.0,0,4,"k: 3,
n: 4",$O(kn \log n)$,"n: number of points
k: dimension of space",n,,,Real RAM,words,3,"n: 3,
k: 3",O(kn)?,keep track of all sorted lists in each dimension; re-use space from recursive calls,1.0,0.0,,0,,0,,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,9965.0,100.3512293,,,,,,,,4,,,Image Processing
192,15.0,Closest Pair Problem,1.0,"k-dimensional space, l_m (or l_infty) norm",167.0,,,1,1,O(3^k*n),Randomness within the algorithm steps themselves,,[https://dl.acm.org/citation.cfm?id=540196 Rabin' Algorithm (1976)],Rabin' Algorithm,1976,https://dl.acm.org/citation.cfm?id=540196,,,,1.0,5->6,5,"k: 8,
n: 5",$O(3^k*n^2)$,"n: number of points
k: dimension of space",n,,,Real RAM,words,3,n: 3,O(n),can be easily derived,1.0,0.0,,1,Las Vegas,0,,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,1000.0,1000,,1000000,1000000,,1000000000,1000000000,,4,,,Image Processing
193,15.0,Closest Pair Problem,1.0,"k-dimensional space, l_m (or l_infty) norm",168.0,,,1,1,O(kn logn),,,[https://dl.acm.org/citation.cfm?id=358850 Bentley (1980)],Bentley,1980,https://dl.acm.org/citation.cfm?id=358850,,,,0.0,0,4,"n: 4,
k: 3",$O(kn \log n)$,"n: number of points
k: dimension of space",n,,,Real RAM,words,3,"n: 3,
k: 3",O(kn)?,keep track of all sorted lists in each dimension; re-use space from recursive calls,1.0,0.0,,0,,0,,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,9965.0,100.3512293,,,,,,,,4,,,Image Processing
194,15.0,Closest Pair Problem,1.0,"k-dimensional space, l_m (or l_infty) norm",169.0,,,1,1,O(kn logn),,,[https://dl.acm.org/citation.cfm?id=803652 Bentley; Shamos (1976)],Bentley; Shamos,1976,https://dl.acm.org/citation.cfm?id=803652,,,,0.0,0,4,"n: 4,
k: 3",$O(kn \log n)$,"n: number of points
k: dimension of space",n,,,Real RAM,words,3,"n: 3,
k: 3",O(kn)?,keep track of all sorted lists in each dimension; re-use space from recursive calls,1.0,0.0,,0,,0,,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,9965.0,100.3512293,,,,,,,,4,,,Image Processing
195,15.0,Closest Pair Problem,1.0,"2-dimensional space, l_m (or l_infty) norm",170.0,,,1,1,O(n logn),,,[https://www.sciencedirect.com/science/article/pii/0020019088901500 Hinrichs; Nievergelt; Schorn (1988)],Hinrichs; Nievergelt; Schorn,1988,https://www.sciencedirect.com/science/article/pii/0020019088901500,,,,0.0,0,4,n: 4,$O(n \log n)$,n: number of points,n,,,Real RAM,words,3,n: 3,O(n),https://www.sciencedirect.com/science/article/pii/0020019088901500,0.0,1.0,,0,,0,,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,9965.0,100.3512293,,,,,,,,4,,,Image Processing
196,15.0,Closest Pair Problem,1.0,"2-dimensional space, Euclidean metric",171.0,,,1,1,O(n logn),,,[https://ieeexplore.ieee.org/document/4567872 Shamos; Hoey (1975)],Shamos; Hoey,1975,https://ieeexplore.ieee.org/document/4567872,2,1.0,http://geomalgorithms.com/a09-_intersect-3.html,1.0,4->5,4,n: 4,$O(n \log n)$,n: number of points,n,,,Real RAM,words,3,n: 3,O(n),Voronoi diagrams require O(n) space,1.0,0.0,,0,,0,,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,9965.0,100.3512293,99.3512293,19931568.57,50171.66594,50170.66594,29897352854,33447777.3,33447776.3,4,,,Image Processing
197,16.0,Shortest Path (Directed Graphs),1.0,general weights,174.0,,,1,1,O( V² EL),,,[https://apps.dtic.mil/sti/pdfs/AD0422842.pdf Bellman–Ford algorithm (Ford 1956) (1956)],Bellman–Ford algorithm (Ford 1956),1956,https://apps.dtic.mil/sti/pdfs/AD0422842.pdf,1,1.0,https://www.rand.org/pubs/papers/P923.html,1.0,0,7,"V: 7,
E: 3,
L: 3",$O(V^2 EL)$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,5,"E: 3,
V: 5",O(E),number of equations in LP; each equation has a constant number of variables,1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",666.6666667,,666666.6667,,666666666.7,,7407407407.0,1,,7.40741E+18,1,,7.40741E+27,1,,2,,,Combinatorics
198,16.0,Shortest Path (Directed Graphs),1.0,general weights,175.0,,,1,1,O(VE),,,[https://www.ams.org/journals/qam/1958-16-01/S0033-569X-1958-0102435-2/S0033-569X-1958-0102435-2.pdf Bellman–Ford algorithm (Shimbel 1955; Bellman 1958; Moore 1959) (1959)],Bellman–Ford algorithm (Shimbel 1955; Bellman 1958; Moore 1959),1959,https://www.ams.org/journals/qam/1958-16-01/S0033-569X-1958-0102435-2/S0033-569X-1958-0102435-2.pdf,,,,1.0,2->4,6,"V: 6,
E: 3",$O(VE)$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,V: 3,O(V),keeping track of distances,1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",333.3333333,0.2599210499,333333.3333,0.2599210499,333333333.3,0.2599210499,222222.0,33333.36667,31.18299021,222222222222,33333333.33,320.8297949,2.22222E+17,33333333333,3217.297949,2,,,Combinatorics
199,16.0,Shortest Path (Directed Graphs),1.0,Nonnegative Weights,176.0,,,1,1,O( V² logV),,,[https://www.jstor.org/stable/pdf/2627005.pdf Bellman–Ford algorithm (Dantzig 1960) (1960)],Bellman–Ford algorithm (Dantzig 1960),1960,https://www.jstor.org/stable/pdf/2627005.pdf,,,,0.0,0,5.01,V: 5.01,$O(V^2 \log V)$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,5,"E: 3,
V: 5",O(E) (total),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,931111.0,15910.90086,,,,,,,,2,,,Combinatorics
200,16.0,Shortest Path (Directed Graphs),1.0,Nonnegative Weights,177.0,,,1,1,O( V² ),,,[https://www.jstor.org/stable/3007178?seq=1#page_scan_tab_contents Dijkstra's algorithm with list (Whiting & Hillier 1960) (1960)],Dijkstra's algorithm with list (Whiting & Hillier 1960),1960,https://www.jstor.org/stable/3007178?seq=1#page_scan_tab_contents,,,,0.0,0,5,V: 5,O(V^2),"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,V: 3,O(V),"keeping track of distances/previous node in path, along with list",1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,111111.0,133333.4667,,,,,,,,2,,,Combinatorics
201,16.0,Shortest Path (Directed Graphs),1.0,Nonnegative Weights,178.0,,,1,1,O((E + V) log V),,,[https://dl.acm.org/citation.cfm?id=321993 Dijkstra's algorithm with binary heap (Johnson 1977) (1977)],Dijkstra's algorithm with binary heap (Johnson 1977),1977,https://dl.acm.org/citation.cfm?id=321993,,,,1.0,4->5,5.01,"V: 5.01,
E: 3",$O((E + V) \log V)$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,V: 3,O(V),"keeping track of distances/previous node in path, along with heap",1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,8380.821784,883852.1566,0.9193798649,18346606.07,403748103584,2.570030516,28312390353,2.61631E+17,5.75171023,2,,,Combinatorics
202,16.0,Shortest Path (Directed Graphs),1.0,Nonnegative Weights,179.0,,,1,1,O(E + V log V),,,[https://www.cs.princeton.edu/courses/archive/fall03/cs528/handouts/fibonacci%20heaps.pdf Dijkstra's algorithm with Fibonacci heap (Fredman & Tarjan 1984; Fredman & Tarjan 1987) (1984)],Dijkstra's algorithm with Fibonacci heap (Fredman & Tarjan 1984; Fredman & Tarjan 1987),1984,https://www.cs.princeton.edu/courses/archive/fall03/cs528/handouts/fibonacci%20heaps.pdf,,,,0.0,0,5,"E: 3,
V: 5",$O(E + V \log V)$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,V: 3,O(V),"keeping track of distances/previous node in path, along with heap",1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,3460.0,4281738.386,,,,,,,,2,,,Combinatorics
203,16.0,Shortest Path (Directed Graphs),1.0,Nonnegative Integer Weights,180.0,,,1,1,O(E log log L),,,[https://www.sciencedirect.com/science/article/pii/0166218X8390104X?via%3Dihub Dijkstra's algorithm with Fibonacci heap (Johnson 1981; Karlsson & Poblete 1983) (1981)],Dijkstra's algorithm with Fibonacci heap (Johnson 1981; Karlsson & Poblete 1983),1981,https://www.sciencedirect.com/science/article/pii/0166218X8390104X?via%3Dihub,2,1.0,https://link.springer.com/article/10.1007/BF01786986,1.0,0,5,"E: 3,
V: 5,
L: 1.99",$O(E \log \log L)$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word RAM,words,3,"V: 3,
L: 3",O(V+L),https://www.sciencedirect.com/science/article/pii/0166218X8390104X?via%3Dihub,0.0,1.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,669.3,11067394.9,0.9132063615,1821347.23,4066993532946,2.194264973,1821347230,4.06699E+18,4.550996318,2,,,Combinatorics
204,16.0,Shortest Path (Directed Graphs),1.0,Nonnegative Weights,181.0,,,1,1,O(E logL/log(2+(E/V))),,,[https://ieeexplore.ieee.org/document/4568085 Gabow's algorithm (1983)],Gabow's algorithm,1983,https://ieeexplore.ieee.org/document/4568085,,,,0.0,0,5,"E: 3,
V: 5,
L: 2",$O(E \log L/\log(2+(E/V)))$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,"V: 3,
E: 3",O(V+E)?,(keeping track of new graphs?),1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,4426.0,3347224.314,,,,,,,,2,,,Combinatorics
205,16.0,Shortest Path (Directed Graphs),2.0,Nonnegative Integer Weights,182.0,,,1,1,O(E + V*((log(L))^0.5) ),,,[https://dl.acm.org/doi/10.1145/77600.77615 Gabow Ahuja Algorithm (1990)],Gabow Ahuja Algorithm,1990,https://dl.acm.org/doi/10.1145/77600.77615,,,,0.0,0,5,"E: 3,
V: 5,
L: 1.5",$O(E + V*((\log(L))^{0.5}) )$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word RAM,words,5,"V: 5,
E: 3
C: 2",O(E + \log C),https://dl.acm.org/doi/10.1145/77600.77615,0.0,1.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,1525.0,9714632.665,,,,,,,,2,,,Combinatorics
206,16.0,Shortest Path (Directed Graphs),1.0,Nonnegative Integer Weights,183.0,,,1,1,"O(E + V min(log log V, log log L))",,,[https://dl.acm.org/doi/10.1016/j.jcss.2004.04.003 Thorup's algorithm (2004)],Thorup's algorithm,2004,https://dl.acm.org/doi/10.1016/j.jcss.2004.04.003,,,,0.0,0,5,"E: 3,
V: 5,
L: 1.99","$O(E + V min(log log V, log log L))$","V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,V: 3,"O(V)? (""linear-space queue"")",https://dl.acm.org/doi/10.1016/j.jcss.2004.04.003,0.0,1.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,1686.0,8786960.151,,,,,,,,2,,,Combinatorics
207,17.0,All-Pairs Shortest Paths (APSP),2.0,APSP on Dense Directed Graphs with Arbitrary Weights,184.0,,,1,1,O(n^4),,,[https://link.springer.com/article/10.1007/BF02476438 Shimbel Algorithm (1953)],Shimbel Algorithm,1953,https://link.springer.com/article/10.1007/BF02476438,1,1.0,https://link.springer.com/content/pdf/10.1007/BF02476438.pdf,1.0,0,7,n: 7,$O(n^4)$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: Uses a $V \times V$ matrix to store and calculate distances,1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,12345679012.0,1,,1.23457E+22,1,,1.23457E+34,1,,2,,,Combinatorics
208,17.0,All-Pairs Shortest Paths (APSP),2.0,APSP,185.0,,,1,1,O(n^3),,,[https://dl.acm.org/citation.cfm?id=368168 Floyd–Warshall algorithm (1962)],Floyd–Warshall algorithm,1962,https://dl.acm.org/citation.cfm?id=368168,,,,1.0,2->3,6,n: 6,$O(n^3)$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: Uses a $V \times V$ matrix to store and calculate distances,1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,37037037.0,333.3333337,0.9068646188,3.7037E+16,333333.3333,3.108215283,3.7037E+25,333333333.3,7.850881521,2,,,Combinatorics
209,17.0,All-Pairs Shortest Paths (APSP),2.0,APSP on Dense Directed Graphs with Arbitrary Weights,187.0,,,1,1,O(n^3 /2^{(\log n)^{0.5}}),,,[https://dl.acm.org/citation.cfm?id=2591811 Williams (2014)],Williams,2014,https://dl.acm.org/citation.cfm?id=2591811,,,,0.0,0,6,n: 6,$O(n^3 /2^{(\log n)^{0.5}})$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$,"Derived: discussed with Ryan, uses an auxiliary $V \times V$ matrix, and the space required for the matrix multiplication of $V \times d$ and $d \times V$ matrices is also $O(V^2)$",1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,4998250.0,2470.000303,,,,,,,,2,,,Combinatorics
210,17.0,All-Pairs Shortest Paths (APSP),2.0,APSP on Geometrically Weighted Graphs,190.0,,,1,1,O(n^{2.844}),,,[http://tmc.web.engr.illinois.edu/moreapsp.pdf Chan (Geometrically Weighted) (2009)],Chan (Geometrically Weighted),2009,http://tmc.web.engr.illinois.edu/moreapsp.pdf,,,,0.0,0,5.844,n: 5.844,$O(n^{2.844})$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,"n: 5,
m: 1",$O(l n^2)$,Derived: Compute and store $2l$ $V \times V$ matrices,1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,14964670.0,824.9883901,,,,,,,,2,,,Combinatorics
211,18.0,Integer Factoring,1.0,First Category Integer Factoring,192.0,,,1,1,O(2^{(n/2)}),,,[- Trial division (1202)],Trial division,1202,-,1,1.0,https://en.wikipedia.org/wiki/Trial_division,1.0,0,8,n: 8,$O(2^{n/2})$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n),need to keep track of what number you're currently checking,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Trial_division,whose running time depends on the size of smallest prime factor.,,,,1000.0,,1000000.0,,1000000000.0,,inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis
212,18.0,Integer Factoring,1.0,First Category Integer Factoring,193.0,,,1,1,O( 2^{(n/2)}),,,[ Wheel factorization (1940)],Wheel factorization,1940,,,,,0.0,0,8,n: 8,$O(2^{n/2})$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n),"need to keep track of what number you're currently checking, along with o(n) bits for the wheel (assuming it's small)",1.0,0.0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,inf,1,,,,,,,,1,,,Numerical Analysis
213,18.0,Integer Factoring,1.0,First Category Integer Factoring,195.0,,,1,1,O(B*log B*log^2(n))?,,,[https://www.cambridge.org/core/journals/mathematical-proceedings-of-the-cambridge-philosophical-society/article/theorems-on-factorization-and-primality-testing/6762E84DBD34AEF13E6B1D1A8334A989 Pollard's p − 1 algorithm (1974)],Pollard's p − 1 algorithm,1974,https://www.cambridge.org/core/journals/mathematical-proceedings-of-the-cambridge-philosophical-society/article/theorems-on-factorization-and-primality-testing/6762E84DBD34AEF13E6B1D1A8334A989,,,,0.0,0,8,n: 8,O(B*log B*log^2(n))?,"n: number of bits in the integer
B: smoothness bound (can be exponential)",n,,,Word RAM?,bits,8,"n: 8,
B: 3",O(n+B),"the number M requires O((log B)*pi(B)) = O(B) bits, and the other numbers require O(n) bits",1.0,0.0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,inf,1,,,,,,,,1,,,Numerical Analysis
214,18.0,Integer Factoring,1.0,First Category Integer Factoring,196.0,,,1,1,O(2^{(n)}),,,[https://www.jstor.org/stable/2007633?origin=crossref Williams' p + 1 algorithm (1982)],Williams' p + 1 algorithm,1982,https://www.jstor.org/stable/2007633?origin=crossref,,,,0.0,0,8,n: 8,$O(2^n)$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n)?,constant number of values which are expressed in mod N,1.0,0.0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,inf,1,,,,,,,,1,,,Numerical Analysis
215,18.0,Integer Factoring,1.0,First Category Integer Factoring,197.0,,,1,1,O(e^{(sqrt((1+o(1))n*log n))}),,,[https://www.jstor.org/stable/1971363?origin=crossref&seq=1 Lenstra elliptic curve factorization (1987)],Lenstra elliptic curve factorization,1987,https://www.jstor.org/stable/1971363?origin=crossref&seq=1,,,,0.0,0,8,n: 8,$O(e^{(\sqrt((1+o(1))n*log n))})$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n)?,constant number of values which are expressed in mod N,1.0,0.0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,22542392121.0,Inf,,,,,,,,1,,,Numerical Analysis
216,18.0,Integer Factoring,1.0,First Category Integer Factoring,198.0,,,1,1,O(2^n)?,,,[https://archive.org/details/oeuvresdefermat02ferm Fermat's factorization method (1894)],Fermat's factorization method,1894,https://archive.org/details/oeuvresdefermat02ferm,1,1.0,https://www.geeksforgeeks.org/fermats-factorization-method/,1.0,0,8,n: 8,$O(2^n)$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n)?,constant number of values which require at most O(n) bits,1.0,0.0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,22387211385.0,Inf,,5.01187E+20,Inf,,1.12202E+31,Inf,,1,,,Numerical Analysis
217,18.0,Integer Factoring,1.0,First Category Integer Factoring,199.0,,,1,1,O(2^{(n/2)})?,,,[- Euler's factorization method (1940)],Euler's factorization method,1940,-,,,,0.0,0,8,n: 8,$O(2^{(n/2)})$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n),constant number of values which require at most O(n) bits,1.0,0.0,,0,,0,,0,0,,0,0,https://archive.org/details/numbertheoryitsh0000orey/page/59,whose running time depends on the size of smallest prime factor.,,,,,,,,,,inf,1,,,,,,,,1,,,Numerical Analysis
218,19.0,Integer Factoring,1.0,Second Category Integer Factoring,201.0,,,1,1,O(e^{(2 sqrt(2) sqrt(n*logn))}),,,[https://www.ams.org/journals/mcom/1981-36-153/S0025-5718-1981-0595059-1/home.html Dixon's algorithm (1981)],Dixon's algorithm,1981,https://www.ams.org/journals/mcom/1981-36-153/S0025-5718-1981-0595059-1/home.html,,,,0.0,0,8,n: 8,$O(e^{(2 \sqrt(2) \sqrt(n*logn))})4,"n: number of bits in the integer
B: bound parameter",n,,,Word RAM?,bits,3,"n: 3,
B: 5",O(n+(B/logB)^2)?,There are pi(B) = O(B/log B) primes in the factor base; need pi(B)+1=O(B/log B) relations involving an integer (which doesn't need to be kept track of) and a pi(B)-bit string of exponents. Also need O(n) bits to perform other computations. Rest is irrelevant asymptotically,1.0,0.0,,0,,0,,0,0,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,2,,,Numerical Analysis
219,19.0,Integer Factoring,1.0,Second Category Integer Factoring,202.0,,,1,1,O(e^{sqrt(2n*logn)}),,,[https://www.ams.org/journals/bull/1931-37-10/S0002-9904-1931-05271-X/home.html Continued fraction factorization (CFRAC) (1931)],Continued fraction factorization (CFRAC),1931,https://www.ams.org/journals/bull/1931-37-10/S0002-9904-1931-05271-X/home.html,,,,1.0,0,8,n: 8,$O(e^{\sqrt(2n*logn)})$,"n: number of bits in the integer
B: bound parameter",n,,,Word RAM?,bits,3,"n: 3,
B: 5",O(n+(B/logB)^2)?,Same as above? assuming there is a bound parameter implemented,1.0,0.0,,0,,0,,0,0,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,3395.232193,1,,497271.0145,1,,27199045.33,1,,4,,,Numerical Analysis
220,19.0,Integer Factoring,1.0,Second Category Integer Factoring,206.0,,,1,1,O(2^{(n/4)}),,,[https://www.ams.org/journals/mcom/2008-77-261/S0025-5718-07-02010-8/S0025-5718-07-02010-8.pdf Shanks's square forms factorization (SQUFOF) (2007)],Shanks's square forms factorization (SQUFOF),2007,https://www.ams.org/journals/mcom/2008-77-261/S0025-5718-07-02010-8/S0025-5718-07-02010-8.pdf,,,,0.0,0,8,n: 8,$O(2^{n/4})$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n)?,Constant number of O(n)-bit integers,1.0,0.0,,0,,0,,0,0,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,4,,,Numerical Analysis
221,20.0,LU Decomposition,2.0,Square Matrix LU Decomposition,214.0,,,1,1,O(n^3),,,"[https://books.google.com/books?hl=en&lr=&id=1aAOdzK3FegC&oi=fnd&pg=PA1&dq=Teukolsky#v=onepage&q=Teukolsky&f=false Press, Teukolsky, Flannery (2007)]","Press, Teukolsky, Flannery",2007,https://books.google.com/books?hl=en&lr=&id=1aAOdzK3FegC&oi=fnd&pg=PA1&dq=Teukolsky#v=onepage&q=Teukolsky&f=false,,,,0.0,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,n: dimension of square matrix,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",$\tilde{O}(n)$,"Derived: The only auxiliary structure used is a list called ""vv"" that has one entry per row of the input matrix to store some sort of scaling metric",1.0,0.0,,0,,0,,1,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,9965.0,100351.2293,,,,,,,,3,,,Numerical Analysis
222,21.0,Informed Search,2.0,Informed Search,216.0,,,1,1,O(b^d),,,[ Greedy Best-First Search (1959)],Greedy Best-First Search,1959,,1,1.0,https://www.cs.cmu.edu/afs/cs/project/jair/pub/volume28/coles07a-html/node11.html,1.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,Word RAM,words,8,"b: 7,
d: 8",O(b^d),https://en.wikipedia.org/wiki/Breadth-first_search: Stores all generated nodes in memory,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Breadth-first_search,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Robotics
223,21.0,Informed Search,2.0,Informed Search,220.0,,,1,1,O(b^d),,https://webdocs.cs.ualberta.ca/~holte/Publications/aaai11PeterYapFinal.pdf for experimental results,[https://webdocs.cs.ualberta.ca/~holte/Publications/aaai11PeterYapFinal.pdf Block A* (2011)],Block A*,2011,https://webdocs.cs.ualberta.ca/~holte/Publications/aaai11PeterYapFinal.pdf,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,Word RAM,words,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics
224,21.0,Informed Search,2.0,Informed Search,221.0,,,1,1,O(b^d),,,[https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.15.3683 D* (1994)],D*,1994,https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.15.3683,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,Word RAM,words,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics
225,21.0,Informed Search,2.0,Informed Search,222.0,,,1,1,O(b^d),,,[https://www.ri.cmu.edu/pub_files/pub4/ferguson_david_2006_3/ferguson_david_2006_3.pdf Field D* (2006)],Field D*,2006,https://www.ri.cmu.edu/pub_files/pub4/ferguson_david_2006_3/ferguson_david_2006_3.pdf,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,Word RAM,words,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics
226,21.0,Informed Search,2.0,Informed Search,223.0,,,1,1,O(b^d),,,[ Fringe (2005)],Fringe,2005,,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,Word RAM,words,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics
227,22.0,String Search,2.0,Single String Search,236.0,,,1,1,O(n/m),,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.13.9460&rep=rep1&type=pdf,[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.13.9460&rep=rep1&type=pdf Tuned Boyer-Moore algorithm (1991)],Tuned Boyer-Moore algorithm,1991,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.13.9460&rep=rep1&type=pdf,,,,0.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"m: pattern length
n: length of searchable text
s: size of the alphabet",m+n,,,Word RAM,words,3,"m: 3,
s: 3,
m+n: 3",O(m + s),https://www.cs.utexas.edu/users/moore/publications/fstrpos.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics
228,23.0,Sequence Alignment,1.0,"Edit sequence, global alignment",261.0,,,1,1,O(mn),,,[https://www.nature.com/articles/srep01746 FOGSAA (2013)],FOGSAA,2013,https://www.nature.com/articles/srep01746,,,,0.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"n: 3,
m: 3,
m+n: 5",O(mn)?,"Upper bounded by runtime, though likely there's a better bound?",1.0,0.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000.0,1,,,,,,,,4,,,Bioinformatics
229,25.0,Line Clipping,1.0,convex polygonal window,270.0,,,1,1,O(n*logp),^ see above,^ see above,[https://www.sciencedirect.com/science/article/pii/0097849394900647/pdf?md5=06bd1f11031af17d1fd34626c4e2f49b&pid=1-s2.0-0097849394900647-main.pdf O(lg N) algorithm (1994)],O(lg N) algorithm,1994,https://www.sciencedirect.com/science/article/pii/0097849394900647/pdf?md5=06bd1f11031af17d1fd34626c4e2f49b&pid=1-s2.0-0097849394900647-main.pdf,376,0.0,https://www.sciencedirect.com/science/article/pii/0097849394900647,0.0,0,3,"n: 3,
p: 2",$O(n*\log p)$,"n: number of lines
p: number of edges on polygon",n,,,Word/Real RAM,words,1,n: 1,O(1) auxiliary??,"Easily derived? (O(1) per segment, space can be re-used)",1.0,0.0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,9.965,100.3512293,,19.93156857,0,,29.89735285,0,,6,,,Image Processing
230,27.0,Multiplication,1.0,,276.0,,,1,1,O(n logn loglogn),^see above,^see above,[https://link.springer.com/article/10.1007/BF02242355 Schönhage–Strassen algorithm (1971)],Schönhage–Strassen algorithm,1971,https://link.springer.com/article/10.1007/BF02242355,,,,1.0,0,4.001,n: 4.001,$O(n \log n \log\log n)$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary?,Depends on DFT/FFT algorithm? but all vectors/numbers are of size O(n) and there are a constant number of such objects,1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,32984.0,30.31772981,0.1163404644,86044249.58,11621.92715,0.3525022766,146555204661,6823367.361,0.6613134177,4,,,Numerical Analysis
231,27.0,Multiplication,1.0,,277.0,,,1,1,O(nlogn 2^{O(log*n)}),^see above,^see above,[https://web.archive.org/web/20130425232048/http://www.cse.psu.edu/~furer/Papers/mult.pdf Furer's algorithm (2007)],Furer's algorithm,2007,https://web.archive.org/web/20130425232048/http://www.cse.psu.edu/~furer/Papers/mult.pdf,,,,0.0,0,7,n: 7,$O(n \log n 2^{O(\log*n)})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary?,Depends on DFT/FFT algorithm (though original source describes its own algorithm)? but all vectors/numbers are of size O(n) and there are a constant number of such objects,1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,40816640.0,0.02449981184,,,,,,,,4,,,Numerical Analysis
232,27.0,Multiplication,1.0,,278.0,,,1,1,O(nlogn 2^{O(log*n)}),^see above,^see above,[https://arxiv.org/abs/0801.1416 De (2008)],De,2008,https://arxiv.org/abs/0801.1416,,,,0.0,0,7,n: 7,$O(n \log n 2^{O(\log*n)})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary?,^ same as above,1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,40816640.0,0.02449981184,,,,,,,,4,,,Numerical Analysis
233,27.0,Multiplication,1.0,,279.0,,,1,1,O(nlogn),^see above,^see above,[https://hal.archives-ouvertes.fr/hal-02070778 Harvey; Hoeven (2019)],Harvey; Hoeven,2019,https://hal.archives-ouvertes.fr/hal-02070778,,,,1.0,4->5,4,n: 4,$O(n \log n)$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary??,[this one is kind of a mess to read but it seems generally the same as above - objects like polynomials/vectors and other numbers are of size O(n) and there are constantly many?],1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,9965.784285,100.3433319,0.06007183934,19931568.57,50171.66594,0.146831135,29897352854,33447777.3,0.2452173271,4,,,Numerical Analysis
234,27.0,Multiplication,1.0,,280.0,,,1,1,O(nlogn 2^{(3log*n)}),^see above,^see above,[https://arxiv.org/abs/1407.3360 Harvey; Hoeven; Lecerf (2015)],Harvey; Hoeven; Lecerf,2015,https://arxiv.org/abs/1407.3360,,,,0.0,0,7,n: 7,$O(n \log n 2^{(3 \log*n)})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary??,^ same as above,1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,79720.0,12.54390366,,,,,,,,4,,,Numerical Analysis
235,27.0,Multiplication,1.0,,281.0,,,1,1,O(nlogn 2^{O(log*n)}),^see above,^see above,[https://hal.inria.fr/hal-01108166v1/document Covanov and Thomé (2015)],Covanov and Thomé,2015,https://hal.inria.fr/hal-01108166v1/document,,,,0.0,0,7,n: 7,$O(n \log n 2^{O(\log*n)})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary??,^ same as above,1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,40816640.0,0.02449981184,,,,,,,,4,,,Numerical Analysis
236,27.0,Multiplication,1.0,,282.0,,,1,1,O(nlogn 2^{(3log*n)}),^see above,^see above,[https://arxiv.org/abs/1502.02800 Covanov and Thomé (2016)],Covanov and Thomé,2016,https://arxiv.org/abs/1502.02800,,,,0.0,0,7,n: 7,$O(n \log n 2^{(3 \log*n)})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary??,^ same as above,1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,79720.0,12.54390366,,,,,,,,4,,,Numerical Analysis
237,27.0,Multiplication,1.0,,283.0,,,1,1,O(nlogn 2^{(2log*n)}),^see above,^see above,[https://arxiv.org/abs/1802.07932 Harvey; Hoeven; Lecerf (2018)],Harvey; Hoeven; Lecerf,2018,https://arxiv.org/abs/1802.07932,,,,0.0,0,7,n: 7,$O(n \log n 2^{(2 \log*n)})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary??,^ same as above,1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,39860.0,25.08780733,,,,,,,,4,,,Numerical Analysis
238,30.0,Mutual Exclusion,1.0,,298.0,,,1,1,O(n),^see above,(none),[http://lamport.azurewebsites.net/pubs/bakery.pdf Lamport's bakery algorithm (1974)],Lamport's bakery algorithm,1974,http://lamport.azurewebsites.net/pubs/bakery.pdf,,,,0.0,0,3,n: 3,$O(n)$,n: number of processes,n,,,,communication variables?,3,n: 3,"O(1) per process, O(n) total?",https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.135.825&rep=rep1&type=pdf,0.0,1.0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000.0,1,,1000000,,,1000000000,,,6,,,Operating Systems
239,30.0,Mutual Exclusion,1.0,,299.0,,,1,1,O(n),^see above,(none),[https://www.researchgate.net/publication/221235887_A_simple_solution_to_Lamport's_concurrent_programming_problem_with_linear_wait Szymanski's algorithm (1988)],Szymanski's algorithm,1988,https://www.researchgate.net/publication/221235887_A_simple_solution_to_Lamport's_concurrent_programming_problem_with_linear_wait,,,,0.0,0,3,n: 3,$O(n)$,n: number of processes,n,,,,communication variables?,3,n: 3,"O(1) per process, O(n) total?",http://cs.rpi.edu/~szymansk/papers/jerus.93.pdf (kinda),0.0,0.0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000.0,1,,,,,,,,6,,,Operating Systems
240,30.0,Mutual Exclusion,1.0,,300.0,,,1,1,O(n),^see above,(none),[https://link.springer.com/chapter/10.1007/978-3-540-30186-8_5 Taubenfeld's black-white bakery algorithm (2004)],Taubenfeld's black-white bakery algorithm,2004,https://link.springer.com/chapter/10.1007/978-3-540-30186-8_5,,,,0.0,0,3,n: 3,$O(n)$,n: number of processes,n,,,,communication variables?,3,n: 3,"O(1) per process, O(n) total?",https://link.springer.com/content/pdf/10.1007/b101206.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000.0,1,,,,,,,,6,,,Operating Systems
241,30.0,Mutual Exclusion,1.0,,301.0,,,1,1,O(n^{0.5}),^see above,(none),[https://cseweb.ucsd.edu/classes/wi09/cse223a/p145-maekawa.pdf Maekawa's algorithm (1985)],Maekawa's algorithm,1985,https://cseweb.ucsd.edu/classes/wi09/cse223a/p145-maekawa.pdf,,,,1.0,0,2.5,n: 2.5,$O(n^{0.5})$,n: number of processes,n,,,,communication variables?,3,n: 3,"O(1) per process, O(n) total?",https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.135.825&rep=rep1&type=pdf,0.0,0.0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,31.6227766,31.6227766,0.3688745095,1000,1000,0.8738174229,31622.7766,31622.7766,1.565020906,6,,,Operating Systems
242,30.0,Mutual Exclusion,1.0,,302.0,,,1,1,O(logn)? (originally this had O(n)),^see above,(none),[https://dl.acm.org/doi/abs/10.1145/58564.59295 Raymond's algorithm (1997)],Raymond's algorithm,1997,https://dl.acm.org/doi/abs/10.1145/58564.59295,,,,0.0,0,2,n: 2,O(\log n)? (originally this had O(n)),n: number of processes,n,,,,communication variables?,3,n: 3,"O(1) per process, O(n) total?",https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.135.825&rep=rep1&type=pdf,0.0,0.0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000.0,1,,,,,,,,6,,,Operating Systems
243,30.0,Mutual Exclusion,1.0,,304.0,,,1,1,O(n)? (originally this had O(logn)),^see above,(none),[https://cse.iitkgp.ac.in/~agupta/distsys/Mutex-SuzukiKasami.pdf Suzuki-Kasami's algorithm (1985)],Suzuki-Kasami's algorithm,1985,https://cse.iitkgp.ac.in/~agupta/distsys/Mutex-SuzukiKasami.pdf,2,1.0,,1.0,6->7,3,n: 3,O(n)? (originally this had O(logn)),n: number of processes,n,,,,communication variables?,3,n: 3,"O(1) per process, O(n) total?",https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.135.825&rep=rep1&type=pdf,0.0,0.0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,9.965,100.3512293,,19.93156857,0,,29.89735285,0,,6,,,Operating Systems
244,47.0,Eigenvalues (Iterative Methods),2.0,Eigenpair with the Largest Eigenvalue,397.0,,0.0,1,1,O(n^2),,,[https://onlinelibrary.wiley.com/doi/pdf/10.1002/zamm.19290090105?casa_token=xSwK6PkV010AAAAA:j_1-JKs0GG-KuwUUyM_dIt8kmOa5z6lvp_GABgDryAYxKdYvChyNGA9VA5CZLyAurWOVYPRn45geRTFk Power Iteration (1929)],Power Iteration,1929,https://onlinelibrary.wiley.com/doi/pdf/10.1002/zamm.19290090105?casa_token=xSwK6PkV010AAAAA:j_1-JKs0GG-KuwUUyM_dIt8kmOa5z6lvp_GABgDryAYxKdYvChyNGA9VA5CZLyAurWOVYPRn45geRTFk,1,1.0,https://en.wikipedia.org/wiki/Power_iteration,1.0,0,3,"n: 5,
n^2: 3",$O(n^2)$,n: dimension of matrix,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",O(n),Derived: Stores an auxiliary vector,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000.0,,1000000.0,,1000000000.0,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Numerical Analysis
245,64.0,Delaunay Triangulation,1.0,,527.0,,,1,1,O(nlogn),,,[http://www.wias-berlin.de/people/si/course/files/Fortune87-SweepLine-Voronoi.pdf Fortune (1987)],Fortune,1987,http://www.wias-berlin.de/people/si/course/files/Fortune87-SweepLine-Voronoi.pdf,,,,0.0,0,4,n: 4,$O(n \log n)$,n: number of vertices,n,,,Real RAM?,words,3,n: 3,O(n),See Fortune's Algorithm (Voronoi diagrams); Voronoi diagram gives us O(n) circumcenters which can be used to find the O(n) triangles,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,4,,,Combinatorics
246,80.0,Maximum Subarray Problem,1.0,1D Maximum Subarray,626.0,,,1,1,O(n),^see above,^see above,[https://www.sciencedirect.com/science/article/pii/0167642383900151?via%3Dihub Gries (1982)],Gries,1982,https://www.sciencedirect.com/science/article/pii/0167642383900151?via%3Dihub,,,,0.0,0,3,n: 3,$O(n)$,n: length of array,n,,,Word/Real RAM,words,1,n: 1,O(1) auxiliary,keep track of current tail sum and best sum,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,1000.0,,,,,,,,,3,,,Combinatorics
247,80.0,Maximum Subarray Problem,1.0,1D Maximum Subarray,627.0,,,1,1,O(n),^see above,^see above,[https://dl.acm.org/doi/10.1093/comjnl/32.2.122 Bird (1989)],Bird,1989,https://dl.acm.org/doi/10.1093/comjnl/32.2.122,,,,0.0,0,3,n: 3,$O(n)$,n: length of array,n,,,???,???,1,n: 1,O(1) auxiliary,keep track of current tail sum and best sum,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,3,,,Combinatorics
248,120.0,Integer Relation,1.0,,923.0,,,1,1,O(n^3(n+k)),,,[https://epubs.siam.org/doi/pdf/10.1137/0218059 HJLS algorithm (1986)],HJLS algorithm,1986,https://epubs.siam.org/doi/pdf/10.1137/0218059,,,,0.0,0,7,"n: 7,
k: 3",$O(n^3(n+k))$,"n: dimensionality of vector
k: relation size parameter",n,https://epubs.siam.org/doi/pdf/10.1137/0218059,0.0,bit complexity,bits,5,n: 5,O(n^2) -- but requires infinite precision with large n or else it becomes unstable,"Derived: Store Gram-Schmidt basis vectors b_i (n n-dimensional vectors) and Gram-Schmidt numbers \mu_{i,j} (i and j both from 1 to n), not sure how to take into account the ""bit complexity"" part",1.0,0.0,,0,,0,,0,0,,0,0,,"Given a vector in n-space, is there a non-zero integral vector that is orthogonal to that vector?",,,,,,,,,,1000000000.0,,,,,,,,,3,,,Numerical Analysis
249,4.0,Longest Common Subsequence,1.0,LCS,41.0,,,1,1,O(rm \log(n/r) + rm),,,[https://www.sciencedirect.com/science/article/pii/0022000084900254 Hsu and Du (Scheme 2) (1984)],Hsu and Du (Scheme 2),1984,https://www.sciencedirect.com/science/article/pii/0022000084900254,,,,1.0,-,5.01,"m: 3,
r: 3,
n: 2,
m+n: 5.01",O(rm \log(n/r) + rm),"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS",m+n,,,Word RAM,words,5,"r: 3,
m: 3,
m+n: 5",$O(rm)$,https://www.sciencedirect.com/science/article/pii/0022000084900254,0.0,1.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics
250,4.0,Longest Common Subsequence,2.0,LCS,42.0,,,1,1,O(m \log n +n^2 \log(2m/n)),"On average, $p = n^2 / s$",https://dl.acm.org/doi/10.1145/74697.74702,[https://link.springer.com/article/10.1007/BF01840365 Apostolico and Guerra (HS1 Algorithm) (1987)],Apostolico and Guerra (HS1 Algorithm),1987,https://link.springer.com/article/10.1007/BF01840365,,,,0.0,-,5,"m: 3,
n: 2,
p: 3,
m+n: 5",O(m \log n +p \log(2mn/p)),"$n$: length of the longer input string
$m$: length of the shorter input string
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$s$: size of alphabet",m+n,,,Word RAM,words,3,"p: 3,
n: 3,
m+n: 3",$O(p + n)$,https://link.springer.com/article/10.1007/BF01840365,0.0,1.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics
251,4.0,Longest Common Subsequence,2.0,LCS,43.0,,,1,1,O(n^2 + n(r+\log n)),"On average, $p = n^2 / s$",https://dl.acm.org/doi/10.1145/74697.74702,[https://dl.acm.org/citation.cfm?id=74702 Kuo and Cross (1989)],Kuo and Cross,1989,https://dl.acm.org/citation.cfm?id=74702,,,,0.0,-,5,"p: 3,
n: 4,
r: 3,
m+n: 5",O(p + n(r+\log n)),"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$s$: size of alphabet",m+n,,,Word RAM,words,3,"p: 3,
n: 3,
m+n: 3",$O(p + n)$,"https://dl.acm.org/doi/10.1145/74697.74702, Same space complexity as Hunt and Szymanski.",0.0,1.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics
252,4.0,Longest Common Subsequence,2.0,LCS,44.0,,,1,1,"O(sn + \min\{r(n - r ), rm\})",,,[https://link.springer.com/chapter/10.1007/3-540-60044-2_53 Rick (1995)],Rick,1995,https://link.springer.com/chapter/10.1007/3-540-60044-2_53,,,,1.0,-,5,"s: 3,
n: 3,
r: 3,
m: 3,
m+n: 5","O(sn + \min\{r(n - r ), rm\})","$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$s$: size of alphabet",m+n,,,Word RAM,words,3,"p: 3,
n: 3,
s: 3,
m+n: 3",$O(sn + p)$,https://link.springer.com/chapter/10.1007/3-540-60044-2_53,0.0,1.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics
253,4.0,Longest Common Subsequence,2.0,LCS,46.0,,,1,1,O(rn + n \log n),,,[https://dl.acm.org/citation.cfm?id=322044 Hirschberg (1977)],Hirschberg,1977,https://dl.acm.org/citation.cfm?id=322044,,,,1.0,-,5,"r: 3,
n: 4,
m+n: 5",O(rn + n \log n),"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match",m+n,,,Word RAM,words,3,"p: 3,
n: 3,
m+n: 3",$O(n + p)$,https://link.springer.com/content/pdf/10.1007/BF01840365.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics
254,4.0,Longest Common Subsequence,2.0,LCS,47.0,,,1,1,O(rm \log(n/m) + rm),,,[https://www.sciencedirect.com/science/article/pii/0022000084900254 Hsu and Du (Scheme 1) (1984)],Hsu and Du (Scheme 1),1984,https://www.sciencedirect.com/science/article/pii/0022000084900254,,,,0.0,-,5,"r: 3,
m: 3,
n: 2,
m+n: 5",O(rm \log(n/m) + rm),"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS",m+n,,,Word RAM,words,5,"r: 3,
m: 3,
m+n: 5",$O(rm)$,https://www.sciencedirect.com/science/article/pii/0022000084900254,0.0,1.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics
255,4.0,Longest Common Subsequence,2.0,LCS,48.0,,,1,1,O(rm + sn + n \log s),,,[https://link.springer.com/article/10.1007/BF01840365 Apostolico and Guerra (Algorithm 2) (1987)],Apostolico and Guerra (Algorithm 2),1987,https://link.springer.com/article/10.1007/BF01840365,,,,1.0,-,5,"r: 3,
m: 3,
s: 3,
n: 3,
m+n: 5",O(rm + sn + n \log s),"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$s$: size of alphabet",m+n,,,Word RAM,words,3,"p: 3,
n: 3,
s: 3,
m+n: 3",$O(p + sn)$,https://link.springer.com/content/pdf/10.1007/BF01840365.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics
256,4.0,Longest Common Subsequence,2.0,LCS,49.0,,,1,1,"O(sn + \min\{sp, rm\})",,,[https://dl.acm.org/doi/abs/10.5555/105582.105592 Chin and Poon (1991)],Chin and Poon,1991,https://dl.acm.org/doi/abs/10.5555/105582.105592,,,,0.0,-,5,"r: 3,
m: 3,
s: 3,
n: 3,
p: 4,
m+n: 5","O(sn + \min\{sp, rm\})","$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$s$: size of alphabet",m+n,,,Word RAM,words,3,"p: 3,
n: 3,
m+n: 3",$O(p + n)$,"https://link.springer.com/content/pdf/10.1007/3-540-58338-6_63.pdf, Fig. 3",0.0,0.0,,0,,0,,0,0,,0,0,https://link.springer.com/content/pdf/10.1007/3-540-58338-6_63.pdf,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics
257,4.0,Longest Common Subsequence,2.0,LCS,50.0,,,1,1,O(n(m-r)),,,[https://link.springer.com/article/10.1007/BF00264437 Nakatsu et al. (1982)],Nakatsu et al.,1982,https://link.springer.com/article/10.1007/BF00264437,,,,0.0,-,5,"n: 3,
m: 3,
m+n: 5",O(n(m-r)),"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS",m+n,,,Word RAM,words,5,"m: 5,
m+n: 5",$O(m^2)$,"https://link.springer.com/content/pdf/10.1007/3-540-58338-6_63.pdf, Fig. 3",0.0,0.0,,0,,0,,0,0,,0,0,https://link.springer.com/content/pdf/10.1007/3-540-58338-6_63.pdf,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics
258,4.0,Longest Common Subsequence,2.0,LCS,51.0,,,1,1,O(n(m-r)),,,[https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.4380151102 Miller and Myers (1985)],Miller and Myers,1985,https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.4380151102,,,,0.0,-,5,"n: 3,
m: 3,
m+n: 5",O(n(m-r)),"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS",m+n,,,Word RAM,words,5,"m: 5,
m+n: 5",$O(m^2)$,Derived: Uses an upper triangular matrix $M$ that is size $(m + 1) \times (m + 1)$,1.0,0.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics
259,4.0,Longest Common Subsequence,2.0,LCS,52.0,,,1,1,O(n(m-r)),,,[https://publications.mpi-cbg.de/Wu_1990_6334.pdf Wu et al. (1990)],Wu et al.,1990,https://publications.mpi-cbg.de/Wu_1990_6334.pdf,,,,0.0,-,5,"n: 3,
m: 3,
m+n: 5",O(n(m-r)),"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS",m+n,,,Word RAM,words,5,"m: 5,
m+n: 5",$O(m^2)$?,Derived: Same as the above two,1.0,0.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics
260,18.0,Integer Factoring,2.0,First Category Integer Factoring,200.0,"For integers of the form $r^e \pm s$, for r and s relatively small",,1,1,$O(exp((1+o(1))(32n/9)^{(1/3)}(log n)^{(2/3)})$ heuristically?,,http://www.ams.org/notices/199612/pomerance.pdf,[ Special number field sieve (1940)],Special number field sieve,1940,,,,,0.0,0,8,n: 8,O(exp((1+o(1))(32n/9)^{(1/3)}(log n)^{(2/3)}) heuristically?,n: number of bits in number to factor,n,,,,bits,2.66,n: 2.66,O(n^{2/3}),http://www.ams.org/notices/199612/pomerance.pdf,0.0,0.0,,0,,0,,1,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,100.0,,10000.0,,1000000.0,,inf,1,,,,,,,,1,,,Numerical Analysis
261,19.0,Integer Factoring,2.0,Second Category Integer Factoring,205.0,,,1,1,$O(exp((1+o(1))(64n/9)^{(1/3)}(log n)^{(2/3)})$ heuristically?,,,[http://www.ams.org/notices/199612/pomerance.pdf General number field sieve (1996)],General number field sieve,1996,http://www.ams.org/notices/199612/pomerance.pdf,,,,0.0,0,8,n: 8,O(exp((1+o(1))(64n/9)^{(1/3)}(log n)^{(2/3)}) heuristically?,n: number of bits in number to factor,n,,,,bits,2.66,n: 2.66,O(n^{2/3}),http://www.ams.org/notices/199612/pomerance.pdf,0.0,1.0,,0,,0,,1,0,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,4,,,Numerical Analysis
262,22.0,String Search,2.0,Single String Search,238.0,,,1,1,O(n + m),,,[http://monge.univ-mlv.fr/~mac/Articles-PDF/CP-1991-jacm.pdf Two-way String-Matching Algorithm (1991)],Two-way String-Matching Algorithm,1991,http://monge.univ-mlv.fr/~mac/Articles-PDF/CP-1991-jacm.pdf,,,,0.0,0,3,"n: 3,
m: 3,
m+n: 3",O(n + m),"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,1,"n: 1,
m+n: 1",$O(1)$,http://monge.univ-mlv.fr/~mac/Articles-PDF/CP-1991-jacm.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics
263,22.0,String Search,2.0,Single String Search,239.0,,,1,1,O(mn),,,[- String-Matching with Finite Automata (1940)],String-Matching with Finite Automata,1940,-,,,,0.0,0,5,"n: 3,
m: 3,
m+n: 5",O(mn),"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,3,"m: 3,
m+n: 3",$O(m)$,Derived: $O(m)$ states in the DFA,1.0,0.0,,0,,0,,0,0,,0,0,https://www.geeksforgeeks.org/finite-automata-algorithm-for-pattern-searching/,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics
264,22.0,String Search,2.0,Single String Search,240.0,,,1,1,O(mn),,,[http://www.ijcte.org/papers/462-G1278.pdf Quick-Skip Searching (2012)],Quick-Skip Searching,2012,http://www.ijcte.org/papers/462-G1278.pdf,,,,0.0,0,5,"n: 3,
m: 3,
m+n: 5",O(mn),"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,3,"m: 3,
m+n: 3",$O(m)$,"Derived: Uses two tables, both of size $O(m)$",1.0,0.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,,,,,,,,,,4,,,Combinatorics
265,22.0,String Search,2.0,Single String Search,241.0,,,1,1,O(n+m)+ O(m+s),,,[https://thesai.org/Downloads/Volume8No6/Paper_15-Fast_Hybrid_String_Matching_Algorithm.pdf Fast Hybrid Algorithm (2017)],Fast Hybrid Algorithm,2017,https://thesai.org/Downloads/Volume8No6/Paper_15-Fast_Hybrid_String_Matching_Algorithm.pdf,4,1.0,https://thesai.org/Downloads/Volume8No6/Paper_15-Fast_Hybrid_String_Matching_Algorithm.pdf,1.0,4->6,3,"n: 3,
m: 3,
m+n: 3,
s: 3",O(n+m)+ O(m+s),"$m$: pattern length
$n$: length of searchable text
$s$: size of the alphabet",m+n,,,Word RAM,words,3,"m: 3,
m+n: 3",$O(m)$,"Derived: Uses three tables, each of size $O(m)$",1.0,0.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,1150.0,69.65217391,0.05665744313,1100050,72724.058,0.156481465,1100000050,72727269.51,0.2650274945,4,,,Combinatorics
266,22.0,String Search,2.0,Multiple String Search,244.0,"Automaton-based, constructs a converse state machine from the given patterns",,1,1,O(mn),,,[https://link.springer.com/chapter/10.1007/3-540-09510-1_10 Commentz-Walter Algorithm (1979)],Commentz-Walter Algorithm,1979,https://link.springer.com/chapter/10.1007/3-540-09510-1_10,,,,0.0,0,5,"n: 3,
m: 3,
m+n: 5",O(mn),"$m$: pattern length
$n$: length of searchable text
$k$: number of keywords",m+n,,,Word RAM,words,3,"m: 3,
k: 3,
m+n: 3",$O(km)$,Derived: Number of states of the automaton that is created,1.0,0.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics
267,22.0,String Search,2.0,Multiple String Search,245.0,"Automaton-based, finite automaton that tracks the partial prefix match",,1,1,O(n + m + z),,,[https://cr.yp.to/bib/1975/aho.pdf Aho–Corasick (AC) Algorithm (1975)],Aho–Corasick (AC) Algorithm,1975,https://cr.yp.to/bib/1975/aho.pdf,,,,0.0,0,3,"n: 3,
m: 3,
m+n: 3,
z: 3",O(n + m + z),"$m$: pattern length
$n$: length of searchable text
$k$: number of keywords
$z$: number of matches",m+n,,,Word RAM,words,3,"m: 3,
k: 3,
m+n: 3",$O(km)$,Derived: Number of states of the automaton that is created,1.0,0.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics
268,22.0,String Search,2.0,Single String Search,246.0,Bad-character heuristic,,1,1,O(n),Uniform distribution (over the given alphabet) of characters in the text and pattern,https://doi.org/10.1016/0304-3975(92)90133-Z,[https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.4380100608 Boyer-Moore-Horspool (BMH) (1980)],Boyer-Moore-Horspool (BMH),1980,https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.4380100608,,,,0.0,0,5,"n: 3,
m: 3,
m+n: 5",O(mn + s),"$m$: pattern length
$n$: length of searchable text
$s$: size of the alphabet",m+n,,,Word RAM,words,1,"s: 3,
m+n: 1",$O(s)$,Derived: Uses a bad-character shift table of size $O(s)$,1.0,0.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics
269,22.0,String Search,2.0,Single String Search,247.0,Slight variation of BMH,,1,1,O(n),Uniform distribution (over the given alphabet) of characters in the text and pattern,https://doi.org/10.1016/0304-3975(92)90133-Z,[https://www.cin.ufpe.br/~paguso/courses/if767/bib/Raita_1992.pdf Raita Algorithm (1991)],Raita Algorithm,1991,https://www.cin.ufpe.br/~paguso/courses/if767/bib/Raita_1992.pdf,,,,0.0,0,5,"n: 3,
m: 3,
m+n: 5,
s: 3",O(mn + s),"$m$: pattern length
$n$: length of searchable text
$s$: size of the alphabet",m+n,,,Word RAM,words,1,"s: 3,
m+n: 1",$O(s)$,Derived: Uses a bad-character shift table of size $O(s)$,1.0,0.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics
270,22.0,String Search,2.0,Single String Search,248.0,Automaton-based oracle,,1,1,O(m) + O(mn),,,[https://link.springer.com/chapter/10.1007/3-540-47849-3_18 BOM (Backward Oracle Matching) (1999)],BOM (Backward Oracle Matching),1999,https://link.springer.com/chapter/10.1007/3-540-47849-3_18,,,,0.0,0,5,"n: 3,
m: 3,
m+n: 5",O(m) + O(mn),"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,3,"m: 3,
m+n: 3",$O(m)$,https://link.springer.com/content/pdf/10.1007/3-540-47849-3_18.pdf,0.0,1.0,,0,,0,,0,0,,0,0,https://www-igm.univ-mlv.fr/~lecroq/string/bom.html,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics
271,22.0,String Search,2.0,Single String Search,249.0,Variant of BM,,1,1,O(m + s) + O(n),,,[https://docs.lib.purdue.edu/cgi/viewcontent.cgi?article=1456&context=cstech&sei-redir=1 Apostolico–Giancarlo Algorithm (1986)],Apostolico–Giancarlo Algorithm,1986,https://docs.lib.purdue.edu/cgi/viewcontent.cgi?article=1456&context=cstech&sei-redir=1,,,,0.0,0,3,"n: 3,
m: 3,
m+n: 3,
s: 3",O(m + s) + O(n),"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,3,"m: 3,
m+n: 3",$O(m)$,https://docs.lib.purdue.edu/cgi/viewcontent.cgi?article=1456&context=cstech&sei-redir=1,0.0,1.0,,0,,0,,0,0,,0,0,http://www.darkridge.com/~jpr5/mirror/string/node16.html,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics
272,23.0,Sequence Alignment,1.0,"Edit Sequence, constant-size alphabet",258.0,,,1,1,O(mn),,,[https://www.ncbi.nlm.nih.gov/pubmed/9254694 Gapped BLAST (1997)],Gapped BLAST,1997,https://www.ncbi.nlm.nih.gov/pubmed/9254694,,,,0.0,0,5,"n: 3,
m: 3,
m+n: 5",O(mn),"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"n: 5,
m: 3,
m+n: 5",O(mn)?,"Uses at most a constant number of O(m)*O(n) arrays, whose contents are of size O(1)",1.0,0.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000.0,1,,,,,,,,4,,,Bioinformatics
273,23.0,Sequence Alignment,1.0,"Edit Sequence, constant-size alphabet",259.0,,,1,1,O(mn),,,[https://www.ncbi.nlm.nih.gov/pubmed/2231712 Basic Local Alignment Search Tool (BLAST) (1990)],Basic Local Alignment Search Tool (BLAST),1990,https://www.ncbi.nlm.nih.gov/pubmed/2231712,,,,0.0,0,5,"n: 3,
m: 3,
m+n: 5",O(mn),"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"n: 5,
m: 3,
m+n: 5",O(mn)?,"Uses at most a constant number of O(m)*O(n) arrays, whose contents are of size O(1)",1.0,0.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000.0,1,,,,,,,,4,,,Bioinformatics
274,24.0,Joins,1.0,,262.0,,,1,1,O(nm),,,[- Nested loop join (1960)],Nested loop join,1960,-,1,1.0,https://docs.oracle.com/cd/E17952_01/mysql-5.7-en/nested-loop-joins.html,1.0,0,5,"n: 3,
m: 3,
m+n: 5",O(nm),"n, m: sizes of input tables",m+n,,,Word RAM,words,1,"n: 1,
m+n: 1",O(1),Just need to keep track of which rows are being checked,1.0,0.0,,0,,0,,0,0,,0,0,https://docs.oracle.com/cd/E17952_01/mysql-5.7-en/nested-loop-joins.html,"An SQL join clause - corresponding to a join operation in relational algebra
 - combines columns from one or more tables in a relational database.",,,"n:m
1:1",,,,,,,250000.0,1,,250000000000,1,,2.5E+17,1,,4,,,Databases
275,24.0,Joins,1.0,,263.0,,,1,1,O(nlogn + mlogm),,,[- Sort merge join (1960)],Sort merge join,1960,-,,,,1.0,4->5,4,"n: 3,
m: 3,
m+n: 4",O(nlogn + mlogm),"n, m: sizes of input tables",m+n,,,Word RAM,words,3,"n: 3,
m: 3,
m+n: 3",O(n+m)?,Need sorted lists of indices of input tables,1.0,0.0,,0,,0,,0,0,,0,0,https://use-the-index-luke.com/sql/join/sort-merge-join,"An SQL join clause - corresponding to a join operation in relational algebra
 - combines columns from one or more tables in a relational database.",,,"n:m
1:1",,,,,,,8960.0,27.90178571,26.90178571,18931568.57,13205.45622,13204.45622,28897352854,8651311.463,8651310.463,4,,,Databases
276,24.0,Joins,1.0,,264.0,,,1,1,O(n+m),,,[- Hash join (1960)],Hash join,1960,-,2,1.0,http://neuyilan.github.io/2018/01/04/hash%20join算法总结/Hash%20Join%20Algorithms.pdf,1.0,5->6,3,"n: 3,
m: 3,
m+n: 3",O(n+m),"n, m: sizes of input tables",m+n,,,Word RAM,words,3,"n: 3,
m: 3,
m+n: 3",O(n+m)?,Need a hash table of at least that size,1.0,0.0,,0,,0,,0,0,,0,0,https://dev.mysql.com/doc/refman/8.0/en/hash-joins.html,"An SQL join clause - corresponding to a join operation in relational algebra
 - combines columns from one or more tables in a relational database.",,,"n:m
1:1",,,,,,,1000.0,250,249.0,1000000,250000,249999.0,1000000000,250000000,249999999.0,4,,,Databases
277,28.0,Maximum Cardinality Matching,1.0,Bipartite Graph MCM,284.0,,,1,1,O(VE),,,[https://www.cambridge.org/core/journals/canadian-journal-of-mathematics/article/maximal-flow-through-a-network/5D6E55D3B06C4F7B1043BC1D82D40764 Ford–Fulkerson algorithm (1956)],Ford–Fulkerson algorithm,1956,https://www.cambridge.org/core/journals/canadian-journal-of-mathematics/article/maximal-flow-through-a-network/5D6E55D3B06C4F7B1043BC1D82D40764,,,,1.0,0,6,"V: 6,
E: 3",O(VE),"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),creating new graph and using it as input to the Ford-Fulkerson algorithm,1.0,0.0,,0,,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,"V:E
1:1",500.0,,500000.0,,500000000.0,,250000.0,1,,250000000000,1,,2.5E+17,1,,4,,"http://www.cs.kent.edu/~dragan/GraphAn/p23-galil.pdf

https://hal.archives-ouvertes.fr/hal-01740403/document",Combinatorics
278,28.0,Maximum Cardinality Matching,1.0,Bipartite Graph MCM,285.0,,,1,1,$O((V^0.5)E)$,,,[https://epubs.siam.org/doi/10.1137/0202019 Hopcroft–Karp algorithm (1973)],Hopcroft–Karp algorithm,1973,https://epubs.siam.org/doi/10.1137/0202019,,,,1.0,0,5.5,"V: 5.5,
E: 3",O((V^0.5)E),"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,V: 3,O(V),"maximal set of vertex-disjoint shortest augmenting paths uses O(V) space to store, taking symmetric difference also uses O(V) space",1.0,0.0,,0,,0,,0,0,,0,0,for PDF: https://web.eecs.umich.edu/~pettie/matching/Hopcroft-Karp-bipartite-matching.pdf,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,500.0,,500000.0,,500000000.0,,,,,,,,,,,4,,,Combinatorics
279,28.0,Maximum Cardinality Matching,1.0,Bipartite Graph MCM,287.0,,,1,1,$O(V^{(omega/2)})$ where omega is the exponent on matrix multiplication,,,[https://link.springer.com/article/10.1007/s00453-005-1187-5 Mucha; Sankowski (planar) (2006)],Mucha; Sankowski (planar),2006,https://link.springer.com/article/10.1007/s00453-005-1187-5,,,,1.0,0,4.1864298,V: 4.1864298,O(V^{(\omega/2)}) where omega is the exponent on matrix multiplication,"V: number of vertices
E: number of edges",V,,,Word RAM,words,4,V: 4,O(V \log V)???,Paper mentions matrices with O(VlogV) nonempty entries; unclear if there are any other space-consuming objects (on first passthrough) as planar graphs only require O(V) space,0.0,1.0,,1,Monte Carlo,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,1608.334452,155.4403063,0.1061939347,5893541.76,42419.31426,0.2375172828,21596151485,11576136.62,0.3844308644,4,,,Combinatorics
280,28.0,Maximum Cardinality Matching,2.0,Bipartite Graph MCM,288.0,Based on electric flows,,1,1,O(E^{(10/7)}*polylog(V)),,,[https://arxiv.org/abs/1307.2205 Madry's algorithm (2013)],Madry's algorithm,2013,https://arxiv.org/abs/1307.2205,,,,0.0,0,5.857,"V: 5.857,
E: 4.42857",O(E^{10/7}*polylog(V)),"V: number of vertices
E: number of edges",V,https://arxiv.org/abs/1307.2205,0.0,Word RAM,words,5,"V: 5,
E: 3",O(E + V),Derived: Uses an augmented graph (copy of the original graph plus an additional node with edges between it and all other nodes),1.0,0.0,,0,,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,,,,,,,,,,4,,,Combinatorics
281,28.0,Maximum Cardinality Matching,1.0,Bipartite Graph MCM,289.0,,,1,1,"$O(min(V*k, E)+sqrt(k)*min(k^2, E))$",,,[https://arxiv.org/abs/1105.1569 Chandran and Hochbaum (2011)],Chandran and Hochbaum,2011,https://arxiv.org/abs/1105.1569,,,,0.0,0,3,"V: 3,
E: 3,
k: 5.5","O(min(V*k, E)+sqrt(k)*min(k^2, E))","V: number of vertices
E: number of edges
(k: size of maximum matching)",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E)??,Designs a flow network and runs pseudoflow algorithms on graph; space can be reused if too many residual graphs are created,1.0,0.0,,1,,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,,,,,,,,,,4,,,Combinatorics
282,28.0,Maximum Cardinality Matching,1.0,General Graph MCM,290.0,,,1,1,O((V^{0.5})E),,,[https://web.eecs.umich.edu/~pettie/matching/Blum-matching-ICALP90.pdf Blum (1990)],Blum,1990,https://web.eecs.umich.edu/~pettie/matching/Blum-matching-ICALP90.pdf,,,,0.0,0,5.5,"V: 5.5,
E: 3",O((V^{0.5})E),"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E)??,"Each phase, creates a separate directed graph and solves a reachability problem on it. Can reuse space across phases",1.0,0.0,,0,,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,,,,,,,,,,4,,,Combinatorics
283,28.0,Maximum Cardinality Matching,1.0,General Graph MCM,291.0,,,1,1,O((V^{0.5})E),,,[https://web.eecs.umich.edu/~pettie/matching/Gabow-Tarjan-scaling-general-graph-matching.pdf Gabow; Tarjan (1991)],Gabow; Tarjan,1991,https://web.eecs.umich.edu/~pettie/matching/Gabow-Tarjan-scaling-general-graph-matching.pdf,,,,0.0,0,5.5,"V: 5.5,
E: 3",O((V^{0.5})E),"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E)?,https://web.eecs.umich.edu/~pettie/matching/Gabow-Tarjan-scaling-general-graph-matching.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,,,,,,,,,,4,,,Combinatorics
284,28.0,Maximum Cardinality Matching,1.0,General Graph MCM,292.0,,,1,1,O(V^{2.376}),,,"[https://ieeexplore.ieee.org/document/1366244 Mucha, Sankowski (general) (2004)]","Mucha, Sankowski (general)",2004,https://ieeexplore.ieee.org/document/1366244,,,,0.0,0,5.376,V: 5.376,O(V^{2.376}),"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,V: 5,O(V^2)??,Algorithm uses/manipulates constant number of matrices and graphs?,1.0,0.0,,1,Monte Carlo,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,,,,,,,,,,4,,,Combinatorics
285,28.0,Maximum Cardinality Matching,2.0,Planar Bipartite Graph Perfect Matching,293.0,,,1,1,O(V^{(4/3)} logV),,,[http://theory.stanford.edu/~virgi/cs267/papers/planar-sssp.pdf Klein (section 5) (1997)],Klein (section 5),1997,http://theory.stanford.edu/~virgi/cs267/papers/planar-sssp.pdf,,,,1.0,0,4.33,V: 4.33,O(V^{(4/3)} logV),"V: number of vertices
E: number of edges",V,,,Word RAM,words,4.33,V: 4.33,O(V^{(4/3)})?,"Considers and operates on a graph partition (which still takes up $O(E)=O(V)$ space), and computes shortest-path distances within each graph partition, the total of which requires $O(V^{(4/3)})$ space",1.0,0.0,,0,,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,34851.25256,7.173343327,0.04923135134,719145396.2,347.6348473,0.1533964681,10727244188189,23305.14675,0.2779775233,4,,,Combinatorics
286,29.0,Key Exchange,1.0,Key Exchange,294.0,,,1,1,O(mult(n)*n) where mult(n) is running time on n-bit multiplication,"Not sure if ""average case"" distribution makes sense here",(none),[https://ieeexplore.ieee.org/document/1055638 Diffie–Hellman key exchange (1978)],Diffie–Hellman key exchange,1978,https://ieeexplore.ieee.org/document/1055638,2,1.0,https://dl.acm.org/doi/10.1145/359460.359473,1.0,0,7,n: 7,O(mult(n)*n) where mult(n) is running time on n-bit multiplication,"n: maximum size of numbers (prime, base, keys), in bits",n,,,Word RAM?,bits,3,n: 3,O(n),Each party only keeps track of a constant number of n-bit integers,1.0,0.0,,0,,0,,0,0,,0,0,,"Key exchange (also key establishment) is a method in cryptography by which cryptographic keys are exchanged between two parties, allowing use of a cryptographic algorithm.",,,,,,,,,,62500000000.0,1,,6.25E+22,1,,6.25E+34,1,,2,,,Cryptography
287,29.0,Key Exchange,1.0,Key Exchange,295.0,,,1,1,O(mult(n)*n^2)? where mult(n) is running time on n-bit multiplication,^see above,(none),[https://csrc.nist.gov/publications/detail/sp/800-56a/revised/archive/2007-03-14 Elliptic-curve Diffie-Hellman (ECDH) (2006)],Elliptic-curve Diffie-Hellman (ECDH),2006,https://csrc.nist.gov/publications/detail/sp/800-56a/revised/archive/2007-03-14,2,1.0,,0.0,0,7,n: 7,O(mult(n)*n^2)? where mult(n) is running time on n-bit multiplication,"n: maximum size of numbers (prime, parameters, keys), in bits",n,,,Word RAM?,bits,3,n: 3,O(n),Each party only keeps track of a constant number of n-bit integers,1.0,0.0,,0,,0,,0,0,,0,0,,"Key exchange (also key establishment) is a method in cryptography by which cryptographic keys are exchanged between two parties, allowing use of a cryptographic algorithm.",,,,,,,,,,125000000.0,500,,1.25E+17,500000,,1.25E+26,500000000,,2,,,Cryptography
288,30.0,Mutual Exclusion,1.0,,297.0,,,1,1,O(n),^see above,(none),[https://zoo.cs.yale.edu/classes/cs323/doc/Peterson.pdf Peterson's algorithm (1981)],Peterson's algorithm,1981,https://zoo.cs.yale.edu/classes/cs323/doc/Peterson.pdf,,,,0.0,0,3,n: 3,O(n),n: number of processes,n,,,,communication variables?,3,n: 3,$O(n)$ total,"see original paper (""requires $2n-1$ shared variables of size $n$"")",0.0,1.0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000.0,1,,,,,,,,6,,,Operating Systems
289,30.0,Mutual Exclusion,1.0,,303.0,,,1,1,O(logn),^see above,(none),[https://www.sciencedirect.com/science/article/abs/pii/S0743731596900416 Naimi-Trehel's algorithm (1996)],Naimi-Trehel's algorithm,1996,https://www.sciencedirect.com/science/article/abs/pii/S0743731596900416,,,,0.0,0,2,n: 2,O(\log n),n: number of processes,n,,,,communication variables?,3,n: 3,"$O(1)$ per process, $O(n)$ total?",Each process keeps track of a constant number of variables (see algorithm description),1.0,0.0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,9.965,100.3512293,,,,,,,,6,,,Operating Systems
290,30.0,Mutual Exclusion,1.0,,305.0,,,1,1,O(logn),^see above,(none),[https://ieeexplore.ieee.org/document/113817 Chan-Singhal-Liu (1990)],Chan-Singhal-Liu,1990,https://ieeexplore.ieee.org/document/113817,,,,0.0,0,2,n: 2,O(\log n),n: number of processes,n,,,,communication variables?,3,n: 3,"$O(1)$ per process, $O(n)$ total?",Each process seems to keep track of a constant number of variables (see algorithm description),1.0,0.0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,9.965,100.3512293,0.3338136837,19.93156857,50171.66594,0.966883593,29.89735285,33447777.3,1.953064644,6,,,Operating Systems
291,31.0,SDD Systems Solvers,2.0,Exact Laplacian Solver,319.0,Use Gaussian elimination to compute the inverse of the Laplacian to solve for x,,1,1,O(n^3),,,[- Gaussian Elimination (-150)],Gaussian Elimination,-150,-,1,1.0,,1.0,1->3,4.5,"n: 6,
n^2: 4.5",O(n^3),n: dimension of the matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Derived: Storing the inverse of the Laplacian,1.0,0.0,,0,,0,,0,0,,0,0,https://pdfs.semanticscholar.org/e31c/0ce119f452e1804461c375f9814a6050519b.pdf,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,1000000000.0,Inf,,1E+18,Inf,,1E+27,Inf,,1,,,Numerical Analysis
292,31.0,SDD Systems Solvers,2.0,Exact Laplacian Solver,320.0,Explicitly calculating the inverse of the Laplacian to solve for x,,1,1,O(n!),,,[- Naive Implementation (1940)],Naive Implementation,1940,-,1,1.0,,1.0,0,8,"n: 8,
n^2: 8",O(n!),n: dimension of matrix,n^2,,,Word RAM,Word RAM,3,"n: 5,
n^2: 3",O(n^2),Derived: The Leibniz formula for the determinant of the Laplacian can be computed with constant space. The adjugate matrix of the Laplacian takes $n^2$ space.,1.0,0.0,,0,,0,,0,0,,0,0,,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis
293,32.0,Cycle Detection,1.0,,321.0,,,1,1,O((\lambda + \mu) t_f),"S = {0, ..., N-1}
F = {f | f: S -> S}
f chosen randomly from the N^N functions in F
",,[http://pds7.egloos.com/pds/200801/07/29/p636-floyd.pdf Floyd's tortoise and hare algorithm (1967)],Floyd's tortoise and hare algorithm,1967,http://pds7.egloos.com/pds/200801/07/29/p636-floyd.pdf,3,0.0,https://www.semanticscholar.org/paper/The-Complexity-of-Finding-Cycles-in-Periodic-Sedgewick-Szymanski/8f1e5d92733380112a44630d0561611121c3228d,1.0,0,3,"\lambda: 3,
\mu: 3,
t_f: 3",O((\lambda + \mu) t_f),"t_f: time to perform one evaluation of f
\mu: the starting index of the cycle
\lambda: the period of the cycle",\mu,,,,Pointer algo,1,\mu: 1,O(1),Algorithmic Cryptanalysis,0.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Cycle_detection,"cycle detection or cycle finding is the algorithmic problem of finding a cycle
 in a sequence of iterated function values.",,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Combinatorics
294,32.0,Cycle Detection,1.0,,322.0,,,1,1,O((\lambda + \mu) t_f),,,[https://maths-people.anu.edu.au/~brent/pd/rpb005.pdf Brent's algorithm (1973)],Brent's algorithm,1973,https://maths-people.anu.edu.au/~brent/pd/rpb005.pdf,,,,0.0,0,3,"\lambda: 3,
\mu: 3,
t_f: 3",O((\lambda + \mu) t_f),"t_f: time to perform one evaluation of f
\mu: the starting index of the cycle
\lambda: the period of the cycle",\mu,,,,Pointer algo,1,\mu: 1,O(1),Algorithmic Cryptanalysis,0.0,0.0,,0,,0,,0,0,,0,0,,"cycle detection or cycle finding is the algorithmic problem of finding a cycle
 in a sequence of iterated function values.",,,,,,,,,,1000.0,,,,,,,,,6,,,Combinatorics
295,32.0,Cycle Detection,1.0,,323.0,,,1,1,O((\lambda + \mu) log(\lambda + \mu) t_f),,,[https://www.inwap.com/pdp10/hbaker/hakmem/flows.html#item132 Gosper's algorithm (1978)],Gosper's algorithm,1978,https://www.inwap.com/pdp10/hbaker/hakmem/flows.html#item132,,,,0.0,0,4,"\lambda: 4,
\mu: 4,
t_f: 3",O((\lambda + \mu) log(\lambda + \mu) t_f),"t_f: time to perform one evaluation of f
\mu: the starting index of the cycle
\lambda: the period of the cycle",\mu,,,,,2,"\mu: 2,
\lambda: 2",\Theta(log(\mu + \lambda)),https://en.wikipedia.org/wiki/Cycle_detection#Gosper's_algorithm,0.0,0.0,,0,,0,,0,0,,0,0,,"cycle detection or cycle finding is the algorithmic problem of finding a cycle
 in a sequence of iterated function values.",,,,,,,,,,1000.0,,,,,,,,,6,,,Combinatorics
296,33.0,Generating Random Permutations,2.0,General Permutations,326.0,,,1,1,O(n^2),From randomness in the algorithm itself,(none),[https://www.worldcat.org/title/statistical-tables-for-biological-agricultural-and-medical-research/oclc/14222135 Fisher–Yates/Knuth shuffle (1938)],Fisher–Yates/Knuth shuffle,1938,https://www.worldcat.org/title/statistical-tables-for-biological-agricultural-and-medical-research/oclc/14222135,,,,0.0,0,5,n: 5,O(n^2),n: number of elements,n,,,Word RAM,words,3,n: 3,O(n),Need to keep track of which elements have been struck out already,1.0,0.0,,1,??,0,,0,0,,0,0,https://digital.library.adelaide.edu.au/dspace/handle/2440/10701,Generating random permutation of an input string.,,,,,,,,,,1000.0,,,,,,,,,6,,,Numerical Analysis
297,33.0,Generating Random Permutations,2.0,General Permutations,327.0,,,1,1,O(n),^see above,(none),[https://dl.acm.org/doi/10.1145/364520.364540 Durstenfeld's Algorithm 235 (1964)],Durstenfeld's Algorithm 235,1964,https://dl.acm.org/doi/10.1145/364520.364540,,,,0.0,0,3,n: 3,O(n),n: number of elements,n,,,Word RAM,words,1,n: 1,O(1),Essentially in-situ,1.0,0.0,,1,??,0,,0,0,,0,0,,Generating random permutation of an input string.,,,,1.0,0.3335214322,1.0,0.77827941,1.0,1.371373706,1000.0,,,,,,,,,6,,,Numerical Analysis
298,33.0,Generating Random Permutations,2.0,General Permutations,328.0,,,1,1,O(n),^see above,(none),[- Radix sorting method (1887)],Radix sorting method,1887,-,4,1.0,https://www.geeksforgeeks.org/radix-sort/,1.0,0,3,n: 3,O(n),n: number of elements,n,,,Word RAM,words,3,n: 3,O(n),"Need to keep track of randomly generated numbers, but otherwise see radix sort",1.0,0.0,,1,??,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Radix_sort,Generating random permutation of an input string.,,,,1000.0,,1000000.0,,1000000000.0,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Numerical Analysis
299,33.0,Generating Random Permutations,2.0,Cyclic Permutations,329.0,,,1,1,O(n),^see above,(none),[https://www.sciencedirect.com/science/article/abs/pii/0020019086900736 Sattolo's algorithm (1986)],Sattolo's algorithm,1986,https://www.sciencedirect.com/science/article/abs/pii/0020019086900736,,,,0.0,0,3,n: 3,O(n),n: number of elements,n,,,Word RAM,words,1,n: 1,O(1),Essentially in-situ,1.0,0.0,,1,??,0,,0,0,,0,0,,Generating random permutation of an input string.,,,,,,,,,,1000000.0,,,,,,,,,6,,,Numerical Analysis
300,34.0,Convex Optimization (Non-linear),1.0,ILP;MILPs,330.0,,0.0,1,1,"O(2^n*poly(n, m))? (previously O(n^3))",,,[https://www.cs.uleth.ca/~benkoczi/OR/read/cutting-stock-LP.pdf Gomory's cutting method (1953)],Gomory's cutting method,1953,https://www.cs.uleth.ca/~benkoczi/OR/read/cutting-stock-LP.pdf,2,1.0,http://www.math.wsu.edu/faculty/genz/364/lessons/l603.pdf,1.0,0,8,"n: 8,
m: 7","O(2^n*poly(n, m))? (previously O(n^3))","n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word/Real RAM,words,3,"n: 3,
m: 5",O(nm+m^2),"See simplex algorithm, but also O(m) variables and constraints are introduced",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Ralph_E._Gomory,Convex optimization is a subfield of mathematical optimization that studies the problem of minimizing convex functions over convex sets.,,,,,,,,,,1000000000.0,1,,1E+18,1,,1E+27,1,,3,,,Numerical Analysis
301,34.0,Convex Optimization (Non-linear),1.0,"General, Constrained optimization",331.0,,0.0,1,1,O(n^4),,,[https://link.springer.com/content/pdf/10.1007/BFb0120703.pdf Wolfe; Lemaréchal; Kiwiel (1964)],Wolfe; Lemaréchal; Kiwiel,1964,https://link.springer.com/content/pdf/10.1007/BFb0120703.pdf,,,,0.0,0,7,n: 7,O(n^4),"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
L: 3",O(n+L)??,"keeps track of current guess x^{(k)}, and computes bundle G^{(k)}, direction d^{(k)}, and scalar t^{(k)}?",1.0,0.0,,0,,0,,0,0,,0,0,,Convex optimization is a subfield of mathematical optimization that studies the problem of minimizing convex functions over convex sets.,,,,,,,,,,1000000000000.0,,,,,,,,,3,,,Numerical Analysis
302,34.0,Convex Optimization (Non-linear),1.0,"General, Constrained optimization",332.0,,0.0,1,1,O(n^2 logn),,,[https://www.sciencedirect.com/science/article/abs/pii/0041555380900610 Ellipsoid method (1971)],Ellipsoid method,1971,https://www.sciencedirect.com/science/article/abs/pii/0041555380900610,,,,1.0,0,5.01,n: 5.01,O(n^2 \log n),"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 3,
L: 3",O(nmL),see orginal paper (noting that O(alpha*log(H*alpha)) = O(L)),0.0,1.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Ellipsoid_method,Convex optimization is a subfield of mathematical optimization that studies the problem of minimizing convex functions over convex sets.,,,,,,,,,,9965784.285,100.3433319,0.2917956166,19931568569324,50171.66594,0.8244694033,2.98974E+19,33447777.3,1.618306015,3,,,Numerical Analysis
303,34.0,Convex Optimization (Non-linear),1.0,"General, Constrained optimization",333.0,,0.0,1,1,O(n^2 ),,,[https://www.springer.com/gp/book/9783642821202 Subgradient method (1981)],Subgradient method,1981,https://www.springer.com/gp/book/9783642821202,1,1.0,https://en.wikipedia.org/wiki/Subgradient_method,1.0,3->4,5,n: 5,O(n^2 ),"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word/Real RAM,words,3,"n: 3,
L: 3",O(n+L)?,"keep track of current guess x^{(k)}, and needs to compute subgradient g^{(k)}",1.0,0.0,,0,,0,,0,0,,0,0,,Convex optimization is a subfield of mathematical optimization that studies the problem of minimizing convex functions over convex sets.,,,,,,,,,,1000000.0,1000,0.279802214,1000000000000,1000000,0.637893707,1E+18,1000000000,1.096179992,3,,,Numerical Analysis
304,34.0,Convex Optimization (Non-linear),1.0,Stochastic optimization,334.0,,0.0,1,1,O(n^2),,,[ Dual subgradients and the drift-plus-penalty method (1993)],Dual subgradients and the drift-plus-penalty method,1993,,,,,0.0,0,5,n: 5,O(n^2),"n: number of variables
m: number of constraints
V: weight parameter (and average queue size)
L: length of input, in bits",n,,,Word/Real RAM,words,3,"n: 3,
m: 3,
V: 3",O(Vmn)????,involves minimizing an expression with up to O(Vmn) terms per iteration?,1.0,0.0,,0,,0,,0,0,,0,0,,Convex optimization is a subfield of mathematical optimization that studies the problem of minimizing convex functions over convex sets.,,,,,,,,,,1000000.0,,,,,,,,,3,,,Numerical Analysis
305,35.0,Gröbner Bases,1.0,Gröbner Bases,335.0,,,1,1,d^{(2^{(n+o(1)))}},,,[https://dl.acm.org/doi/10.1145/1088216.1088219 Buchberger's algorithm (1976)],Buchberger's algorithm,1976,https://dl.acm.org/doi/10.1145/1088216.1088219,2,0.0,https://dl.acm.org/doi/pdf/10.1145/1088216.1088219,1.0,0,8,n: 8,d^{(2^{(n+o(1)})}),"n: number of variables in each polynomial
d: maximal total degree of the polynomials",n,,,Word RAM,words,8,"n: 8,
d: 7",d^{(2^{(n+o(1))})}??,"Output may contain that many elements. However, this bound seems very crude/loose",1.0,0.0,,0,,0,,0,0,,0,0,"EXPSPACE-hard reference: ""Complexity of Gröbner basis detection and border basis detection""","In mathematics, and more specifically in computer algebra, computational algebraic geometry, and computational commutative algebra, a Gröbner basis is a particular kind of generating set of an ideal in a polynomial ring K[x1, ..,xn] over a field K. ",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,turns out this is EXPSPACE hard: https://www.sciencedirect.com/science/article/pii/S0304397512007505,,Numerical Analysis
306,35.0,Gröbner Bases,1.0,Gröbner Bases,336.0,,,1,1,"O(C(n+D_{reg}, D_{reg})^{\omega}) where omega is the exponent on matrix multiplication",,,[https://linkinghub.elsevier.com/retrieve/pii/S0022404999000055 Faugère F4 algorithm (1999)],Faugère F4 algorithm,1999,https://linkinghub.elsevier.com/retrieve/pii/S0022404999000055,1,1.0,https://reader.elsevier.com/reader/sd/pii/S0022404999000055?token=DC73BE34D9F12491D472CE3BBE70B5745448C6F5A27E99595808DA4B6E66531C37C9B7D23A7AFD7419D27DC7F06396F7,1.0,0,8,n: 8,"O(C(n+D_{reg}, D_{reg})^{\omega}) where omega is the exponent on matrix multiplication","n: number of variables in each polynomial
D_reg: smallest degree for which a nontrivial relation occurs",n,,,Word RAM,words,8,n: 8,"O(C(n+D_{reg}, D_{reg})^2)?","Seems to keep track of a square matrix (for monomials) of size $O(C(n+D_{reg}, D_{reg})^2$)",1.0,0.0,,0,,0,,0,0,,0,0,https://eprint.iacr.org/2021/051.pdf,"In mathematics, and more specifically in computer algebra, computational algebraic geometry, and computational commutative algebra, a Gröbner basis is a particular kind of generating set of an ideal in a polynomial ring K[x1, ..,xn] over a field K. ",,,"d:n
1:400",,,,,,,1000000000.0,Inf,,1E+18,Inf,,1E+27,Inf,,1,,,Numerical Analysis
307,35.0,Gröbner Bases,1.0,Gröbner Bases,337.0,,,1,1,"O(C(n+D_{reg}, D_{reg})^{\omega}) where omega is the exponent on matrix multiplication",,,[https://dl.acm.org/doi/10.1145/780506.780516 Faugère F5 algorithm (2002)],Faugère F5 algorithm,2002,https://dl.acm.org/doi/10.1145/780506.780516,,,,0.0,0,8,n: 8,"O(C(n+D_{reg}, D_{reg})^{\omega}) where omega is the exponent on matrix multiplication","n: number of variables in each polynomial
D_reg: smallest degree for which a nontrivial relation occurs",n,,,Word RAM,words,8,n: 8,"O(C(n+D_{reg}, D_{reg})^2)?","Seems to keep track of a square matrix (for monomials) of size $O(C(n+D_{reg}, D_{reg})^2$)",1.0,0.0,,0,,0,,0,0,,0,0,https://hal.inria.fr/hal-01064519/document,"In mathematics, and more specifically in computer algebra, computational algebraic geometry, and computational commutative algebra, a Gröbner basis is a particular kind of generating set of an ideal in a polynomial ring K[x1, ..,xn] over a field K. ",,,,,,,,,,,,,,,,,,,1,,,Numerical Analysis
308,36.0,Minimum value in each row of an implicitly-defined totally monotone matrix,1.0,,338.0,,,1,1,O(nm),,,[- Naive algorithm (1940)],Naive algorithm,1940,-,1,1.0,,1.0,0,3,"n: 3,
m: 3,
mn: 3",O(mn),"n, m: dimensions of matrix; assume m≥n
possibly uses a function f to define entries; assume evaluation of f takes time O(1)",mn,,,Word RAM,words,1,"n: 1,
mn: 1",$O(1)$,"Only needs to keep track of current minimum in current row - once done with a row, can send stored minimum to output and recycle space",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,250000.0,1,,250000000000,1,,2.5E+17,1,,4,,,Combinatorics
309,36.0,Minimum value in each row of an implicitly-defined totally monotone matrix,1.0,,339.0,,,1,1,O(n(1+log(n/m))),,,[https://link.springer.com/article/10.1007/BF01840359 SMAWK algorithm (1987)],SMAWK algorithm,1987,https://link.springer.com/article/10.1007/BF01840359,0.25,0.0,https://link.springer.com/content/pdf/10.1007/BF01840359.pdf,1.0,4->6,2.51,"n: 4,
m: 1.5,
mn: 2.51",O(n(1+\log(n/m))),"n, m: dimensions of matrix; assume m≥n
possibly uses a function f to define entries; assume evaluation of f takes time O(1)",mn,,,Word RAM,words,2.5,"n: 3,
mn: 2.5",$O(n)$?,Need to keep track of which columns aren't pruned. Also uses $O(n)$ auxiliary space during prune-and-search?,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,250,0.1246567656,1000000,250000,0.3027161207,1000000000,250000000,0.5089664179,4,,,Combinatorics
310,37.0,All Permutations,2.0,All Permutations,340.0,,,1,1,amortized O(1) per permutation,averaged over all permutations,https://dl.acm.org/doi/10.1145/356689.356692,[https://www.ams.org/journals/mcom/1963-17-083/S0025-5718-1963-0159764-2/home.html Steinhaus–Johnson–Trotter algorithm (1963)],Steinhaus–Johnson–Trotter algorithm,1963,https://www.ams.org/journals/mcom/1963-17-083/S0025-5718-1963-0159764-2/home.html,2,1.0,https://en.wikipedia.org/wiki/Steinhaus–Johnson–Trotter_algorithm,1.0,4->6,3,n: 3,O(n) on specific permutations,n: number of elements,n,,,Word RAM,words,1,n: 1,$O(1)$,Determining $x_i$ and $y_i$ each iteration can be done in constant space,1.0,0.0,,0,,0,,0,0,,0,0,,All permutations of an input string.,,,,1.0,1.682695795,1.0,6.19685673,1.0,18.30697729,1000.0,1000,,1000000,1000000,,1000000000,1000000000,,4,,,Numerical Analysis
311,37.0,All Permutations,2.0,All Permutations,341.0,,,1,1,amortized O(1) per permutation,averaged over all permutations,(napkin math - number of iterations is approximately e*n!),[https://mathscinet.ams.org/mathscinet-getitem?mr=0080380 Tompkins–Paige algorithm (1956)],Tompkins–Paige algorithm,1956,https://mathscinet.ams.org/mathscinet-getitem?mr=0080380,1,1.0,https://en.wikipedia.org/wiki/Tompkins–Paige_algorithm,1.0,0,3,n: 3,O(n) on specific permutations,n: number of elements,n,,,Word RAM,words,3,n: 3,$O(n)$,Keeps track of auxiliary counting array,1.0,0.0,,0,,0,,0,0,,0,0,,All permutations of an input string.,,,,1000.0,,1000000.0,,1000000000.0,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Numerical Analysis
312,37.0,All Permutations,2.0,All Permutations,342.0,,,1,1,O(1) per permutation,averaged over all permutations,Easily derived (each permutation takes O(1) time) ,[https://academic.oup.com/comjnl/article/6/3/293/360213 Heap's algorithm (1963)],Heap's algorithm,1963,https://academic.oup.com/comjnl/article/6/3/293/360213,,,,0.0,0,3,n: 3,O(n) per permutation,n: number of elements,n,,,Word RAM,words,3,n: 3,$O(n)$,$O(n)$-sized stack or array necessary,1.0,0.0,,0,,0,,0,0,,0,0,,All permutations of an input string.,,,,,,,,,,1000.0,,,,,,,,,4,,,Numerical Analysis
313,38.0,Optimal Binary Search Trees,2.0,Alphabetic Tree Problem,343.0,,,1,1,O(n \log n),,,[https://epubs.siam.org/doi/abs/10.1137/0206045 Garsia–Wachs algorithm (1977)],Garsia–Wachs algorithm,1977,https://epubs.siam.org/doi/abs/10.1137/0206045,,,,0.0,0,4,n: 4,O(n \log n),n: number of elements,n,,,Word RAM,words,3,n: 3,$O(n)$,"https://epubs.siam.org/doi/epdf/10.1137/0206045, See implementation of MINTREE",0.0,1.0,,0,,0,,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,9965.0,,,,,,,,,1,,,Combinatorics
314,38.0,Optimal Binary Search Trees,2.0,Alphabetic Tree Problem,344.0,,,1,1,O(n \log n),,,[https://epubs.siam.org/doi/10.1137/0121057 Hu–Tucker algorithm (1971)],Hu–Tucker algorithm,1971,https://epubs.siam.org/doi/10.1137/0121057,4,0.0,https://epubs.siam.org/doi/10.1137/0121057,1.0,4->5,4,n: 4,O(n \log n),n: number of elements,n,,,Word RAM,words,3,n: 3,$O(n)$,https://epubs.siam.org/doi/10.1137/0121057,0.0,1.0,,0,,0,,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,9965.0,Inf,,19931568.57,Inf,,29897352854,Inf,,1,,,Combinatorics
315,38.0,Optimal Binary Search Trees,2.0,OBST,345.0,,,1,1,O(n^2),,,[https://www.cs.bgu.ac.il/~michaluz/seminar/Knuth71.pdf Modified Knuth's DP algorithm (1970)],Modified Knuth's DP algorithm,1970,https://www.cs.bgu.ac.il/~michaluz/seminar/Knuth71.pdf,,,,1.0,3->4,5,n: 5,O(n^2),n: number of elements,n,,,Word RAM,words,5,n: 5,$O(n^2)$,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4492658,0.0,0.0,,0,,0,,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,1000000.0,Inf,,1000000000000,Inf,,1E+18,Inf,,1,,,Combinatorics
316,38.0,Optimal Binary Search Trees,2.0,OBST,346.0,,,1,1,O(n^3),,,[https://www.cs.bgu.ac.il/~michaluz/seminar/Knuth71.pdf Knuth's DP algorithm (1970)],Knuth's DP algorithm,1970,https://www.cs.bgu.ac.il/~michaluz/seminar/Knuth71.pdf,,,,1.0,1->3,6,n: 6,O(n^3),n: number of elements,n,,,Word RAM,words,5,n: 5,$O(n^2)$,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4492658,0.0,0.0,,0,,0,,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,1000000000.0,Inf,,1E+18,Inf,,1E+27,Inf,,1,,,Combinatorics
317,38.0,Optimal Binary Search Trees,1.0,OBST,347.0,,,1,1,O(4^n /n \sqrt{n}),,,[https://www.cs.bgu.ac.il/~michaluz/seminar/Knuth71.pdf Naive algorithm (1940)],Naive algorithm,1940,https://www.cs.bgu.ac.il/~michaluz/seminar/Knuth71.pdf,1,1.0,,1.0,0,8,n: 8,O(4^n /n \sqrt{n}),n: number of elements,n,,,Word RAM,words,1,n: 1,$O(1)$,Derived: Constant space to verify optimality. Constant space if you can enumerate the trees in-situ.,1.0,0.0,,0,,0,,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
318,38.0,Optimal Binary Search Trees,2.0,OBST,349.0,,,1,1,O(n^2),,,[https://doi.org/10.1137/0603055 Yao (1982)],Yao,1982,https://doi.org/10.1137/0603055,,,,0.0,0,5,n: 5,O(n^2),n: number of elements,n,,,Word RAM,words,5,n: 5,$O(n^2)$,https://doi.org/10.1137/0603055,0.0,1.0,,0,,0,,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,1000000.0,,,,,,,,,1,,,Combinatorics
319,39.0,Nash Equilibria,1.0,2-player,355.0,,,1,1,2^{(O(n+m))} (previously O(n^4)????),,,[https://epubs.siam.org/doi/abs/10.1137/0112033?journalCode=smjmap.1 Lemke–Howson algorithm (1964)],Lemke–Howson algorithm,1964,https://epubs.siam.org/doi/abs/10.1137/0112033?journalCode=smjmap.1,1,1.0,"https://web.stanford.edu/~saberi/lecture4.pdf
https://ieeexplore.ieee.org/document/4031395",1.0,0,8,"n: 8,
m: 8,
mn: 8",2^{(O(n+m))} (previously O(n^4)????),"n, m: dimensions of payoff matrices",mn,,,Word RAM,words,3,"n: 3,
m: 3,
mn: 3",O(mn)?,,1.0,0.0,,0,,0,,0,0,,0,0,,"In game theory, the Nash equilibrium, named after the mathematician John Forbes Nash Jr., is a proposed solution of a non-cooperative game involving two or more players in which each player is assumed to know the equilibrium strategies of the other players, and no player has anything to gain by changing only his own strategy.",,,,,,,,,,1000000000000.0,1,,1E+24,1,,1E+36,1,,2,,,Robotics
320,40.0,Maximum-Weight Matching,1.0,Bipartite Maximum-Weight Matching,357.0,,,1,1,O(n^4),,,[https://web.eecs.umich.edu/~pettie/matching/Kuhn-hungarian-assignment.pdf Hungarian algorithm (1955)],Hungarian algorithm,1955,https://web.eecs.umich.edu/~pettie/matching/Kuhn-hungarian-assignment.pdf,2,1.0,https://web.eecs.umich.edu/~pettie/matching/Kuhn-hungarian-assignment.pdf,1.0,0,7,n: 7,O(n^4),n: number of vertices,n,,,Word RAM,words,5,n: 5,O(n^2),Either graph interpretation maintains O(n^2) orientations and O(n) potential or matrix interpretation manipulates an O(n)*O(n) auxiliary matrix,1.0,0.0,,0,,0,,0,0,,0,0,,"In computer science, the maximum weight matching problem is the problem of finding, in a weighted graph, a matching in which the sum of weights is maximized.",,,,,,,,,,1000000000000.0,1,,1E+24,1,,1E+36,1,,2,,,Combinatorics
321,40.0,Maximum-Weight Matching,1.0,Maximum-Weight Matching,358.0,,,1,1,O(mn^2),,,[https://nvlpubs.nist.gov/nistpubs/jres/69B/jresv69Bn1-2p125_A1b.pdf Edmonds (1965)],Edmonds,1965,https://nvlpubs.nist.gov/nistpubs/jres/69B/jresv69Bn1-2p125_A1b.pdf,1,1.0,,0.0,0,7,"n: 7,
m: 3",O(mn^2),"n: number of vertices
m: number of edges",n,,,Word RAM,words,7,"n: 7,
m: 3",O(mn^2)??,"At worst, keeps track of the entire sequence of graphs created; it's possible this can be improved?",1.0,0.0,,0,,0,,0,0,,0,0,,"In computer science, the maximum weight matching problem is the problem of finding, in a weighted graph, a matching in which the sum of weights is maximized.",,,,,,,,,,1000000000.0,1000,,1E+18,1000000,,1E+27,1000000000,,2,,,Combinatorics
322,41.0,Constructing Eulerian Trails in a Graph,1.0,Constructing Eulerian Trails in a Graph,362.0,,,1,1,O(E^2),,,[https://collaborate.princeton.edu/en/publications/a-note-on-finding-the-bridges-of-a-graph Fleury's algorithm + Tarjan (1974)],Fleury's algorithm + Tarjan,1974,https://collaborate.princeton.edu/en/publications/a-note-on-finding-the-bridges-of-a-graph,,,,0.0,0,7,"V: 7,
E: 5",O(E^2),"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),Keep track of current path + remaining edges needed to be traversed,1.0,0.0,,0,,0,,0,0,,0,0,,"In graph theory, an Eulerian trail (or Eulerian path) is a trail in a finite graph that visits every edge exactly once (allowing for revisiting vertices). Similarly, an Eulerian circuit or Eulerian cycle is an Eulerian trail that starts and ends on the same vertex.",,,,,,,,,,,,,,,,,,,6,,,Combinatorics
323,41.0,Constructing Eulerian Trails in a Graph,2.0,Constructing Eulerian Trails in a Graph,363.0,,,1,1,O(E),Any distribution of values,(need to read entire input),[- Hierholzer's algorithm (1873)],Hierholzer's algorithm,1873,-,3,1.0,https://www.geeksforgeeks.org/hierholzers-algorithm-directed-graph/,1.0,0,5,"V: 5,
E: 3",O(E),"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),Keep track of current path + remaining edges needed to be traversed,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Eulerian_path#Fleury's_algorithm,"In graph theory, an Eulerian trail (or Eulerian path) is a trail in a finite graph that visits every edge exactly once (allowing for revisiting vertices). Similarly, an Eulerian circuit or Eulerian cycle is an Eulerian trail that starts and ends on the same vertex.",,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Combinatorics
324,41.0,Constructing Eulerian Trails in a Graph,1.0,Constructing Eulerian Trails in a Graph,364.0,,,1,1,O(E log^3(E) loglogE),,,[https://www.cs.princeton.edu/courses/archive/spr10/cos423/handouts/NearOpt.pdf Fleury's algorithm + Thorup (2000)],Fleury's algorithm + Thorup,2000,https://www.cs.princeton.edu/courses/archive/spr10/cos423/handouts/NearOpt.pdf,,,,0.0,0,5.03,"V: 5.03,
E: 4.01",O(E \log^3(E) \log\log E),"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),Keep track of current path + remaining edges needed to be traversed,1.0,0.0,,0,,0,,0,0,,0,0,,"In graph theory, an Eulerian trail (or Eulerian path) is a trail in a finite graph that visits every edge exactly once (allowing for revisiting vertices). Similarly, an Eulerian circuit or Eulerian cycle is an Eulerian trail that starts and ends on the same vertex.",,,,,,,,,,,,,,,,,,,6,,,Combinatorics
325,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,365.0,,,1,1,O(n^2),Any distribution of values,(same general behavior for all inputs),[- Naive algorithm (1965)],Naive algorithm,1965,-,1,1.0,https://ccrma.stanford.edu/~jos/mdft/,1.0,0,5,n: 5,O(n^2),$n$: length of the input data set,n,,,Word/Real RAM,words,1,n: 1,$O(1)$,Derived: You only need a constant number of variables that are of $O(1)$ size at any given time,1.0,0.0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Signal Processing
326,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,366.0,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/S0025-5718-1965-0178586-1.pdf Cooley–Tukey algorithm (1965)],Cooley–Tukey algorithm,1965,https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/S0025-5718-1965-0178586-1.pdf,3,0.0,https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/S0025-5718-1965-0178586-1.pdf,1.0,4->5,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes and keeps track of DFTs for recursive subcases,1.0,0.0,,0,,0,,0,0,,0,0,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1055938,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965.0,100.3512293,0.2024330587,19931568.57,50171.66594,0.5417655625,29897352854,33447777.3,0.9997453266,4,,,Signal Processing
327,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,367.0,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/document/1162805 Rader–Brenner algorithm (1976)],Rader–Brenner algorithm,1976,https://ieeexplore.ieee.org/document/1162805,,,,0.0,0,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes and keeps track of DFTs for recursive subcases,1.0,0.0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965.0,,,,,,,,,4,,,Signal Processing
328,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,368.0,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/document/1163036/ Bruun's FFT algorithm (1978)],Bruun's FFT algorithm,1978,https://ieeexplore.ieee.org/document/1163036/,,,,0.0,0,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes O(n) remainders per stage; storage space can be reused across stages,1.0,0.0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965.0,,,,,,,,,4,,,Signal Processing
329,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,369.0,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[https://dl.acm.org/citation.cfm?id=1476610 Yavne Split Radix FFT algorithm (1968)],Yavne Split Radix FFT algorithm,1968,https://dl.acm.org/citation.cfm?id=1476610,,,,0.0,0,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes and keeps track of DFTs for recursive subcases,1.0,0.0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965.0,,,,,,,,,4,,,Signal Processing
330,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,370.0,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[http://cis.rit.edu/class/simg716/FFT_Fun_Profit.pdf Gentleman; Morven and Gordon Sande radix-4 algorithm (1966)],Gentleman; Morven and Gordon Sande radix-4 algorithm,1966,http://cis.rit.edu/class/simg716/FFT_Fun_Profit.pdf,,,,0.0,0,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes and keeps track of DFTs for recursive subcases,1.0,0.0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965.0,,,,,,,,,4,,,Signal Processing
331,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,371.0,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/document/1162043 Bergland; Glenn radix-8 algorithm (1969)],Bergland; Glenn radix-8 algorithm,1969,https://ieeexplore.ieee.org/document/1162043,,,,0.0,0,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n),https://ieeexplore.ieee.org/document/1162043,0.0,1.0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965.0,,,,,,,,,4,,,Signal Processing
332,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,372.0,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/document/917698 Extended Split Radix FFT algorithm (2001)],Extended Split Radix FFT algorithm,2001,https://ieeexplore.ieee.org/document/917698,,,,0.0,0,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes and keeps track of DFTs for recursive subcases,1.0,0.0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965.0,,,,,,,,,4,,,Signal Processing
333,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,373.0,,,1,1,O(n (logn)^2),Any distribution of values,(same general behavior for all inputs),[https://dl.acm.org/doi/10.1145/236869.236882  Von zur Gathen-Gerhard additive FFT (1996)], Von zur Gathen-Gerhard additive FFT,1996,https://dl.acm.org/doi/10.1145/236869.236882,,,,0.0,0,4.01,n: 4.01,O(n (\log n)^2),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n),https://dl.acm.org/doi/10.1145/236869.236882,0.0,1.0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,,,,,,,,,,4,,,Signal Processing
334,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,374.0,,,1,1,O(n(logn)^{1.585}),Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/document/1926/ Wang-Zhu-Cantor additive FFT (1988)],Wang-Zhu-Cantor additive FFT,1988,https://ieeexplore.ieee.org/document/1926/,,,,0.0,0,4.00585,n: 4.00585,O(n(\log n)^{1.585}),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes O(n) remainders per stage; storage space can be reused across stages,1.0,0.0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,,,,,,,,,,4,,,Signal Processing
335,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,375.0,,,1,1,O(n logn loglogn),Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5625613 Gao’s additive FFT (2010)],Gao’s additive FFT,2010,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5625613,,,,0.0,0,4.001,n: 4.001,O(n logn loglogn),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n),https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5625613,0.0,1.0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,,,,,,,,,,4,,,Signal Processing
336,43.0,Line Drawing,2.0,Line Drawing,376.0,,,1,1,O(n),not well-defined,(none),[- Naive algorithm (1940)],Naive algorithm,1940,-,1,1.0,,1.0,0,3,n: 3,O(n),n: number of pixels the line goes through,n,,,Word RAM?,words?,1,n: 1,O(1),Constant number of O(1)-word-sized variables (for determining which pixels to shade) is sufficient,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Line_drawing_algorithm,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Image Processing
337,43.0,Line Drawing,2.0,Line Drawing,377.0,,,1,1,O(n),not well-defined,(none),[- Digital Differential Analyzer (1940)],Digital Differential Analyzer,1940,-,,,,0.0,0,3,n: 3,O(n),n: number of pixels the line goes through,n,,,Word RAM?,words?,1,n: 1,O(1),Constant number of O(1)-word-sized variables (for determining which pixels to shade) is sufficient,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Digital_differential_analyzer_(graphics_algorithm),,,,,,,,,,,1000.0,,,,,,,,,6,,,Image Processing
338,43.0,Line Drawing,2.0,Line Drawing,378.0,,,1,1,O(n),not well-defined,(none),[https://web.archive.org/web/20080528040104/http://www.research.ibm.com/journal/sj/041/ibmsjIVRIC.pdf Bresenham's line algorithm (1965)],Bresenham's line algorithm,1965,https://web.archive.org/web/20080528040104/http://www.research.ibm.com/journal/sj/041/ibmsjIVRIC.pdf,,,,0.0,0,3,n: 3,O(n),n: number of pixels the line goes through,n,,,Word RAM?,words?,1,n: 1,O(1),Constant number of O(1)-word-sized variables (for determining which pixels to shade) is sufficient,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Image Processing
339,43.0,Line Drawing,2.0,Line Drawing,379.0,,,1,1,O(n),not well-defined,(none),[http://www-users.mat.umk.pl/~gruby/teaching/lgim/1_wu.pdf Xiaolin Wu's line algorithm (1991)],Xiaolin Wu's line algorithm,1991,http://www-users.mat.umk.pl/~gruby/teaching/lgim/1_wu.pdf,,,,0.0,0,3,n: 3,O(n),n: number of pixels the line goes through,n,,,Word RAM?,words?,1,n: 1,O(1),Constant number of O(1)-word-sized variables (for determining which pixels to shade and what shading to use) is sufficient,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Image Processing
340,43.0,Line Drawing,2.0,Line Drawing,380.0,,,1,1,O(n),not well-defined,(none),[http://www.cs.gettysburg.edu/~ilinkin/courses/Fall-2014/cs373/handouts/papers/gs-fegsd-81.pdf Gupta-Sproull algorithm (1981)],Gupta-Sproull algorithm,1981,http://www.cs.gettysburg.edu/~ilinkin/courses/Fall-2014/cs373/handouts/papers/gs-fegsd-81.pdf,,,,0.0,0,3,n: 3,O(n),n: number of pixels the line goes through,n,,,Word RAM?,words?,1,n: 1,O(1),Constant number of O(1)-word-sized variables (for determining which pixels to shade and what shading to use) is sufficient,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Image Processing
341,44.0,Polygon Clipping,1.0,Polygon Clipping with Arbitrary Clipping Polygon,381.0,,,1,1,O(nlogn),,,[http://davis.wpi.edu/~matt/courses/clipping/ Greiner–Hormann clipping algorithm (1998)],Greiner–Hormann clipping algorithm,1998,http://davis.wpi.edu/~matt/courses/clipping/,2,1.0,https://www.inf.usi.ch/hormann/papers/Greiner.1998.ECO.pdf,1.0,4->5,5,n: 5,O(n^2) ?,n: maximum number of sides of either input polygon or clipping polygon,n,,,Word/Real RAM,words,5,n: 5,O(n^2)?,Needs to keep track of (possibly) $O(n^2)$ intersection points,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,100.3512293,,19931568.57,50171.66594,,29897352854,33447777.3,,4,,,Image Processing
342,44.0,Polygon Clipping,1.0,Polygon Clipping with Convex Clipping Polygon,382.0,,,1,1,O(n^2),,,[https://dl.acm.org/doi/10.1145/360767.360802 Sutherland–Hodgman algorithm (1974)],Sutherland–Hodgman algorithm,1974,https://dl.acm.org/doi/10.1145/360767.360802,1,1.0,https://dl.acm.org/doi/pdf/10.1145/360767.360802,1.0,0,5,n: 5,O(n^2),n: maximum number of sides of either input polygon or clipping polygon,n,,,Word/Real RAM,words,3,n: 3,O(n),"Each iteration, keeps track of updated polygon after clipping by a side. Note that there can be at most $O(n)$ intersection points due to the clipping polygon being convex",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Image Processing
343,44.0,Polygon Clipping,1.0,Polygon Clipping with Arbitrary Clipping Polygon,383.0,,,1,1,O(nlogn),,,[https://dl.acm.org/doi/10.1145/129902.129906 Vatti clipping algorithm (1992)],Vatti clipping algorithm,1992,https://dl.acm.org/doi/10.1145/129902.129906,,,,0.0,0,5,n: 5,O(n^2) ?,n: maximum number of sides of either input polygon or clipping polygon,n,,,Word/Real RAM,words,5,n: 5,O(n^2)?,Needs to keep track of (possibly) $O(n^2)$ intersection points,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,4,,,Image Processing
344,44.0,Polygon Clipping,1.0,Polygon Clipping with Arbitrary Clipping Polygon,384.0,,,1,1,O(n^2),,,[https://www.cs.drexel.edu/~david/Classes/CS430/HWs/p214-weiler.pdf Weiler–Atherton clipping algorithm (1977)],Weiler–Atherton clipping algorithm,1977,https://www.cs.drexel.edu/~david/Classes/CS430/HWs/p214-weiler.pdf,,,,0.0,0,5,n: 5,O(n^2),n: maximum number of sides of either input polygon or clipping polygon,n,,,Word/Real RAM,words,5,n: 5,O(n^2)?,Needs to keep track of (possibly) $O(n^2)$ intersection points,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Image Processing
345,47.0,Eigenvalues (Iterative Methods),1.0,Any eigenvalue,401.0,,0.0,1,1,O(n^2),,,[- Bisection method (1985)],Bisection method,1985,-,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2)?,Computing characteristic polynomial takes $O(n^2)$ space (via e.g. Faddeev–LeVerrier algorithm); rest of algo can be done in $O(n)$ space (related to root computation),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis
346,47.0,Eigenvalues (Iterative Methods),1.0,Any eigenvalue,402.0,,0.0,1,1,O(n^2),,,[- Laguerre iteration (1940)],Laguerre iteration,1940,-,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2)?,^ see above,1.0,0.0,,0,,0,,0,0,,0,0,https://archive.org/details/numericalmethods00form,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis
347,50.0,Coset Enumeration,1.0,Coset Enumeration,423.0,,,1,1,O(2^n),,,[https://www.cambridge.org/core/journals/proceedings-of-the-edinburgh-mathematical-society/article/practical-method-for-enumerating-cosets-of-a-finite-abstract-group/0306574AD958F694A0A8339338348AA1 Todd–Coxeter algorithm (1936)],Todd–Coxeter algorithm,1936,https://www.cambridge.org/core/journals/proceedings-of-the-edinburgh-mathematical-society/article/practical-method-for-enumerating-cosets-of-a-finite-abstract-group/0306574AD958F694A0A8339338348AA1,1,1.0,https://www.cambridge.org/core/services/aop-cambridge-core/content/view/0306574AD958F694A0A8339338348AA1/S0013091500008221a.pdf/practical_method_for_enumerating_cosets_of_a_finite_abstract_group.pdf,1.0,0,8,n: 8,O(2^n),"n: number of generators
g: order of group (possibly exponential in n)
k: number of relations
c: maximum number of generators multiplied together in a relation",n,,,Word RAM?,words,8,"g: 3,
k: 3,
c: 3,
n: 8",O(gkc),"Defines O(k) tables, each with O(g) columns and O(c) rows",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis
348,50.0,Coset Enumeration,1.0,Coset Enumeration,424.0,,,1,1,O(2^n),,,[ Haselgrove-Leech-Trotter (HLT) algorithm (1940)],Haselgrove-Leech-Trotter (HLT) algorithm,1940,,,,,0.0,0,8,n: 8,O(2^n),"n: number of generators
g: order of group (possibly exponential in n)
k: number of relations
c: maximum number of generators multiplied together in a relation",n,,,Word RAM?,words,8,"n: 8,
g: 3",O(ng)?,Implementation stores a table whose number of required registers is the product of the number of generators (n) and the number of cosets (O(g)),1.0,0.0,,0,,0,,0,0,,0,0,https://www.cambridge.org/core/journals/mathematical-proceedings-of-the-cambridge-philosophical-society/article/coset-enumeration-on-digital-computers/047323FB9415ACF3466E627590ABB790,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis
349,50.0,Coset Enumeration,1.0,Coset Enumeration,425.0,,,1,1,O(1.5^n n^2 logn),,,[https://www.cs.tufts.edu/~nr/cs257/archive/don-knuth/knuth-bendix.pdf Knuth–Bendix algorithm (1970)],Knuth–Bendix algorithm,1970,https://www.cs.tufts.edu/~nr/cs257/archive/don-knuth/knuth-bendix.pdf,1,1.0,,1.0,0,8,n: 8,O(1.5^n n^2 logn),"n: number of generators
g: order of group (possibly exponential in n)
k: number of relations
c: maximum number of generators multiplied together in a relation",n,,,Word RAM?,words,8,"n: 8,
g: 3",O(ng)???,Can store a table whose number of required registers is the product of the number of generators (n) and the number of cosets (O(g)),1.0,0.0,,0,,0,,0,0,,0,0,https://www.win.tue.nl/~mvdbrand/courses/seminar/0809/papers/ag-genesis.pdf,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis
350,51.0,Maximum Likelihood Parameters,1.0,,426.0,,0.0,1,1,O(n^3),,,[https://www.jstor.org/stable/2984875 Expectation–maximization (EM) algorithm (1977)],Expectation–maximization (EM) algorithm,1977,https://www.jstor.org/stable/2984875,,,,0.0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta and Z guesses, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis
351,51.0,Maximum Likelihood Parameters,1.0,,427.0,,0.0,1,1,O(n^3),,,[- Newton–Raphson algorithm (1685)],Newton–Raphson algorithm,1685,-,,,,1.0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 5",O(n+r^2)?,"Stores current theta guess, which is updated each iteration, and requires computation of the (inverse of the) Hessian matrix. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Newton%27s_method

https://web.mit.edu/10.001/Web/Course_Notes/NLAE/node6.html",,,,,,,,,,,1000000000.0,1,,1E+18,1,,1E+27,1,,3,,,Numerical Analysis
352,51.0,Maximum Likelihood Parameters,1.0,,428.0,,0.0,1,1,O(n^3),,,[https://www.jstor.org/stable/2337481 Parameter-expanded expectation maximization (PX-EM) algorithm (1998)],Parameter-expanded expectation maximization (PX-EM) algorithm,1998,https://www.jstor.org/stable/2337481,,,,0.0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta (+ alpha) and Z guesses, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis
353,51.0,Maximum Likelihood Parameters,1.0,,429.0,,0.0,1,1,O(n^2 logn),,,[https://arxiv.org/abs/1709.06970 Expectation conditional maximization (ECM) (2017)],Expectation conditional maximization (ECM),2017,https://arxiv.org/abs/1709.06970,,,,1.0,0,5.01,n: 5.01,O(n^2 \log n),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta and Z guesses, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.285,100.3433319,0.06167931846,19931568569324,50171.66594,0.1509194139,2.98974E+19,33447777.3,0.2523307814,3,,,Numerical Analysis
354,51.0,Maximum Likelihood Parameters,1.0,,430.0,,0.0,1,1,O(n^4 log^0.1.5n),,,[https://web.eecs.umich.edu/~fessler/papers/files/jour/94/web/fessler-94-sag.pdf Generalized expectation maximization (GEM) algorithm (1994)],Generalized expectation maximization (GEM) algorithm,1994,https://web.eecs.umich.edu/~fessler/papers/files/jour/94/web/fessler-94-sag.pdf,,,,0.0,0,7,n: 7,O(n^4 \log^{0.1}(.5n)),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta and Z guesses, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis
355,51.0,Maximum Likelihood Parameters,1.0,,431.0,,0.0,1,1,O(n^3),,,[https://dl.acm.org/doi/10.1109/TIT.2002.808105 α-EM algorithm (2003)],α-EM algorithm,2003,https://dl.acm.org/doi/10.1109/TIT.2002.808105,,,,0.0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta and Z guesses, which is updated each iteration. Also assumes description of alpha-log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis
356,52.0,Cardinality Estimation,2.0,,432.0,,0.0,1,1,O(N),,,[- Naive solution (1940)],Naive solution,1940,-,,,,1.0,0,3,N: 3,O(N),"N: number of values in multiset
n: cardinality of multiset (not known)",N,,,Word RAM,words,3,N: 3,O(n),"keep track of exact histogram, may require storing all values",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Numerical Analysis
357,53.0,Register Allocation,1.0,Global Register Allocation,439.0,RIG coloring,,1,1,O(n^2),,,[https://dl.acm.org/doi/10.1145/872726.806984 Chaitin's Algorithm (1981)],Chaitin's Algorithm,1981,https://dl.acm.org/doi/10.1145/872726.806984,,,,1.0,0,5,n: 5,O(n^2),$n$: number of live ranges (the number of candidates to reside in registers),n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: this algorithm uses both an adjacency matrix (called the bit matrix) and adjacency lists (called the adjacency vectors),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000000.0,,1000000000000.0,,1e+18,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Operating Systems
358,53.0,Register Allocation,1.0,Global Register Allocation,440.0,"Assumes all variables allocated in main memory (i.e. assumes no spill handling required).

Priority-based RIG coloring",,1,1,O(n^2),,,[https://dl.acm.org/doi/10.1145/502874.502896 Chow's Algorithm (1984)],Chow's Algorithm,1984,https://dl.acm.org/doi/10.1145/502874.502896,,,,0.0,0,5,n: 5,O(n^2),$n$: number of live ranges (the number of candidates to reside in registers),n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: this algorithm also uses a register interference graph (RIG),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Operating Systems
359,53.0,Register Allocation,2.0,Global Register Allocation,441.0,Greedy assignment,,1,1,O(n),,,"[http://web.cs.ucla.edu/~palsberg/course/cs132/linearscan.pdf Linear Scan, Poletto & Sarkar (1999)]","Linear Scan, Poletto & Sarkar",1999,http://web.cs.ucla.edu/~palsberg/course/cs132/linearscan.pdf,,,,1.0,4->6,3,n: 3,O(n),"$n$: number of live ranges (the number of candidates to reside in registers)
$r$: number of registers available",n,,,Word RAM,words,1,"r: 3,
n: 1",$O(r)$,"Derived: given the live ranges, the only auxiliary data structure is an ""active"" list that contains the active live ranges and this has length at most $r$",1.0,0.0,,0,,0,,1,0,,0,0,,,,,,1.0,1.15443469,1.0,3.641588834,1.0,9.0,1000.0,1000,0.4677992676,1000000,1000000,1.15443469,1000000000,1000000000,2.16227766,4,,,Operating Systems
360,54.0,Voronoi Diagrams,1.0,Voronoi Diagrams,445.0,,,1,1,O(nlogn),,,[http://www.wias-berlin.de/people/si/course/files/Fortune87-SweepLine-Voronoi.pdf Fortune's algorithm (1986)],Fortune's algorithm,1986,http://www.wias-berlin.de/people/si/course/files/Fortune87-SweepLine-Voronoi.pdf,,,,0.0,0,4,n: 4,O(n \log n),n: number of points,n,,,Word/Real RAM,words,3,n: 3,O(n),https://www.wias-berlin.de/people/si/course/files/Fortune87-SweepLine-Voronoi.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,5,,,Combinatorics
361,54.0,Voronoi Diagrams,1.0,Voronoi Diagrams,447.0,,,1,1,O(nlogn),,,[https://academic.oup.com/comjnl/article/24/2/167/338200 Bowyer–Watson algorithm (1981)],Bowyer–Watson algorithm,1981,https://academic.oup.com/comjnl/article/24/2/167/338200,,,,0.0,0,4,n: 4,O(n \log n),n: number of points,n,,,Word/Real RAM,words,3,n: 3,O(n),"Computes the Delaunay triangulation first (O(n) space), then uses that to generate the Voronoi diagram",1.0,0.0,,0,,0,,0,0,,0,0,https://academic.oup.com/comjnl/article/24/2/162/338193,,,,,,,,,,,9965.0,,,,,,,,,5,,,Combinatorics
362,55.0,Variance Calculations,2.0,,448.0,,0.0,1,1,O(n),Any distribution of values?,(need to read entire input),[- Naïve algorithm (1940)],Naïve algorithm,1940,-,1,1.0,,1.0,0,3,n: 3,O(n),n: number of values,n,,,Word/Real RAM,words,1,n: 1,O(1),"Maintain number of values, sum of values, and sum of squares of values",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Numerical Analysis
363,55.0,Variance Calculations,2.0,,449.0,,0.0,1,1,O(n),Any distribution of values?,(need to read entire input),[- Two-pass algorithm (1940)],Two-pass algorithm,1940,-,,,,0.0,0,3,n: 3,O(n),n: number of values,n,,,Word/Real RAM,words,1,n: 1,O(1),"Maintain number of values, sum of values, and sum of squares of (value minus mean) terms",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Numerical Analysis
364,55.0,Variance Calculations,2.0,,450.0,,0.0,1,1,O(n),Any distribution of values?,(need to read entire input),[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.302.7503&rep=rep1&type=pdf Welford's Online algorithm (1962)],Welford's Online algorithm,1962,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.302.7503&rep=rep1&type=pdf,,,,0.0,0,3,n: 3,O(n),n: number of values,n,,,Word/Real RAM,words,1,n: 1,O(1),"Maintains O(1) information (count, mean, M2) that is constantly updated as values are read",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Numerical Analysis
365,55.0,Variance Calculations,2.0,,451.0,,0.0,1,1,O(n),Any distribution of values?,(need to read entire input),[https://dl.acm.org/doi/10.1145/359146.359153 Weighted incremental algorithm (1979)],Weighted incremental algorithm,1979,https://dl.acm.org/doi/10.1145/359146.359153,,,,0.0,0,3,n: 3,O(n),n: number of values,n,,,Word/Real RAM,words,1,n: 1,O(1),"Maintains O(1) information (sum of weights, sum of squared weights, weighted sum of values, weighted sum of values squared) that is constantly updated as values are read",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Numerical Analysis
366,56.0,Topological Sorting,2.0,Topological Sorting,453.0,,,1,1,O(V+E),Any distribution of values?,(need to read entire input),[https://dl.acm.org/doi/10.1145/368996.369025 Kahn's algorithm (1962)],Kahn's algorithm,1962,https://dl.acm.org/doi/10.1145/368996.369025,1,1.0,,1.0,0,5,"V: 5,
E: 3",O(V+E),"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,V: 3,O(V),maintain stack of nodes with no incoming edges,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Combinatorics
367,56.0,Topological Sorting,2.0,Topological Sorting,454.0,,,1,1,O(V+E),Any distribution of values?,(need to read entire input),[https://link.springer.com/article/10.1007/BF00268499 Tarjan's DFS based algorithm (1976)],Tarjan's DFS based algorithm,1976,https://link.springer.com/article/10.1007/BF00268499,,,,0.0,0,5,"V: 5,
E: 3",O(V+E),"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,V: 3,O(V)?,"maintain O(V)-sized recursion stack, along with O(V) marks",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Combinatorics
368,57.0,DFA Minimization,2.0,DFA Minimization,456.0,,,1,1,O(n \log \log n),"Uniform distribution over all complete automota with $n$ states, using a specific strategy for Hopcroft's algorithm",https://arxiv.org/pdf/1010.5318.pdf,[https://www.cs.cmu.edu/~./sutner/CDM/papers/Hopcroft71.pdf Hopcroft's algorithm (1971)],Hopcroft's algorithm,1971,https://www.cs.cmu.edu/~./sutner/CDM/papers/Hopcroft71.pdf,,,,1.0,0,4,"n: 4,
k: 3",O(kn \log n),"$n$: number of states
$k$: size of alphabet",n,,,Word RAM,words,3,"k: 3,
n: 3",$O(kn)$,https://link.springer.com/content/pdf/10.1007/3-540-54430-5_107.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,996578.4285,1003.433319,0.5852553754,1993156857,50171.66594,1.057613978,2989735285399,33447777.3,2.174128351,1,,,Combinatorics
369,57.0,DFA Minimization,2.0,DFA Minimization,457.0,,,1,1,O(n \log \log n),Uniform distribution over all complete automota with $n$ states,https://doi.org/10.1007/978-3-642-15155-2_29,[https://doi.org/10.2307/2964500 Moore's algorithm (1956)],Moore's algorithm,1956,https://doi.org/10.2307/2964500,,,,1.0,0,5,"n: 5,
k: 3",O(n^2 k),"$n$: number of states
$k$: size of alphabet",n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: Auxiliary data structure that keeps track of a 'block' binary variable for each state,1.0,0.0,,0,,0,,0,0,,0,0,,,,,k=100,,,,,,,1000000000.0,1,,100000000000000,1,,1E+20,1,,1,,,Combinatorics
370,57.0,DFA Minimization,2.0,DFA Minimization,458.0,,,1,1,O(2^n),,,[https://www.semanticscholar.org/paper/Canonical-regular-expressions-and-minimal-state-for-Brzozowski/94def4233e1e8f15bab72e82708a03fd37233b14 Brzozowski's algorithm (1963)],Brzozowski's algorithm,1963,https://www.semanticscholar.org/paper/Canonical-regular-expressions-and-minimal-state-for-Brzozowski/94def4233e1e8f15bab72e82708a03fd37233b14,,,,0.0,0,8,n: 8,O(2^n),"$n$: number of states
$k$: size of alphabet",n,,,Word RAM,words,8,n: 8,$O(2^n)$,http://www.cs.ru.nl/bachelors-theses/2017/Erin_van_der_Veen___4431200___The_Practical_Performance_of_Automata_Minimization_Algorithms.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics
371,57.0,DFA Minimization,2.0,Acyclic DFA Minimization,459.0,,,1,1,O(n),,,[https://www.sciencedirect.com/science/article/pii/0304397592901423 Revuz's algorithm (1992)],Revuz's algorithm,1992,https://www.sciencedirect.com/science/article/pii/0304397592901423,,,,1.0,3->6,3,n: 3,O(n),"$n$: number of states
$d$: number of transitions
$k$: size of alphabet",n,,,Word RAM,words,3,n: 3,$O(n)$,https://www.labri.fr/perso/zeitoun/research/pdf/Almeida-Zeitoun-IPL2008.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1000000,0.4677992676,1000000,100000000,0.6681005372,1000000000,100000000000,1.020949938,1,,,Combinatorics
372,57.0,DFA Minimization,2.0,Cyclic Nontrivial SCCs DFA Minimization,460.0,,,1,1,O(n),,,[https://www.labri.fr/perso/zeitoun/research/pdf/Almeida-Zeitoun-IPL2008.pdf Almeida & Zeitoun (2008)],Almeida & Zeitoun,2008,https://www.labri.fr/perso/zeitoun/research/pdf/Almeida-Zeitoun-IPL2008.pdf,,,,0.0,0,3,n: 3,O(n),"$n$: number of states
$d$: number of transitions
$k$: size of alphabet",n,,,Word RAM,words,3,n: 3,$O(n)$,https://www.labri.fr/perso/zeitoun/research/pdf/Almeida-Zeitoun-IPL2008.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,1,,,Combinatorics
373,58.0,Lowest Common Ancestor,2.0,Off-Line Lowest Common Ancestor,461.0,,,1,1,O(n+m),Any distribution of values?,(need to read entire input + all queries),[https://www.semanticscholar.org/paper/Fast-Algorithms-for-Finding-Nearest-Common-Harel-Tarjan/8867d059dda279b1aed4a0301e4e46f9daf65174 Tarjan's off-line lowest common ancestors algorithm (1984)],Tarjan's off-line lowest common ancestors algorithm,1984,https://www.semanticscholar.org/paper/Fast-Algorithms-for-Finding-Nearest-Common-Harel-Tarjan/8867d059dda279b1aed4a0301e4e46f9daf65174,2,1.0,,1.0,0,3,"n: 3,
m: 3",O(n+m),"n: number of vertices
m: number of total number of operations (queries, links, and cuts)",n,,,Word RAM,words,3,n: 3,O(n),https://www.semanticscholar.org/paper/Fast-Algorithms-for-Finding-Nearest-Common-Harel-Tarjan/8867d059dda279b1aed4a0301e4e46f9daf65174,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Combinatorics
374,58.0,Lowest Common Ancestor,2.0,Lowest Common Ancestor with Static Trees,462.0,,,1,1,O(n+m),Any distribution of values?,(need to read entire input + all queries),[https://epubs.siam.org/doi/abs/10.1137/0217079?journalCode=smjcat Schieber; Vishkin (1988)],Schieber; Vishkin,1988,https://epubs.siam.org/doi/abs/10.1137/0217079?journalCode=smjcat,,,,0.0,0,3,"n: 3,
m: 3",O(n+m),"n: number of vertices
m: number of total number of operations (queries, links, and cuts)",n,,,Word RAM,words,3,n: 3,O(n),https://epubs.siam.org/doi/abs/10.1137/0217079?journalCode=smjcat,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Combinatorics
375,58.0,Lowest Common Ancestor,1.0,Lowest Common Ancestor with Static Trees,463.0,,,1,1,O(n+m) ?,Any distribution of values?,(need to read entire input + all queries),[https://apps.dtic.mil/dtic/tr/fulltext/u2/a227803.pdf Berkman; Vishkin (1993)],Berkman; Vishkin,1993,https://apps.dtic.mil/dtic/tr/fulltext/u2/a227803.pdf,,,,0.0,0,3,"n: 3,
m: 3",O(n+m) ?,"n: number of vertices
m: number of total number of operations (queries, links, and cuts)",n,,,Word RAM,words,3,n: 3,O(n),space bounded by pre-processing time,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Combinatorics
376,58.0,Lowest Common Ancestor,2.0,Lowest Common Ancestor with Static Trees,464.0,,,1,1,O(n+m),Any distribution of values?,(need to read entire input + all queries),[https://www.ics.uci.edu/~eppstein/261/BenFar-LCA-00.pdf Bender; Colton [LCA <=> RMQ] (2000)],Bender; Colton [LCA <=> RMQ],2000,https://www.ics.uci.edu/~eppstein/261/BenFar-LCA-00.pdf,,,,0.0,0,3,"n: 3,
m: 3",O(n+m),"n: number of vertices
m: number of total number of operations (queries, links, and cuts)",n,,,Word RAM,words,3,n: 3,O(n),space bounded by pre-processing time,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Combinatorics
377,58.0,Lowest Common Ancestor,2.0,Lowest Common Ancestor with Static Trees,465.0,,,1,1,O(n+m),Any distribution of values?,(need to read entire input + all queries),"[https://link.springer.com/article/10.1007/s00224-004-1155-5 Stephen Alstrup, Cyril Gavoille, Haim Kaplan & Theis Rauhe  (2004)]","Stephen Alstrup, Cyril Gavoille, Haim Kaplan & Theis Rauhe ",2004,https://link.springer.com/article/10.1007/s00224-004-1155-5,,,,0.0,0,3,"n: 3,
m: 3",O(n+m),"n: number of vertices
m: number of total number of operations (queries, links, and cuts)",n,,,Word RAM,words,3,n: 3,O(n),"(see original reference, noting that a word is O(log n) bits)",0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Combinatorics
378,59.0,Graph Edit Distance Computation,2.0,Exact GED,466.0,Beam Stack Search,,1,1,O(VS),,,[https://doi.org/10.1016/j.knosys.2018.10.002  X Chen (2019)], X Chen,2019,https://doi.org/10.1016/j.knosys.2018.10.002,,,,0.0,0,8,"V: 8,
S: 3",O(VS),"V: number of vertices in the larger of the two graphs
S: size of the search tree (exp(V))
w: the beam width; parameter for how many of the best nodes are kept at each layer of the beam search (O(V))",V,,,Word RAM,words,6,"V: 6,
w: 3",O(wV^2),"Theorem 5, https://doi.org/10.1016/j.knosys.2018.10.002",0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics
379,59.0,Graph Edit Distance Computation,2.0,Inexact GED,468.0,AStar+,,1,0,O(V E^2 logV),,,[https://doi.org/10.48550/arXiv.1709.06810 L Chang (2017)],L Chang,2017,https://doi.org/10.48550/arXiv.1709.06810,,,,0.0,0,7,"V: 7,
E: 5",O(V E^2 logV),"V: number of vertices in the larger of the two graphs
E: number of edges in the larger of the two graphs",V,,,Word RAM,words,3,V: 3,O(V),"Theorem 5.1, and the bound on T_{\leq \delta ...} is V\log V
https://doi.org/10.48550/arXiv.1709.06810",0.0,1.0,,0,,0,,1,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics
380,59.0,Graph Edit Distance Computation,2.0,Inexact GED,469.0,A* with bipartite heuristic,,1,0,O(V^2),,,[https://doi.org/10.1007/978-3-642-38221-5_15 K Riesen (2013)],K Riesen,2013,https://doi.org/10.1007/978-3-642-38221-5_15,,,,0.0,0,5,V: 5,O(V^2),V: number of vertices in the larger of the two graphs,V,,,Word RAM,words,3,V: 3,O(V),Space complexity of A*,0.0,0.0,,0,,0,,1,0,,0,0,,,,,,428.5714286,0.4978496225,428571.4286,1.37393167,428571428.6,2.762428143,,,,,,,,,,2,,,Combinatorics
381,59.0,Graph Edit Distance Computation,2.0,Inexact GED,471.0,A*-Beamsearch,,1,0,O(V^2),,,"[https://link.springer.com/chapter/10.1007/11815921_17 Neuhaus, Riesen, Bunke (2006)]","Neuhaus, Riesen, Bunke",2006,https://link.springer.com/chapter/10.1007/11815921_17,,,,0.0,0,5,V: 5,O(V^2),"V: number of vertices in the larger of the two graphs
w: the beam width; parameter for how many of the best nodes are kept at each layer of the beam search (O(V))",V,,,Word RAM,words,5,V: 5,O(wV),Derived: number of nodes under consideration at once,1.0,0.0,,0,,0,,1,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics
382,59.0,Graph Edit Distance Computation,1.0,Inexact GED,474.0,energy-based,,1,0,O(V^2 E),,,[https://direct.mit.edu/neco/article-pdf/10/7/1873/813998/089976698300017188.pdf?casa_token=nCYv9xO_Cc4AAAAA:EHiG4v8QmQju6u9RE6w4X6EGRtk5O5W6hIGy-_0A3HSit43f__4oSd4wjAtFIGJuopGMZzU Finch (1998)],Finch,1998,https://direct.mit.edu/neco/article-pdf/10/7/1873/813998/089976698300017188.pdf?casa_token=nCYv9xO_Cc4AAAAA:EHiG4v8QmQju6u9RE6w4X6EGRtk5O5W6hIGy-_0A3HSit43f__4oSd4wjAtFIGJuopGMZzU,,,,1.0,2->3,7,"V: 7,
E: 3",O(V^2 E),"V: number of vertices in the larger of the two graphs
E: number of edges in the larger of the two graphs",V,,,Word RAM,words,5,V: 5,O(V^2)?,Seems to store/update a constant number of values per pair of nodes (one from each graph),1.0,0.0,,0,,0,,1,0,,0,0,click pdf at: https://scholar.google.com/scholar?hl=en&as_sdt=0%2C22&q=An+Energy+Function+and+Continuous+Edit+Process+for+Graph+Matching&btnG=,,,,,183673.4694,,183673469388.0,,1.83673e+17,,,,,,,,,,,2,,,Combinatorics
383,60.0,Clique Problems,1.0,"Enumerating Maximal Cliques, arbitrary graph",475.0,,,1,1,O(3^{(n/3)}),,,[https://dl.acm.org/doi/10.1145/362342.362367 Bron–Kerbosch algorithm (1973)],Bron–Kerbosch algorithm,1973,https://dl.acm.org/doi/10.1145/362342.362367,,,,1.0,-,8,n: 8,$O(3^{(n/3)})$,"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2)?,Keep track of an O(n)-sized recursive stack with O(n)-sized lists as elements?,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,250000.0,,250000000000.0,,2.5e+17,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
384,60.0,Clique Problems,1.0,"Enumerating Maximal Cliques, arbitrary graph",476.0,,,1,1,O(3^{(n/3)}),,,[http://www.dcs.gla.ac.uk/~pat/jchoco/clique/enumeration/papers/SMJ000001%5B1%5D.pdf Akkoyunlu; E. A.  (1973)],Akkoyunlu; E. A. ,1973,http://www.dcs.gla.ac.uk/~pat/jchoco/clique/enumeration/papers/SMJ000001%5B1%5D.pdf,,,,0.0,-,8,n: 8,O(3^{(n/3)}),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2)?,See Bron-Kerbosch (seems like a similar approach?),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics
385,60.0,Clique Problems,1.0,"Enumerating Maximal Cliques, arbitrary graph",477.0,,,1,1,O(3^{(n/3)}),,,[https://snap.stanford.edu/class/cs224w-readings/tomita06cliques.pdf Tomita; Tanaka & Takahashi (2006)],Tomita; Tanaka & Takahashi,2006,https://snap.stanford.edu/class/cs224w-readings/tomita06cliques.pdf,,,,0.0,-,8,n: 8,O(3^{(n/3)}),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2)?,See Bron-Kerbosch (seems like a similar approach?),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics
386,60.0,Clique Problems,1.0,"Enumerating Maximal Cliques, arbitrary graph",479.0,,,1,1,O(dn 3^{(d/3)}),,,"[https://arxiv.org/pdf/1006.5440.pdf David Eppstein, Maarten Löffler, Darren Strash (2010)]","David Eppstein, Maarten Löffler, Darren Strash",2010,https://arxiv.org/pdf/1006.5440.pdf,,,,0.0,-,8,"n: 8,
d: 8",$O(dn 3^{(d/3)})$,"n: number of vertices
m: number of edges
d: degeneracy of graph (worst case, d=O(n))",n,,,Word RAM,words,5,n: 5,O(n^2)?,"See Bron-Kerbosch, but also keeps track of O(n)-sized degeneracy ordering",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
387,60.0,Clique Problems,1.0,"Enumerating Maximal Cliques, arbitrary graph",480.0,,,1,1,$O(a(G)*m)$ per clique,,,[https://pdfs.semanticscholar.org/0d19/245a27bc65a87a8014d5b8a66fb514c8ff0b.pdf Chiba and Nishizeki  (1985)],Chiba and Nishizeki ,1985,https://pdfs.semanticscholar.org/0d19/245a27bc65a87a8014d5b8a66fb514c8ff0b.pdf,,,,0.0,-,6,"n: 6,
m: 3,
a(G): 3",$O(a(G)*m)$ per clique,"n: number of vertices
m: number of edges
a(G): arboricity of graph (O(n) worst case)",n,,,Word RAM,words,5,"m: 3,
n: 5",O(m),https://pdfs.semanticscholar.org/0d19/245a27bc65a87a8014d5b8a66fb514c8ff0b.pdf,0.0,1.0,,0,,0,,0,0,,0,0,https://arxiv.org/pdf/1006.5440.pdf,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
388,60.0,Clique Problems,1.0,"Enumerating Maximal Cliques, arbitrary graph",481.0,,,1,1,O(n d^2 2^d),,,[https://www.ics.uci.edu/~eppstein/pubs/ChrEpp-TCS-91.pdf M. Chrobak and D. Eppstein (1989)],M. Chrobak and D. Eppstein,1989,https://www.ics.uci.edu/~eppstein/pubs/ChrEpp-TCS-91.pdf,,,,0.0,-,8,n: 8,$O(n d^2 2^d)$,"n: number of vertices
m: number of edges
d: degeneracy of graph (O(n) worst case)",n,,,Word RAM,words,3,n: 3,O(n)?,Keeps track of degeneracy ordering along with vertex and subset being tested (here the subset size is bounded by O(d)=O(n)),1.0,0.0,,0,,0,,0,0,,0,0,https://arxiv.org/pdf/1006.5440.pdf,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
389,60.0,Clique Problems,1.0,"Enumerating Maximal Cliques, arbitrary graph",482.0,,,1,1,$O(nm)$ per clique,,,"[https://www.proquest.com/docview/918487776?pq-origsite=gscholar&fromopenview=true Shuji Tsukiyama, Mikio Ide, Hiromu Ariyoshi, and Isao Shirakawa (1977)]","Shuji Tsukiyama, Mikio Ide, Hiromu Ariyoshi, and Isao Shirakawa",1977,https://www.proquest.com/docview/918487776?pq-origsite=gscholar&fromopenview=true,,,,1.0,-,6,"n: 6,
m: 3",$O(nm)$ per clique,"n: number of vertices
m: number of edges
d: degeneracy of graph",n,,,Word RAM,words,5,"m: 3,
n: 5",O(m),"See original reference, but also note that we'd have to construct and store the complementary graph (as this is originally an algo for MISs)",0.0,1.0,,0,,0,,0,0,,0,0,,,,,"V:E
1:1",500.0,3.728708045,500000.0,25.59147948,500000000.0,148.5348781,250000.0,Inf,inf,250000000000,Inf,inf,2.5E+17,Inf,inf,1,,,Combinatorics
390,60.0,Clique Problems,1.0,"Enumerating Maximal Cliques, arbitrary graph",483.0,,,1,1,$O(n^\omega)$ per clique where omega is the exponent on matrix multiplication,,,"[https://link.springer.com/chapter/10.1007/978-3-540-27810-8_23 Kazuhisa Makino, Takeaki Uno; Section 5 (2004)]","Kazuhisa Makino, Takeaki Uno; Section 5",2004,https://link.springer.com/chapter/10.1007/978-3-540-27810-8_23,,,,0.0,-,5.3728596,n: 5.3728596,$O(n^{\omega})$ per clique where omega is the exponent on matrix multiplication,"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),https://link.springer.com/chapter/10.1007/978-3-540-27810-8_23,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
391,61.0,The Traveling-Salesman Problem,1.0,Minimum TSP,484.0,,,1,1,$O(V^2 2^V)$,,,[https://www.jstor.org/stable/2098806 Held–Karp algorithm (1962)],Held–Karp algorithm,1962,https://www.jstor.org/stable/2098806,,,,1.0,0,8,V: 8,$O(V^2 2^V)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,8,V: 8,O(V*2^V),"Need to store all C(S, l) for all subsets $S \subseteq V$ and all vertices l",1.0,0.0,,0,,0,,1,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
392,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,496.0,,,1,1,$O(4^{(n^2)})$,,,[ 5-point star Cramer's rule (1945)],5-point star Cramer's rule,1945,,,,,1.0,0,8,n: 8,$O(4^{(n^2)})$,n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,8,n: 8,"$O(4^{(n^2)})$ for sure, $O(n^2)$ possibly??? (if super conservative)","For expansion by minors, each ""level"" of expansion requires computing and storing O(1) smaller determinants, and there are O(n^2) levels overall",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,inf,,inf,,inf,,inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis
393,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,497.0,,,1,1,O(n^4),,,[ 5-point Gauss elimination (1945)],5-point Gauss elimination,1945,,,,,1.0,1->2,7,n: 7,O(n^4),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,7,n: 7,O(n^4),"See Gauss-Jordan elimination, but matrix is of size n^2*n^2",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000000000000.0,inf,1e+24,inf,1e+36,inf,1000000000000.0,Inf,inf,1E+24,Inf,inf,1E+36,Inf,inf,1,,,Numerical Analysis
394,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,498.0,,,1,1,O(n^4 logn),,,[ 5-point Gauss Seidel iteration (1945)],5-point Gauss Seidel iteration,1945,,,,,0.0,0,7.01,n: 7.01,O(n^4 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,O(n^2)?,Generally uses a constant number of n^2*n^2 matrices where O(n^2) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000000.0,999999.0,1000000000000.0,999999999999.0,1e+18,1e+18,,,,,,,,,,1,,,Numerical Analysis
395,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,499.0,,,1,1,O(n^3 logn),,,[ 5-point SOR iteration (1954)],5-point SOR iteration,1954,,,,,1.0,0,6.01,n: 6.01,O(n^3 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,O(n^2)?,"Need one auxiliary O(n^2)-sized vector to store guess, and the scalar sigma",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Successive_over-relaxation,,,,,,,,,,,9965784285.0,Inf,,1.99316E+19,Inf,,2.98974E+28,Inf,,1,,,Numerical Analysis
396,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,500.0,,,1,1,O(n^2 log^2n),,,[ 5-point ADI iteration (1955)],5-point ADI iteration,1955,,,,,1.0,2->3,5.02,n: 5.02,O(n^2 \log^2 n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,O(n^2)?,Generally uses a constant number of n^2*n^2 matrices where O(n^2) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Alternating-direction_implicit_method,,,,,,,,,,,99316856.41,Inf,,397267425633671,Inf,,8.93852E+20,Inf,,1,,,Numerical Analysis
397,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,501.0,,,1,1,O(n^3),,,[ 9-point SOR iteration (1956)],9-point SOR iteration,1956,,,,,0.0,0,6,n: 6,O(n^3),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,O(n^2)?,"Need one auxiliary O(n^2)-sized vector to store guess, and the scalar sigma",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Successive_over-relaxation,,,,,,,,,,,1000000000.0,,,,,,,,,1,,,Numerical Analysis
398,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,502.0,,,1,1,O(n^3),,,[https://epubs.siam.org/doi/pdf/10.1137/0113067 9-point Tensor product (1964)],9-point Tensor product,1964,https://epubs.siam.org/doi/pdf/10.1137/0113067,,,,1.0,0,6,n: 6,O(n^3),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,O(n^2)?,Generally uses a constant number of n^2*n^2 matrices where O(n^2) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.0,Inf,,19931568569324,Inf,,2.98974E+19,Inf,,1,,,Numerical Analysis
399,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,503.0,,,1,1,O(n^2 logn),,,[ 9-point ADI iteration (1965)],9-point ADI iteration,1965,,,,,0.0,0,5.01,n: 5.01,O(n^2 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,O(n^2)?,Generally uses a constant number of n^2*n^2 matrices where O(n^2) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.0,,,,,,,,,1,,,Numerical Analysis
400,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,504.0,,,1,1,O(n^2 logn),,,[ 5-point FFT (1965)],5-point FFT,1965,,,,,0.0,0,5.01,n: 5.01,O(n^2 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,O(n^2)?,FFT generally requires aux. space equal to dimension of vector?,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,99301225.0,,,,,,,,,1,,,Numerical Analysis
401,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,505.0,,,1,1,O(n^2 logn),,,[ 9-point ADI iteration + smooth guess (1969)],9-point ADI iteration + smooth guess,1969,,,,,0.0,0,5.01,n: 5.01,O(n^2 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,O(n^2)?,Generally uses a constant number of n^2*n^2 matrices where O(n^2) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.0,,,,,,,,,1,,,Numerical Analysis
402,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,506.0,,,1,1,O(n^2 logn),,,[ 5-point cyclic reduction (1970)],5-point cyclic reduction,1970,,,,,0.0,0,5.01,n: 5.01,O(n^2 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,O(n^2)?,Generally uses a constant number of n^2*n^2 matrices where O(n^2) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.0,,,,,,,,,1,,,Numerical Analysis
403,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,507.0,,,1,1,O(n^2 logn),,,[ 9-point FFT (1978)],9-point FFT,1978,,,,,0.0,0,5.01,n: 5.01,O(n^2 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,O(n^2)?,FFT generally requires aux. space equal to dimension of vector?,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.0,,,,,,,,,1,,,Numerical Analysis
404,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,508.0,,,1,1,$O(5^{(n^3)})$,,,[ 5-point star Cramer's rule (1945)],5-point star Cramer's rule,1945,,,,,1.0,0,8,n: 8,O(5^{(n^3)}),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,8,n: 8,"$O(5^{(n^3)})$ for sure, $O(n^3)$ possibly??? (if super conservative)","For expansion by minors, each ""level"" of expansion requires computing and storing O(1) smaller determinants, and there are O(n^3) levels overall",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis
405,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,509.0,,,1,1,O(n^7),,,[ 5-point Gauss elimination (1945)],5-point Gauss elimination,1945,,,,,1.0,1->2,7,n: 7,O(n^7),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,7,n: 7,O(n^6),"See Gauss-Jordan elimination, but matrix is of size n^3*n^3",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000000.0,Inf,,1E+24,Inf,,1E+36,Inf,,1,,,Numerical Analysis
406,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,510.0,,,1,1,O(n^5 logn),,,[ 5-point Gauss Seidel iteration (1945)],5-point Gauss Seidel iteration,1945,,,,,0.0,0,7,n: 7,O(n^5 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,O(n^3)?,Generally uses a constant number of n^3*n^3 matrices where O(n^3) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784284660.0,,,,,,,,,1,,,Numerical Analysis
407,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,511.0,,,1,1,O(n^4 logn),,,[ 5-point SOR iteration (1954)],5-point SOR iteration,1954,,,,,1.0,0,7,n: 7,O(n^4 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,O(n^3)?,"Need one auxiliary O(n^3)-sized vector to store guess, and the scalar sigma",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Successive_over-relaxation,,,,,,,,,,,9965784285.0,Inf,,1.99316E+19,Inf,,2.98974E+28,Inf,,1,,,Numerical Analysis
408,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,512.0,,,1,1,O(n^3 log^2n),,,[ 5-point ADI iteration (1955)],5-point ADI iteration,1955,,,,,1.0,2->3,6.02,n: 6.02,O(n^3 \log^2 n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,O(n^3)?,Generally uses a constant number of n^3*n^3 matrices where O(n^3) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Alternating-direction_implicit_method,,,,,,,,,,,99316856.41,Inf,,397267425633671,Inf,,8.93852E+20,Inf,,1,,,Numerical Analysis
409,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,513.0,,,1,1,O(n^4),,,[ 9-point SOR iteration (1956)],9-point SOR iteration,1956,,,,,0.0,0,7,n: 7,O(n^4),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,O(n^3)?,"Need one auxiliary O(n^3)-sized vector to store guess, and the scalar sigma",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Successive_over-relaxation,,,,,,,,,,,1000000000.0,,,,,,,,,1,,,Numerical Analysis
410,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,514.0,,,1,1,O(n^4),,,[https://epubs.siam.org/doi/pdf/10.1137/0113067 9-point Tensor product (1964)],9-point Tensor product,1964,https://epubs.siam.org/doi/pdf/10.1137/0113067,,,,1.0,0,7,n: 7,O(n^4),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,O(n^3)?,Generally uses a constant number of n^3*n^3 matrices where O(n^3) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.0,Inf,,19931568569324,Inf,,2.98974E+19,Inf,,1,,,Numerical Analysis
411,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,515.0,,,1,1,O(n^3 logn),,,[ 9-point ADI iteration (1965)],9-point ADI iteration,1965,,,,,0.0,0,6.01,n: 6.01,O(n^3 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,O(n^3)?,Generally uses a constant number of n^3*n^3 matrices where O(n^3) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.0,,,,,,,,,1,,,Numerical Analysis
412,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,516.0,,,1,1,O(n^3 logn),,,[ 5-point FFT (1965)],5-point FFT,1965,,,,,0.0,0,6.01,n: 6.01,O(n^3 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,O(n^3)?,FFT generally requires aux. space equal to dimension of vector?,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,99301225.0,,,,,,,,,1,,,Numerical Analysis
413,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,517.0,,,1,1,O(n^3 logn),,,[ 9-point ADI iteration + smooth guess (1969)],9-point ADI iteration + smooth guess,1969,,,,,0.0,0,6.01,n: 6.01,O(n^3 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,O(n^3)?,Generally uses a constant number of n^3*n^3 matrices where O(n^3) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.0,,,,,,,,,1,,,Numerical Analysis
414,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,518.0,,,1,1,O(n^3 logn),,,[ 5-point cyclic reduction (1970)],5-point cyclic reduction,1970,,,,,0.0,0,6.01,n: 6.01,O(n^3 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,O(n^3)?,Generally uses a constant number of n^3*n^3 matrices where O(n^3) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.0,,,,,,,,,1,,,Numerical Analysis
415,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,519.0,,,1,1,O(n^3 logn),,,[ 9-point FFT (1978)],9-point FFT,1978,,,,,0.0,0,6.01,n: 6.01,O(n^3 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,O(n^3)?,FFT generally requires aux. space equal to dimension of vector?,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.0,,,,,,,,,1,,,Numerical Analysis
416,64.0,Delaunay Triangulation,1.0,2-Dimensional Delaunay Triangulation,520.0,,,1,1,O(n^4)? (previously O(n^2)),,,[- Naive algorithm (1934)],Naive algorithm,1934,-,1,1.0,,1.0,0,7,n: 7,$O(n^4)$? (previously $O(n^2)$),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),"Keep track of triangles in triangulation, and current triangle being tested",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Combinatorics
417,64.0,Delaunay Triangulation,1.0,2-Dimensional Delaunay Triangulation,521.0,,,1,1,O(n^2),,,[https://link.springer.com/article/10.1007/PL00009464 Flipping algorithm (1999)],Flipping algorithm,1999,https://link.springer.com/article/10.1007/PL00009464,,,,0.0,0,5,n: 5,O(n^2),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),Keep track of edges in current triangulation,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Combinatorics
418,64.0,Delaunay Triangulation,1.0,2-Dimensional Delaunay Triangulation,522.0,,,1,1,O(nlogn),,,[https://web.archive.org/web/20091028054315/http://www.cs.uu.nl/geobook/interpolation.pdf de Berg; Cheong (2008)],de Berg; Cheong,2008,https://web.archive.org/web/20091028054315/http://www.cs.uu.nl/geobook/interpolation.pdf,,,,0.0,0,4,n: 4,O(n \log n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),"Keep track of triangles in current triangulation, based on which points have been added so far",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,4,,,Combinatorics
419,64.0,Delaunay Triangulation,1.0,2-Dimensional Delaunay Triangulation,523.0,,,1,1,O(nlogn),,,[https://academic.oup.com/comjnl/article/24/2/167/338200 Bowyer–Watson algorithm (1981)],Bowyer–Watson algorithm,1981,https://academic.oup.com/comjnl/article/24/2/167/338200,,,,0.0,0,4,n: 4,O(n \log n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),"Keep track of triangles in current triangulation, based on which points have been added so far and which triangles to remove",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,4,,,Combinatorics
420,64.0,Delaunay Triangulation,1.0,2-Dimensional Delaunay Triangulation,525.0,,,1,1,O(nlogn),,,[http://www.geom.uiuc.edu/~samuelp/del_project.html Guibas; Stofli (1985)],Guibas; Stofli,1985,http://www.geom.uiuc.edu/~samuelp/del_project.html,,,,0.0,0,4,n: 4,O(n \log n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),"Space recursion is S(n)=max(2S(n/2), O(n)) as triangulations from recursive calls are modified in the merge step",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,4,,,Combinatorics
421,64.0,Delaunay Triangulation,2.0,2-Dimensional Delaunay Triangulation,526.0,,,1,1,O(nlogn),,,[https://dl.acm.org/doi/10.1145/142675.142695 Fortune (1992)],Fortune,1992,https://dl.acm.org/doi/10.1145/142675.142695,,,,0.0,0,5,n: 5,O(n^2),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),See incremental/flipping algorithm space complexities,1.0,0.0,,0,,0,O(1/n\epsilon),0,0,,0,0,,"Given a set of points on a surface, find a triangulation such that for every triangule there is a circumscribing pseudocircle that is \alpha-empty. A circumscribing  \alpha-pseudocircle are circular arcs with endpoints at the vertices of the polygon which all lie inside the circumscribing circle of the polygon and make an angle at most \alpha with the circumscribing polygon at the verticies. A pseudocircle is \alpha-empty if it is an \alpha-pseudocircle and it contains no verticies in its interior.",,,,,,,,,,9965.0,,,,,,,,,4,,,Combinatorics
422,64.0,Delaunay Triangulation,1.0,2-Dimensional Delaunay Triangulation,528.0,,,1,1,O(nlogn),,,[http://www.s-hull.org/paper/s_hull.pdf S-hull (Sinclair) (2010)],S-hull (Sinclair),2010,http://www.s-hull.org/paper/s_hull.pdf,,,,0.0,0,4,n: 4,O(n \log n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),"Keep track of triangles in current triangulation, based on which points have been added so far and which triangles to remove",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,4,,,Combinatorics
423,64.0,Delaunay Triangulation,2.0,2-Dimensional Delaunay Triangulation,529.0,,,1,1,O(n log log n),uniform distribution in the unit square,https://link.springer.com/article/10.1007/BF01840356,[https://link.springer.com/article/10.1007/BF01840356 Dwyer (1987)],Dwyer,1987,https://link.springer.com/article/10.1007/BF01840356,,,,0.0,0,4,n: 4,O(n \log n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n)?,"Space recursion is S(n)=max(2S(n/2), O(n)) as triangulations from recursive calls are modified in the merge step",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,4,,,Combinatorics
424,64.0,Delaunay Triangulation,1.0,2-Dimensional Delaunay Triangulation,531.0,,,1,1,O(n),uniform distribution in the unit square,https://web.archive.org/web/20120308043808/http://www.cs.berkeley.edu/~jrs/meshpapers/SuDrysdale.pdf,[https://web.archive.org/web/20120308043808/http://www.cs.berkeley.edu/~jrs/meshpapers/SuDrysdale.pdf Drysdale; Su (1996)],Drysdale; Su,1996,https://web.archive.org/web/20120308043808/http://www.cs.berkeley.edu/~jrs/meshpapers/SuDrysdale.pdf,1,1.0,,1.0,5->6,3,n: 3,O(n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n)?,See other incremental algorithms,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1000,0.1312834366,1000000,1000000,0.279802214,1000000000,1000000000,0.4478190469,4,,,Combinatorics
425,64.0,Delaunay Triangulation,1.0,General Delaunay Triangulation (d-dimensions),532.0,,,1,1,O(n),random points from a d-ball,https://link.springer.com/article/10.1007/BF02574694,[https://link.springer.com/article/10.1007/BF02574694 Dwyer (higher dimensions) (1987)],Dwyer (higher dimensions),1987,https://link.springer.com/article/10.1007/BF02574694,,,,0.0,0,3.99,n: 3.99,O(n \log \log n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n)?,Keep track of O(1) information per triangle related to triangulation??,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,3316.983346,301.4787521,0.1291461101,4316983.346,231643.2378,0.3006040392,4901945847,204000621.6,0.5024522209,4,,,Combinatorics
426,65.0,De Novo Genome Assembly,1.0,De Novo Genome Assembly,533.0,,,1,1,O(n^2),,,"[https://www.ncbi.nlm.nih.gov/pubmed/7497130 de Bruijn Graph (Idury, Waterman) (1994)]","de Bruijn Graph (Idury, Waterman)",1994,https://www.ncbi.nlm.nih.gov/pubmed/7497130,,,,1.0,0,5,n: 5,O(n^2),"n: sum of lengths of reads
f: number of input sequences?",n,,,Word RAM,words,3,n: 3,O(n)?,Requires computing O(n) overlaps for graph; data structures are otherwise linear in space usage,1.0,0.0,,0,,0,,0,0,,0,0,"https://academic.oup.com/bioinformatics/article/32/9/1301/1744507

https://ieeexplore.ieee.org/document/9684373",,,,,,,,,,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Bioinformatics
427,65.0,De Novo Genome Assembly,1.0,De Novo Genome Assembly,535.0,,,1,1,O(nlogn),,,[https://www.ncbi.nlm.nih.gov/pubmed/7497129 String Graph (Myers) (1994)],String Graph (Myers),1994,https://www.ncbi.nlm.nih.gov/pubmed/7497129,,,,1.0,4->5,4,n: 4,O(n \log n),"n: sum of lengths of reads
f: number of input sequences?",n,,,Word RAM,words,3,n: 3,O(n)?,Requires computing O(n) overlaps for graph; data structures are otherwise linear in space usage,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,100.3512293,,19931568.57,50171.66594,,29897352854,33447777.3,,4,,,Bioinformatics
428,65.0,De Novo Genome Assembly,1.0,De Novo Genome Assembly,536.0,,,1,1,O(n),,,"[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2881401/pdf/btq217.pdf String Graph with Ferragina–Manzini Index (Simpson, Durbin) (2010)]","String Graph with Ferragina–Manzini Index (Simpson, Durbin)",2010,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2881401/pdf/btq217.pdf,,,,1.0,5->6,3,n: 3,O(n),"n: sum of lengths of reads
f: number of input sequences?",n,,,Word RAM,words,3,n: 3,O(n)?,Requires computing O(n) overlaps for graph; data structures are otherwise linear in space usage,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,9.965,0.1545289608,1000000,19.93156857,0.2056502551,1000000000,29.89735285,0.2365937469,4,,,Bioinformatics
429,66.0,The Subset-Sum Problem,1.0,Subset Sum,539.0,,,1,1,O(2^n * n),,,[ Naive algorithm (1940)],Naive algorithm,1940,,,,,1.0,0,8,n: 8,O(2^n * n),n: the number of integers in the set,n,,,Word RAM,words,3,n: 3,$O(n)$,https://dl.acm.org/doi/10.1145/321812.321823,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000.0,,1000000.0,,1000000000.0,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
430,66.0,The Subset-Sum Problem,1.0,Subset Sum,540.0,,,1,1,O(2^{(n/2)} * n),,,[ Random Split Exponential algorithm (1940)],Random Split Exponential algorithm,1940,,,,,1.0,0,8,n: 8,$O(2^{(n/2)} * n)$,n: the number of integers in the set,n,,,Word RAM,words,8,n: 8,$O(2^{(n/2)})$,https://dl.acm.org/doi/10.1145/321812.321823,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
431,67.0,Dependency Inference Problem,1.0,Functional Dependency Inference Problem,554.0,,,1,1,O(n^2 2^n p log p),,,[https://www.sciencedirect.com/science/article/pii/0166218X92900315 Brute force algorithm (1967)],Brute force algorithm,1967,https://www.sciencedirect.com/science/article/pii/0166218X92900315,,,,1.0,0,8,"n: 8,
p: 4",$O(n^2 2^n p \log p)$,"n: number of attributes
p: number of tuples/rows/data points",n,,,Word RAM,words,8,"n: 8,
p: 1",O(n2^n)?,"bound on size of output (2^n domains, O(n) possible attributes per domain); can probably be improved",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Databases
432,67.0,Dependency Inference Problem,1.0,Functional Dependency Inference Problem,555.0,,,1,1,O(n 2^n p),,,[https://www.aaai.org/Papers/Workshops/1993/WS-93-02/WS93-02-017.pdf Schlimmer (1993)],Schlimmer,1993,https://www.aaai.org/Papers/Workshops/1993/WS-93-02/WS93-02-017.pdf,,,,1.0,0,8,"n: 8,
p: 3",$O(n 2^n p)$,"n: number of attributes
p: number of tuples/rows/data points",n,,,Word RAM,words,8,"n: 8,
p: 1",O(2^n),"(original source, but without user-supplied bound",0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Databases
433,68.0,BCNF Decomposition,2.0,Decisional BCNF,556.0,,,1,1,O(kn^2),,,[https://doi.org/10.1016/0950-5849(92)90028-N Liu (1992)],Liu,1992,https://doi.org/10.1016/0950-5849(92)90028-N,,,,1.0,0,6,"n: 6,
k: 3",$O(kn^2)$,"n: size of database?
k: number of functional dependencies (assume O(n))",n,,,Word RAM,words,3,n: 3,O(n),Derived: Creates an auxiliary database,1.0,0.0,,0,,0,,0,0,,0,0,,,,,"k:n
1:1",,,,,,,125000000.0,1,,1.25E+17,1,,1.25E+26,1,,3,,,Databases
434,70.0,Dependency Inference Problem,1.0,Multivalued Dependency Inference Problem,566.0,,,1,1,O(n^2 2^n p log p),,,[https://www.sciencedirect.com/science/article/pii/0166218X92900315 Räihä; Manilla (1992)],Räihä; Manilla,1992,https://www.sciencedirect.com/science/article/pii/0166218X92900315,,,,0.0,0,8,n: 8,O(n^2 2^n p log p),"n: number of attributes
p: number of tuples/rows/data points",n,,,Word RAM,words,8,"n: 8,
p: 1",O(n2^n)?,"bound on size of output (2^n domains, O(n) possible attributes per domain); can probably be improved",1.0,0.0,,0,,0,,0,0,,0,0,,,,,L=100,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Databases
435,71.0,Disk Scheduling,2.0,Disk Scheduling,568.0,,,1,1,O(n),Any distribution of inputs,Same behavior regardless of input,[- FCFS (1979)],FCFS,1979,-,,,,1.0,0,3,n: 3,O(n),n: number of requests,n,,,Word RAM,words,1,n: 1,$O(1)$,Needs to keep track of seek distance but FCFS is fairly straightforward/no extra info needed,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/FIFO_(computing_and_electronics),,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Operating Systems
436,71.0,Disk Scheduling,2.0,Disk Scheduling,569.0,,,1,1,O(n*log n) with binary tree,Any distribution of inputs,Same behavior regardless of input,[- SSTF (1979)],SSTF,1979,-,,,,0.0,0,4,n: 4,O(n \log n) with binary tree,n: number of requests,n,,,Word RAM,words,3,n: 3,$O(n)$,https://www.geeksforgeeks.org/program-for-sstf-disk-scheduling-algorithm/?ref=lbp,0.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Shortest_seek_first,,,,,,,,,,,1000.0,,,,,,,,,6,,,Operating Systems
437,71.0,Disk Scheduling,2.0,Disk Scheduling,570.0,,,1,1,O(n*log n),Any distribution of inputs,Same behavior regardless of input,[- SCAN (1979)],SCAN,1979,-,,,,0.0,0,4,n: 4,O(n \log n),n: number of requests,n,,,Word RAM,words,3,n: 3,$O(n)$,https://www.geeksforgeeks.org/scan-elevator-disk-scheduling-algorithms/?ref=lbp,0.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Elevator_algorithm,,,,,,,,,,,1000.0,,,,,,,,,6,,,Operating Systems
438,71.0,Disk Scheduling,2.0,Disk Scheduling,571.0,,,1,1,O(n*log n),Any distribution of inputs,Same behavior regardless of input,[- LOOK (1979)],LOOK,1979,-,,,,0.0,0,4,n: 4,O(n \log n),n: number of requests,n,,,Word RAM,words,3,n: 3,$O(n)$,Needs sorted array of requests and seek distance but not much else,1.0,0.0,,0,,0,,0,0,,0,0,http://courses.teresco.org/cs432_f02/lectures/17-files/17-files.html,,,,,,,,,,,1000.0,,,,,,,,,6,,,Operating Systems
439,71.0,Disk Scheduling,2.0,Disk Scheduling,572.0,,,1,1,O(n*log n),Any distribution of inputs,Same behavior regardless of input,[- C-SCAN (1979)],C-SCAN,1979,-,,,,0.0,0,4,n: 4,O(n \log n),n: number of requests,n,,,Word RAM,words,3,n: 3,$O(n)$,See SCAN,1.0,0.0,,0,,0,,0,0,,0,0,http://courses.teresco.org/cs432_f02/lectures/17-files/17-files.html,,,,,,,,,,,1000.0,,,,,,,,,6,,,Operating Systems
440,71.0,Disk Scheduling,2.0,Disk Scheduling,573.0,,,1,1,O(n*log n),Any distribution of inputs,Same behavior regardless of input,[- C-LOOK (1979)],C-LOOK,1979,-,,,,0.0,0,4,n: 4,O(n \log n),n: number of requests,n,,,Word RAM,words,3,n: 3,$O(n)$,See LOOK,1.0,0.0,,0,,0,,0,0,,0,0,http://www.cs.nuim.ie/~dkelly/CS240-05/Disk%20Scheduling.htm,,,,,,,,,,,1000.0,,,,,,,,,6,,,Operating Systems
441,72.0,The Vertex Cover Problem,1.0,The Vertex Cover Problem,574.0,,,1,1,O(2^k n^{O(1)}),,,[ Brute force (backtracking search) (1940)],Brute force (backtracking search),1940,,,,,1.0,0,8,"n: 8,
k: 8",O(2^k n^O(1)),"n: number of vertices
m: number of edges
k: size of vertex cover (worst case O(n))",n,,,Word RAM,words,3,"k: 3,
n: 3",$O(k)$,Just need to keep track of current subset being checked,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
442,72.0,The Vertex Cover Problem,1.0,The Vertex Cover Problem,575.0,,,1,1,O(kn + 2^k k^{(2k + 2)}),,,[http://bud.cs.uky.edu/~goldsmit/papers/NondetWithinP.pdf Sam Buss  (1993)],Sam Buss ,1993,http://bud.cs.uky.edu/~goldsmit/papers/NondetWithinP.pdf,,,,1.0,0,8,"n: 8,
k: 8",$O(kn + 2^k k^{(2k + 2)})$,"n: number of vertices
m: number of edges
k: size of vertex cover (worst case O(n))",n,,,Word RAM,words,5,"k: 5,
n: 5",$O(k^2)$?,Auxiliary graph contains O(k^2) edges unless the instance is rejected; rest of steps take O(k^2) auxiliary space at most,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
443,72.0,The Vertex Cover Problem,1.0,The Vertex Cover Problem,576.0,,,1,1,O(kn + 1.2852^k),,,[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.7.4800&rep=rep1&type=pdf Chen; I. Kanj; and W. Jia. (2001)],Chen; I. Kanj; and W. Jia.,2001,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.7.4800&rep=rep1&type=pdf,,,,0.0,0,8,"n: 8,
k: 8",$O(kn + 1.2852^k)$,"n: number of vertices
m: number of edges
k: size of vertex cover (worst case O(n))",n,,,Word RAM,words,6,"k: 6,
n: 6",$O(k^3)$ auxiliary? (potentially $O(k^2)$??),"First auxiliary graph contains O(k^2) edges; algorithm subsequently branches to a depth of O(k) (each fork being degree O(1)), with a new O(k^2)-sized graph at each depth. Interleaving shouldn't increase space usage asymptotically. (Could possibly be reduced to O(k) by just keeping track of graph deltas?) (but also a different source claims exponential?)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
444,72.0,The Vertex Cover Problem,1.0,The Vertex Cover Problem,577.0,,,1,1,"O(min(1.2759^k k^{1.5}, 1.2745^k k^4) + kn)",,,[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.136.4409&rep=rep1&type=pdf Chandran and F. Grandoni (2004)],Chandran and F. Grandoni,2004,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.136.4409&rep=rep1&type=pdf,,,,0.0,0,8,"n: 8,
k: 8","$O(min(1.2759^k k^1.5, 1.2745^k k^4) + kn)$","n: number of vertices
m: number of edges
k: size of vertex cover (worst case O(n))",n,,,Word RAM,words,8,"k: 8,
n: 8","$O(min(1.2759^k k^{1.5}, 1.2745^k k^4) + kn)$ but exponential",https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.136.4409&rep=rep1&type=pdf,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
445,72.0,The Vertex Cover Problem,1.0,The Vertex Cover Problem,578.0,,,1,1,O(1.2738^k+ kn),,,[https://www.cs.lafayette.edu/~gexia/research/mfcs06.pdf Chen; I. Kanj; and W. Jia. (2006)],Chen; I. Kanj; and W. Jia.,2006,https://www.cs.lafayette.edu/~gexia/research/mfcs06.pdf,,,,0.0,0,8,"n: 8,
k: 8",O(1.2738^k+ kn),"n: number of vertices
m: number of edges
k: size of vertex cover (worst case O(n))",n,,,Word RAM,words,7,n: 7,$O(poly(n))$,https://www.cs.lafayette.edu/~gexia/research/mfcs06.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
446,72.0,The Vertex Cover Problem,1.0,"The Vertex Cover Problem, Degrees Bounded By 3",579.0,,,1,1,O(k*1.2192^k),,,[https://onlinelibrary.wiley.com/doi/abs/10.1002/1097-0037(200007)35:4%3C253::AID-NET3%3E3.0.CO;2-K J. Chen; L. Liu; and W. Jia. (2000)],J. Chen; L. Liu; and W. Jia.,2000,https://onlinelibrary.wiley.com/doi/abs/10.1002/1097-0037(200007)35:4%3C253::AID-NET3%3E3.0.CO;2-K,,,,1.0,0,8,"n: 8,
k: 8",O(k*1.2192^k),"n: number of vertices
m: number of edges
k: size of vertex cover (worst case O(n))",n,,,Word RAM,words,6,"k: 6,
n: 6",$O(k^3)$ auxiliary? (potentially $O(k^2)$??),(see remark in algo id #576),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
447,72.0,The Vertex Cover Problem,1.0,The Vertex Cover Problem,580.0,,,1,1,O(kn + (1.324718)^k * k^2),,,[https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.711.8844 Balasubramanian; Fellows (1996)],Balasubramanian; Fellows,1996,https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.711.8844,,,,1.0,0,8,"n: 8,
k: 8",O(kn + (1.324718)^k * k^2),"n: number of vertices
m: number of edges
k: size of vertex cover (worst case O(n))",n,,,Word RAM,words,6,"k: 6,
n: 6",$O(k^3)$ auxiliary? (potentially $O(k^2)$??),(see remark in algo id #576),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
448,72.0,The Vertex Cover Problem,1.0,The Vertex Cover Problem,581.0,,,1,1,O(3^k n),,,[https://www.sciencedirect.com/science/article/pii/S0022000096900586 Papadimitriou and M Yannakakis (1996)],Papadimitriou and M Yannakakis,1996,https://www.sciencedirect.com/science/article/pii/S0022000096900586,,,,0.0,0,8,"n: 8,
k: 8",O(3^k n),"n: number of vertices
m: number of edges
k: size of vertex cover (worst case O(n))",n,,,Word RAM,words,3,"k: 3,
n: 3",$O(k)$ auxiliary?,"keep track of maximal matching, and subsequent vertices in cover; note that max size is O(k) else we can reject immediately",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
449,72.0,The Vertex Cover Problem,1.0,The Vertex Cover Problem,582.0,,,1,1,O(kn + 1.29175^k k^2).,,,"[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.69.1933&rep=rep1&type=pdf Niedermeier, Rossmanith (1999)]","Niedermeier, Rossmanith",1999,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.69.1933&rep=rep1&type=pdf,,,,1.0,0,8,"n: 8,
k: 8",O(kn + 1.29175^k k^2).,"n: number of vertices
m: number of edges
k: size of vertex cover (worst case O(n))",n,,,Word RAM,words,6,"k: 6,
n: 6",$O(k^3)$ auxiliary? (potentially $O(k^2)$??),(see remark in algo id #576),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
450,72.0,The Vertex Cover Problem,1.0,The Vertex Cover Problem,583.0,,,1,1,O(kn + 1.31951^k k^2),,,[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.12.4079&rep=rep1&type=pdf Downey (1998)],Downey,1998,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.12.4079&rep=rep1&type=pdf,,,,1.0,0,8,"n: 8,
k: 8",O(kn + 1.31951^k k^2),"n: number of vertices
m: number of edges
k: size of vertex cover (worst case O(n))",n,,,Word RAM,words,6,"k: 6,
n: 6",$O(k^3)$ auxiliary? (potentially $O(k^2)$??),(see remark in algo id #576),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
451,73.0,CFG Problems,1.0,CFG Recognition,584.0,,,1,1,O(n^3 * |G|),,,[https://core.ac.uk/download/pdf/158319955.pdf Cocke–Younger–Kasami algorithm (1968)],Cocke–Younger–Kasami algorithm,1968,https://core.ac.uk/download/pdf/158319955.pdf,,,,1.0,0,6,"n: 6,
|G|: 3",O(n^3 * |G|),"n: input string length
|G|: size of grammar",n,,,Double-tape TM,cells,5,n: 5,O(n^2),https://core.ac.uk/download/pdf/158319955.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,,,,G=100,,,,,,,100000000000.0,1,,1E+20,1,,1E+29,1,,3,,,Combinatorics
452,73.0,CFG Problems,1.0,CFG Recognition,585.0,,,1,1,$O(n^\omega * |G|)$ where omega is the exponent for matrix multiplication,,,[https://linkinghub.elsevier.com/retrieve/pii/S0022000075800468 Valiant (1975)],Valiant,1975,https://linkinghub.elsevier.com/retrieve/pii/S0022000075800468,,,,1.0,0,5.3728596,"n: 5.3728596,
|G|: 3",O(n^omega * |G|) where omega is the exponent for matrix multiplication,"n: input string length
|G|: size of grammar",n,,,Word RAM and multitape TM,words/cells,5,n: 5,O(n^2)?,See matrix multiplication space complexity,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1380384265.0,72.44359601,0.8438020169,1.90546E+16,5248.074602,2.399605878,2.63027E+23,380189.3963,5.268200174,3,,,Combinatorics
453,73.0,CFG Problems,2.0,CFG Parsing,586.0,,,1,1,O(n^3),,,[https://web.archive.org/web/20040708052627/http://www-2.cs.cmu.edu/afs/cs.cmu.edu/project/cmt-55/lti/Courses/711/Class-notes/p94-earley.pdf Earley parser (1968)],Earley parser,1968,https://web.archive.org/web/20040708052627/http://www-2.cs.cmu.edu/afs/cs.cmu.edu/project/cmt-55/lti/Courses/711/Class-notes/p94-earley.pdf,,,,1.0,0,6,n: 6,O(n^3),n: input string length,n,,,Word RAM,words,5,n: 5,O(n^2),https://web.archive.org/web/20040708052627/http://www-2.cs.cmu.edu/afs/cs.cmu.edu/project/cmt-55/lti/Courses/711/Class-notes/p94-earley.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,100,,1E+18,100,,1E+27,100,,3,,,Combinatorics
454,73.0,CFG Problems,2.0,CFG Parsing,587.0,,,1,1,O(n^3),,,[https://link.springer.com/chapter/10.1007%2F978-3-662-21545-6_18 GLR parser (1974)],GLR parser,1974,https://link.springer.com/chapter/10.1007%2F978-3-662-21545-6_18,,,,0.0,0,6,n: 6,O(n^3),n: input string length,n,,,Word RAM? (implemented on ALGOL),words,6,n: 6,O(n^3),https://link.springer.com/chapter/10.1007%2F978-3-662-21545-6_18,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Combinatorics
455,74.0,Finding Frequent Itemsets,2.0,Finding Frequent Itemsets,588.0,,,1,1,O(n^2),,,[http://www.vldb.org/conf/1994/P487.PDF A-Priori algorithm (1994)],A-Priori algorithm,1994,http://www.vldb.org/conf/1994/P487.PDF,,,,1.0,0,5,n: 5,O(n^2),n: total number of transactions (size of database),n,,,Word RAM,words,5,n: 5,O(n^2),https://dl.acm.org/doi/pdf/10.1145/1014052.1014091,0.0,0.0,,0,,0,,0,0,,0,0,https://www-users.cse.umn.edu/~kumar001/dmbook/ch6.pdf,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
456,74.0,Finding Frequent Itemsets,1.0,Finding Frequent Itemsets,589.0,,,1,1,O(n^2),,,[https://dl.acm.org/doi/abs/10.1145/568271.223813 The Algorithm of Park; Chen; and Yu (PCY) (1995)],The Algorithm of Park; Chen; and Yu (PCY),1995,https://dl.acm.org/doi/abs/10.1145/568271.223813,,,,0.0,0,5,n: 5,O(n^2),n: total number of transactions (size of database),n,,,Word RAM,words,5,n: 5,O(n^2),"Derived: modification of the Apriori algorithm, with same asymptotic complexities.",1.0,0.0,,0,,0,,0,0,,0,0,https://link.springer.com/content/pdf/10.1007/3-540-44418-1_1.pdf,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics
457,74.0,Finding Frequent Itemsets,1.0,Finding Frequent Itemsets,590.0,,,1,1,O(n^2),,,[http://ilpubs.stanford.edu:8090/423/ The Multistage Algorithm (1999)],The Multistage Algorithm,1999,http://ilpubs.stanford.edu:8090/423/,,,,0.0,0,5,n: 5,O(n^2),n: total number of transactions (size of database),n,,,Word RAM,words,5,n: 5,O(n^2),"Derived: modification of the Apriori algorithm, with same asymptotic complexities.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics
458,74.0,Finding Frequent Itemsets,1.0,Finding Frequent Itemsets,591.0,,,1,1,O(n^2),,,[http://ilpubs.stanford.edu:8090/423/ The Multihash Algorithm (1999)],The Multihash Algorithm,1999,http://ilpubs.stanford.edu:8090/423/,,,,0.0,0,5,n: 5,O(n^2),n: total number of transactions (size of database),n,,,Word RAM,words,5,n: 5,O(n^2),"Derived: modification of the Apriori algorithm, with same asymptotic complexities.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics
459,75.0,Data Compression,1.0,Lossy Compression,592.0,,,1,1,O(n^2 log^3 n),,,[https://doi.org/10.1109/TIT.2009.2016040 Gupta; Verdu (2009)],Gupta; Verdu,2009,https://doi.org/10.1109/TIT.2009.2016040,,,,0.0,0,5.03,n: 5.03,O(n^2 log^3 n),n: input string length (bits),n,,,Word RAM,bits,3,n: 3,O(n),"Derived: Considering the codebook to be part of the input, this only requires storing a single codeword in memory, of size $O(n)$, along with some constants",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing
460,75.0,Data Compression,2.0,Lossy Compression,593.0,,,1,1,O(n^2),,,[https://doi.org/10.1109%2FT-C.1974.223784 Discrete Cosine Transform (1974)],Discrete Cosine Transform,1974,https://doi.org/10.1109%2FT-C.1974.223784,,,,1.0,1->3,5,n: 5,O(n^2),n: number of items in input series of data,n,Derived: each of the n terms of the DCT has a sum of n terms,1.0,Word RAM,words,3,n: 3,O(n),Derived: store the DCT coefficient for each input term,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000.0,inf,1000000.0,inf,1000000000.0,inf,1000000000.0,Inf,inf,1E+18,Inf,inf,1E+27,Inf,inf,1,,,Image Processing
461,75.0,Data Compression,2.0,Lossy Compression,594.0,Low Density Generator Matrix (LDGM) codes; for a Bernouli(1/2) source,,1,1,O(n^2),,,[https://ieeexplore.ieee.org/document/1523592 Maneva and M. J. Wainwright (2005)],Maneva and M. J. Wainwright,2005,https://ieeexplore.ieee.org/document/1523592,,,,0.0,0,5,n: 5,O(n^2),"n: length of input vector
m: length of compressed output vector",n,,,Word RAM,bits,5,n: 5,O(n^2),"Derived: size of the factor graph representation of the generator matrix, or size of the generator matrix itself",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,1,,,Image Processing
462,75.0,Data Compression,1.0,Lossy Compression,595.0,Constraint Satisfaction Problem with Random Gates,,1,1,O(n^2),,,[https://arxiv.org/abs/cond-mat/0504509  Ciliberti; Mézard (2005)], Ciliberti; Mézard,2005,https://arxiv.org/abs/cond-mat/0504509,,,,1.0,3->4,5,n: 5,O(n^2),"n: length of input vector
m: length of compressed output vector",n,,,Word RAM,bits,5,n: 5,O(n^2)?,"Derived: size of the factor graph representation of the generator matrix, or size of the generator matrix itself",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,Inf,,1000000000000,Inf,,1E+18,Inf,,1,,,Image Processing
463,75.0,Data Compression,1.0,Lossy Compression,596.0,Brute Force,,1,1,O(n*2^n),,,[ Brute force (1940)],Brute force,1940,,,,,1.0,0,8,n: 8,O(n*2^n),n: length of input data,n,,,Word RAM,words,8,n: 8,O(n*2^n)?,Keep track of big codebook?,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,inf,,inf,,inf,,inf,1,,Inf,1,,Inf,1,,1,,,Image Processing
464,75.0,Data Compression,2.0,Lossy Compression,597.0,Low Density Parity Check (LDPC),,1,1,O(n*2^n),,,[https://doi.org/10.1109/TIT.2003.815805 Matsunaga; Yamamoto (2003)],Matsunaga; Yamamoto,2003,https://doi.org/10.1109/TIT.2003.815805,,,,0.0,0,8,n: 8,O(n*2^n),n: length of input data,n,,,Word RAM,words,8,n: 8,exp(n),https://doi.org/10.1109/TIT.2003.815805,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Image Processing
465,75.0,Data Compression,1.0,Lossy Compression,598.0,LDGM codes + multilevel quantization,,1,1,O(kmn)?,,,[https://ieeexplore.ieee.org/document/5474629/ Sun; M. Shao; J. Chen; K. Wong; and X. Wu (2010)],Sun; M. Shao; J. Chen; K. Wong; and X. Wu,2010,https://ieeexplore.ieee.org/document/5474629/,,,,0.0,0,8,n: 8,O(kmn)?,"n: length of input data
m: level parameter
k: rate parameter",n,,,Word RAM,words,3,"n: 3,
m: 3,
k: 3",O(kmn)?,Encoding scheme can be thought of as a factor graph with O(k+mn) nodes and O(kmn) edges,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Image Processing
466,75.0,Data Compression,1.0,Lossy Compression,599.0,Low Density Parity Check (LDPC),,1,1,O(n*2^n),,,[https://www.semanticscholar.org/paper/Lossy-Data-Compression-over-Zq-by-LDPC-Code-Miyake/652f0438118898b63126f7261ec4cd2002ff0e0b Miyake 2006 (2006)],Miyake 2006,2006,https://www.semanticscholar.org/paper/Lossy-Data-Compression-over-Zq-by-LDPC-Code-Miyake/652f0438118898b63126f7261ec4cd2002ff0e0b,,,,0.0,0,8,n: 8,O(n*2^n),n: length of input data,n,,,Word RAM,words,8,n: 8,O(2^n),"Parity check matrix is size poly(n), distortion dictionary is size O(2^n)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Image Processing
467,75.0,Data Compression,1.0,Lossy Compression,600.0,LDGM + LDPC,,1,1,O(n*2^n),,,[https://arxiv.org/abs/cs/0602046 Martinian and M. J. Wainwright (2006)],Martinian and M. J. Wainwright,2006,https://arxiv.org/abs/cs/0602046,,,,0.0,0,8,n: 8,O(n*2^n),"n: length of input data
m: number of information bits
k: rate parameter (in LDPC)",n,,,Word RAM,words,3,"n: 3,
m: 3,
k: 3",O(mn+mk)?,"Consists of an LDGM portion (O(n+m) nodes, O(mn) edges) and an LDPC portion (O(m+k) nodes, O(mk) edges)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Image Processing
468,75.0,Data Compression,1.0,Lossy Compression,601.0,Gibbs sampler,,1,1,O(n),,,[https://web.stanford.edu/~tsachy/pdf_files/Lossy%20Source%20Coding%20via%20Markov%20Chain%20Monte%20Carlo.pdf Jalali and T. Weissman (2008)],Jalali and T. Weissman,2008,https://web.stanford.edu/~tsachy/pdf_files/Lossy%20Source%20Coding%20via%20Markov%20Chain%20Monte%20Carlo.pdf,,,,1.0,4->6,3,n: 3,O(n),n: length of input data,n,,,Word RAM,words,3,n: 3,O(n)?,"Derived: Auxiliary data structures are H_k and m_k. H_k is just a singular value and is constant space, but m_k is a O(n)-size vector.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,Inf,,1000000,Inf,,1000000000,Inf,,1,,,Image Processing
469,75.0,Data Compression,1.0,Lossy Compression,602.0,Wyner-Ziv DUDE,,1,1,O(n),,,[https://authors.library.caltech.edu/17983/1/Jalali2010p7459Ieee_T_Inform_Theory.pdf Jalali; A. Montanari; and T. Weissman (2010)],Jalali; A. Montanari; and T. Weissman,2010,https://authors.library.caltech.edu/17983/1/Jalali2010p7459Ieee_T_Inform_Theory.pdf,,,,0.0,0,3,n: 3,O(n),n: length of input data,n,,,Word RAM,words,3,n: 3,O(n)?,Derived: Auxiliary data structures consist of a constant number of O(n)-sized vectors and function definitions,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,1,,,Image Processing
470,75.0,Data Compression,2.0,Lossy Compression,603.0,Polar codes,,1,1,O(N log N),,,[https://arxiv.org/pdf/0903.0307.pdf Korada and R. Urbanke; (2010)],Korada and R. Urbanke;,2010,https://arxiv.org/pdf/0903.0307.pdf,,,,0.0,0,8,n: 8,O(n*2^n),"n: length of input data
N: code length/block length, typically N=2^n",n,https://arxiv.org/pdf/0903.0307.pdf,0.0,Word RAM,words,8,n: 8,O(N),Derived: size of the polar codes that need to be stored,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,1,O(N log N) time w.r.t. codelength,,Image Processing
471,76.0,Factorization of Polynomials Over Finite Fields,1.0,,605.0,,,1,1,O(n^3),,,[- Schubert's algorithm (1940)],Schubert's algorithm,1940,-,,,,1.0,0,6,n: 6,O(n^3),"n: degree of polynomial
p: characteristic of finite field",n,,,Word RAM,words,3,"n: 3,
p: 1",O(n),,,,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Factorization_of_polynomials_over_finite_fields#Distinct-degree_factorization,,,,,,,,,,,1000000000.0,1,,1E+18,1,,1E+27,1,,3,,,Numerical Analysis
472,76.0,Factorization of Polynomials Over Finite Fields,1.0,Square-free,606.0,,,1,1,O(n^3),,,[- Square-free factorization (1975)],Square-free factorization,1975,-,,,,0.0,0,6,n: 6,O(n^3),"n: degree of polynomial
p: characteristic of finite field",n,,,Word RAM,words,3,"n: 3,
p: 1",O(n),Computes and stores a constant number of polynomials of degree $O(n)$ per iteration,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Factorization_of_polynomials_over_finite_fields#Distinct-degree_factorization,,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Numerical Analysis
473,76.0,Factorization of Polynomials Over Finite Fields,1.0,Distinct-degree,607.0,,,1,1,O(n^3 + nlogn),,,[- Distinct-degree factorization (1944)],Distinct-degree factorization,1944,-,,,,0.0,0,6,n: 6,O(n^3 + n \log n),"n: degree of polynomial
p: characteristic of finite field",n,,,Word RAM,words,3,"n: 3,
p: 1",O(n),"Computes and stores a constant number of polynomials of degree $O(n)$ per iteration. Note that computing $gcd(f, x^{(q^i)}-x)$ can be cleverly done in $O(n)$ space.",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Factorization_of_polynomials_over_finite_fields#Distinct-degree_factorization,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis
474,76.0,Factorization of Polynomials Over Finite Fields,1.0,Equal-degree,608.0,,,1,1,O(n^3 logn),,,[https://www.ams.org/journals/mcom/1981-36-154/S0025-5718-1981-0606517-5/home.html Cantor–Zassenhaus algorithm (1981)],Cantor–Zassenhaus algorithm,1981,https://www.ams.org/journals/mcom/1981-36-154/S0025-5718-1981-0606517-5/home.html,,,,0.0,0,6.01,n: 6.01,O(n^3 \log n),"n: degree of polynomial
p: characteristic of finite field",n,,,Word RAM,words,3,"n: 3,
p: 1",O(n),"Keeps track of a set of factors, where sum of degrees of factors is O(n) so the total number of terms to keep track of is O(n). Also, computing h^{((q^d-1)/2)}-1 mod f only requires O(n) space",1.0,0.0,,1,Monte Carlo,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis
475,76.0,Factorization of Polynomials Over Finite Fields,1.0,Equal-degree,609.0,,,1,1,O(n^2),,,[https://www.sciencedirect.com/science/article/abs/pii/0020019090901954 Victor Shoup's algorithm (1990)],Victor Shoup's algorithm,1990,https://www.sciencedirect.com/science/article/abs/pii/0020019090901954,,,,1.0,3->4,5,n: 5,O(n^2),"n: degree of polynomial
p: characteristic of finite field",n,,,Word RAM,words,3,"n: 3,
p: 1",O(n),"Keeps track of a set of factors, where sum of degrees of factors is $O(n)$ so the total number of terms to keep track of is $O(n)$. Also, polynomials in the separating set can be computed in $O(n)$ space",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1000,0.1481536215,1000000000000,1000000,0.3182567386,1E+18,1000000000,0.5135612484,3,,,Numerical Analysis
476,77.0,Cryptanalysis of Linear Feedback Shift Registers,1.0,Cryptanalysis of Linear Feedback Shift Registers,610.0,,,1,1,O(n^2),,,[https://ieeexplore.ieee.org/document/1054260 Berlekamp–Massey algorithm (1969)],Berlekamp–Massey algorithm,1969,https://ieeexplore.ieee.org/document/1054260,2,1.0,https://www.semanticscholar.org/paper/Shift-register-synthesis-and-BCH-decoding-Massey/a0870e57fb5e59aae83f2a2a09b8df78257ef556,1.0,0,5,n: 5,O(n^2),n: size of input stream,n,,,Word RAM,words,3,n: 3,O(n)?,Computes and stores constant number of polynomials of degree $O(n)$,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Cryptography
477,78.0,Stable Matching Problem,1.0,Stable Marriage Problem,611.0,,,1,1,O(n^2),,,[http://www.eecs.harvard.edu/cs286r/courses/fall09/papers/galeshapley.pdf Gale–Shapley algorithm (1962)],Gale–Shapley algorithm,1962,http://www.eecs.harvard.edu/cs286r/courses/fall09/papers/galeshapley.pdf,1,1.0,https://en.wikipedia.org/wiki/Gale–Shapley_algorithm,1.0,0,5,n: 5,O(n^2),n: number of men and number of women,n,,,Word RAM,words,3,n: 3,O(n),Only need to keep track of current (provisional) matchings,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Combinatorics
478,78.0,Stable Matching Problem,1.0,Stable Roommates Problem,612.0,,,1,1,O(n^2),,,[http://www.dcs.gla.ac.uk/~pat/jchoco/roommates/papers/Comp_sdarticle.pdf Irving's Algorithm (1985)],Irving's Algorithm,1985,http://www.dcs.gla.ac.uk/~pat/jchoco/roommates/papers/Comp_sdarticle.pdf,,,,0.0,0,5,n: 5,O(n^2),n: number of pairs of roommates,n,,,Word RAM,words,5,n: 5,O(n^2)?,Manipulates the $O(n)$-many $O(n)$-size preference lists,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Combinatorics
479,78.0,Stable Matching Problem,1.0,Stable Marriage Problem,613.0,,,1,1,O(n^2),,,[http://www.dcs.gla.ac.uk/~davidm/pubs/7981.pdf Manlove; Malley (2005)],Manlove; Malley,2005,http://www.dcs.gla.ac.uk/~davidm/pubs/7981.pdf,,,,0.0,0,5,n: 5,O(n^2),n: number of men and number of women,n,,,Word RAM,words,5,n: 5,O(n^2)?,"Constructs, preprocesses, and solves an $O(n^2)$-size CSP instance?",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Combinatorics
480,78.0,Stable Matching Problem,1.0,Stable Marriage Problem,614.0,,,1,1,O(n^2),,,[http://www.dcs.gla.ac.uk/~pat/roommates/distribution/papers/SM2N.pdf Unsworth; C.; Prosser; P (2005)],Unsworth; C.; Prosser; P,2005,http://www.dcs.gla.ac.uk/~pat/roommates/distribution/papers/SM2N.pdf,,,,0.0,0,5,n: 5,O(n^2),n: number of men and number of women,n,,,Word RAM,words,5,n: 5,O(n^2)?,"Constructs, preprocesses, and solves an $O(n^2)$-size CSP instance? (see original reference)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Combinatorics
481,78.0,Stable Matching Problem,1.0,Arc Consistency?,615.0,,,1,1,O(n^3),,,[https://www.sciencedirect.com/science/article/abs/pii/000437029290020X Hentenryck et. al. (1992)],Hentenryck et. al.,1992,https://www.sciencedirect.com/science/article/abs/pii/000437029290020X,,,,0.0,0,6,n: 6,O(n^3),n: number of men and number of women,n,,,Word RAM,words,6,n: 6,O(n^3)?,https://www.sciencedirect.com/science/article/abs/pii/000437029290020X,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,4,,,Combinatorics
482,78.0,Stable Matching Problem,1.0,Stable Marriage Problem,616.0,,,1,1,O(n^2),,,[https://link.springer.com/chapter/10.1007/3-540-45578-7_16 Gent; I.P.; Irving; R.W.; Manlove; D.F.; Prosser; P.; Smith; B.M. (2001)],Gent; I.P.; Irving; R.W.; Manlove; D.F.; Prosser; P.; Smith; B.M.,2001,https://link.springer.com/chapter/10.1007/3-540-45578-7_16,,,,0.0,0,5,n: 5,O(n^2),n: number of men and number of women,n,,,Word RAM,words,5,n: 5,O(n^2)?,"Constructs, preprocesses, and solves an O(n^2)-size CSP instance?",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Combinatorics
483,78.0,Stable Matching Problem,1.0,Stable Roommates Problem,617.0,,,1,1,O(n^3),,,[https://link.springer.com/chapter/10.1007%2F978-3-319-07046-9_2 Patrick Posser (2014)],Patrick Posser,2014,https://link.springer.com/chapter/10.1007%2F978-3-319-07046-9_2,,,,0.0,0,6,n: 6,O(n^3),n: number of pairs of roommates,n,,,Word RAM,words,3,n: 3,O(n),https://link.springer.com/chapter/10.1007%2F978-3-319-07046-9_2,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,4,,,Combinatorics
484,79.0,Longest Path Problem,1.0,Longest Path on Interval Graphs,621.0,,,1,1,O(n^4),,,[https://link.springer.com/content/pdf/10.1007/s00453-010-9411-3.pdf Ioannidou; Kyriaki; Mertzios; George B.; Nikolopoulos; Stavros D. (2011)],Ioannidou; Kyriaki; Mertzios; George B.; Nikolopoulos; Stavros D.,2011,https://link.springer.com/content/pdf/10.1007/s00453-010-9411-3.pdf,1,1.0,https://link.springer.com/content/pdf/10.1007/s00453-010-9411-3.pdf,1.0,0,7,n: 7,O(n^4),n: number of vertices,n,,,Word RAM,words,6,n: 6,O(n^3),https://link.springer.com/content/pdf/10.1007/s00453-010-9411-3.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000000.0,1,,1E+24,1,,1E+36,1,,2,,,Combinatorics
485,81.0,Constructing Suffix Trees,2.0,Constructing Suffix Trees,630.0,,,1,1,O(n^2),Any distribution (runtime same regardless of input),Same general behavior regardless of input,[- Naive (1973)],Naive,1973,-,,,,1.0,0,5,n: 5,O(n^2),n: length of string,n,,,Word RAM,words,3,n: 3,O(n),"Needs to store the intermediate steps of constructing a suffix tree, which can reach size O(n)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Combinatorics
486,81.0,Constructing Suffix Trees,2.0,Constructing Suffix Trees,631.0,,,1,1,O(n),Any distribution (runtime same regardless of input),Same general behavior regardless of input,[https://dl.acm.org/citation.cfm?id=1441766 Weiner's algorithm (1973)],Weiner's algorithm,1973,https://dl.acm.org/citation.cfm?id=1441766,,,,1.0,4->6,3,n: 3,O(n),n: length of string,n,,,Word RAM,words,3,n: 3,O(n),"Needs to store the intermediate steps of constructing a suffix tree, which can reach size O(n)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1000,0.2328467394,1000000,1000000,0.519911083,1000000000,1000000000,0.8738174229,4,,,Combinatorics
487,81.0,Constructing Suffix Trees,2.0,Constructing Suffix Trees,633.0,,,1,1,O(n),Any distribution (runtime same regardless of input),Same general behavior regardless of input,[https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf Ukkonen (1995)],Ukkonen,1995,https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf,,,,0.0,0,3,n: 3,O(n),n: length of string,n,,,Word RAM,words,3,n: 3,O(n),"Needs to store the intermediate steps of constructing a suffix tree, which can reach size O(n)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,4,,,Combinatorics
488,81.0,Constructing Suffix Trees,2.0,Constructing Suffix Trees,634.0,,,1,1,O(n^2),Any distribution (runtime same regardless of input),Same general behavior regardless of input,[https://link.springer.com/article/10.1007/BF01769703 Ukkonen and D. Wood (1993)],Ukkonen and D. Wood,1993,https://link.springer.com/article/10.1007/BF01769703,,,,0.0,0,5,n: 5,O(n^2),n: length of string,n,,,Word RAM,words,5,n: 5,O(n^2),https://link.springer.com/article/10.1007/BF01769703,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Combinatorics
489,81.0,Constructing Suffix Trees,2.0,Constructing Suffix Trees,639.0,,,1,1,O(n),Any distribution (runtime same regardless of input),Same general behavior regardless of input,[http://libeccio.di.unisa.it/TdP/suffix.pdf McCreight (1976)],McCreight,1976,http://libeccio.di.unisa.it/TdP/suffix.pdf,,,,0.0,0,3,n: 3,O(n),n: length of string,n,,,Word RAM,words,3,n: 3,O(n),"Needs to store the intermediate steps of constructing a suffix tree, which can reach size O(n)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,4,,,Combinatorics
490,83.0,Entity Resolution,1.0,Entity Resolution,645.0,,,1,1,O(n^3k),,,[https://courses.cs.washington.edu/courses/cse590q/04au/papers/Felligi69.pdf Fellegi & Sunter Model (1969)],Fellegi & Sunter Model,1969,https://courses.cs.washington.edu/courses/cse590q/04au/papers/Felligi69.pdf,,,,1.0,0,6.5,"n: 6.5,
k: 3",O(n^3k),"n: number of records
k: number of features (can be up to $O(\sqrt{n})$)",n,,,Word RAM,words,2.5,"n: 2.5,
k: 3",$O(k)$,"Derived: A constant number of values per feature; Sums range over n elements, but can be computed in the same memory; see Method 1",1.0,0.0,,0,,0,,0,0,,0,0,,,,,"r:c
1:1",,,,,,,62500000000.0,1,,6.25E+22,1,,6.25E+34,1,,2,,,Combinatorics
491,83.0,Entity Resolution,1.0,Entity Resolution,646.0,"Bipartite method
to compute pairwise ER",,1,1,O(n^3k),,,[https://doi.org/10.14778/1687627.1687661 Gupta & Sarawagi CRF (2009)],Gupta & Sarawagi CRF,2009,https://doi.org/10.14778/1687627.1687661,,,,0.0,0,6.5,"n: 6.5,
k: 3",O(n^3k),"n: number of records
k: number of features (can be up to $O(\sqrt{n})$)",n,,,Word RAM,words,4.5,"n: 4.5,
k: 3",$O(nk)$?,"Derived: Creates an intermediate ""consolidated"" table that it manipulates/reorders to get final output",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics
492,83.0,Entity Resolution,2.0,Entity Resolution,648.0,,,1,1,O(n^3k),,,[https://courses.cs.washington.edu/courses/cse590q/04au/papers/WinklerEM.pdf EM Based Winkler (2000)],EM Based Winkler,2000,https://courses.cs.washington.edu/courses/cse590q/04au/papers/WinklerEM.pdf,,,,0.0,0,6.5,"n: 6.5,
k: 3",O(n^3k),"n: number of records
k: number of features (can be up to $O(\sqrt{n})$)",n,,,Word RAM,words,2.5,"n: 2.5,
k: 3",$O(k)$,Derived: One value per feature in the discretized vector,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics
493,83.0,Entity Resolution,2.0,Entity Resolution,649.0,,,1,1,O(n^2 k),,,[https://arxiv.org/abs/1207.4180 Ravikumar & Cohen Generative Models (2004)],Ravikumar & Cohen Generative Models,2004,https://arxiv.org/abs/1207.4180,,,,0.0,0,5.5,"n: 5.5,
k: 3",O(n^2 k),"n: number of records
k: number of features (can be up to $O(\sqrt{n})$)",n,,,Word RAM,words,2.5,"n: 2.5,
k: 3",$O(k)$,Derived: One value per feature in the discretized vector,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics
494,83.0,Entity Resolution,2.0,Entity Resolution,651.0,Delphi algorithm,,1,1,O(n^2 k),,,[https://doi.org/10.1016/B978-155860869-6/50058-5 Ananthakrishna (2002)],Ananthakrishna,2002,https://doi.org/10.1016/B978-155860869-6/50058-5,,,,0.0,0,5.5,"n: 5.5,
k: 3",O(n^2 k),"n: number of records
k: number of features (can be up to $O(\sqrt{n})$)",n,,,Word RAM,words,3,n: 3,$O(n)$,"Derived: the token table, the children table, and the tuples in G are stored in main memory, each are of size $O(n)$",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics
495,83.0,Entity Resolution,1.0,Entity Resolution,652.0,,,1,1,O(n^2 k),,,[https://www.sciencedirect.com/science/article/abs/pii/016794739390116B BOYS algorithm (1993)],BOYS algorithm,1993,https://www.sciencedirect.com/science/article/abs/pii/016794739390116B,,,,0.0,0,5.5,"n: 5.5,
k: 3",O(n^2 k),"n: number of records
k: number of features (can be up to $O(\sqrt{n})$)",n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: As written stores counts/probabailities for all pairs of entries.,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics
496,84.0,Longest Palindromic Substring,2.0,Longest Palindromic Substring,653.0,,,1,1,O(n^3),Any distribution of values?,(behavior same across all inputs),[- Naive (1940)],Naive,1940,-,1,1.0,,1.0,0,6,n: 6,O(n^3),n: length of given string,n,,,Word RAM,words,1,n: 1,$O(1)$,https://www.geeksforgeeks.org/longest-palindrome-substring-set-1/,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,1,,1E+18,1,,1E+27,1,,3,,,Combinatorics
497,84.0,Longest Palindromic Substring,1.0,Longest Palindromic Substring,654.0,,,1,1,O(n^2),,,[- Dynamic Programming (1953)],Dynamic Programming,1953,-,,,,1.0,3->4,5,n: 5,O(n^2),n: length of given string,n,,,Word RAM,words,5,n: 5,O(n^2),https://www.geeksforgeeks.org/longest-palindrome-substring-set-1/,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1000,0.7012542799,1000000000000,1000000,1.894266125,1E+18,1000000000,3.923882632,3,,,Combinatorics
498,84.0,Longest Palindromic Substring,2.0,Longest Palindromic Substring,655.0,,,1,1,O(n),Any distribution of values?,need to read entire input,[https://doi.org/10.1145%2F321892.321896 Manacher (1975)],Manacher,1975,https://doi.org/10.1145%2F321892.321896,2,1.0,https://dl.acm.org/doi/10.1145/321892.321896,1.0,4->6,3,n: 3,O(n),n: length of given string,n,,,Word RAM,words,3,n: 3,$O(n)$,"At the very least it stores the radii for each center, requiring O(n) space. Space usage is bounded from above by runtime, so at most O(n) space is used.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1000000,0.483981789,1000,1000000000000,1.20220195,1000000000,1E+18,2.268027589,3,,,Combinatorics
499,84.0,Longest Palindromic Substring,1.0,Longest Palindromic Substring,656.0,,,1,1,O(n),Any distribution of values?,need to read entire input,[https://doi.org/10.1007%2FBF01182773 Jeuring (1994)],Jeuring,1994,https://doi.org/10.1007%2FBF01182773,,,,0.0,0,3,n: 3,O(n),n: length of given string,n,,,Word RAM,words,3,n: 3,$O(n)$?,Stores (and uses) previously computed palindrome information; unclear if O(n) is best bound possible,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,3,,,Combinatorics
500,84.0,Longest Palindromic Substring,2.0,Longest Palindromic Substring,657.0,,,1,1,O(n),Any distribution of values?,need to read entire input,[https://www.cambridge.org/core/books/algorithms-on-strings-trees-and-sequences/F0B095049C7E6EF5356F0A26686C20D3 Gusfield  (1997)],Gusfield ,1997,https://www.cambridge.org/core/books/algorithms-on-strings-trees-and-sequences/F0B095049C7E6EF5356F0A26686C20D3,,,,0.0,0,3,n: 3,O(n),n: length of given string,n,,,Word RAM,words,3,n: 3,$O(n)$,"At the very least it pre-processes and stores the string and the reverse of the string, requiring O(n) space. Space usage is bounded from above by runtime, so at most O(n) space is used.",1.0,0.0,,0,,0,,0,0,,0,0,https://d1wqtxts1xzle7.cloudfront.net/31053376/Algorithms_on_String_Trees_and_Sequences-with-cover-page-v2.pdf?Expires=1661234618&Signature=F2kwJp-yun59cg~XkWJkmRPpTYA~w8ZV8-T7prnT1vRBskR9HP5--HSAW3yRCkMvsogo8r6dTuq94Um2iFLJueNP-wf-EwQwsnTfaNWN8~IPjQAStkg0o3~9dr~gbsRzgddypdVJFp2qnFOzCaL3RgLw1mVEt~z6l9NwCSAK~mKZn6gZm3pP2-oCtuvQeUkRQKEWMrjbmZJvnXGoTSeKl4wMvvO5VOB17WLvU2A~G3XuiV05wJJwK8cQ9wqGZdorSYXieKLElOTfoYCDEjugeJuQXa2R-VhZtk8WpBPLmIv-PKUqQpxNG2usEwy0f4rcZnpsIBfEAJV9UBv1QwxlPQ__&Key-Pair-Id=APKAJLOHF5GGSLRBV4ZA,,,,,,,,,,,1000.0,,,,,,,,,3,,,Combinatorics
501,53.0,Register Allocation,2.0,Global Register Allocation,658.0,,,1,1,O(n^2),,,[https://dl.acm.org/doi/10.1145/236114.236117 Demand-Driven Register Allocation (1996)],Demand-Driven Register Allocation,1996,https://dl.acm.org/doi/10.1145/236114.236117,,,,0.0,0,5,n: 5,O(n^2),$n$: number of instructions in procedure,n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: Requires storing a so-called $\Delta$-table of size $n \times n$ to keep track of $\Delta$-estimates,1.0,0.0,,0,,0,,1,0,,0,0,,,,,,,,,,,,1000000.0,1,,,,,,,,4,,,Combinatorics
502,85.0,AST to Code Translation,2.0,Arithmetic Expression Binary Tree,659.0,,,1,1,O(n),,,[https://dl.acm.org/doi/10.1145/321607.321620 Sethi–Ullman Algorithm (1970)],Sethi–Ullman Algorithm,1970,https://dl.acm.org/doi/10.1145/321607.321620,0.5,1.0,https://dl.acm.org/doi/10.1145/321607.321620,1.0,0,3,n: 3,O(n),$n$: number of nodes in the tree,n,,,Word RAM,words,1,n: 1,$O(1)$,"Derived: Only uses in-situ updates to the input tree, no auxiliary data structures",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Combinatorics
503,86.0,Graph Isomorphism Problem,1.0,"Graph Isomorphism, Bounded Number of Vertices of Each Color",661.0,,,1,1,o(\exp(2n^{1/2}\log^2n)),,,[https://epubs.siam.org/doi/10.1137/0209018 Babai (1980)],Babai,1980,https://epubs.siam.org/doi/10.1137/0209018,,,,1.0,0,8,n: 8,o(\exp(2n^{1/2}\log^2n)),n: number of vertices,n,,,Word RAM,words,5,n: 5,O(n^2),https://epubs.siam.org/doi/10.1137/0209018 (section 2.5),0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
504,86.0,Graph Isomorphism Problem,1.0,,664.0,,,1,1,,,,[https://dl.acm.org/doi/10.1145/321958.321963 Schmidt & Druffel (1976)],Schmidt & Druffel,1976,https://dl.acm.org/doi/10.1145/321958.321963,,,,1.0,0,8,n: 8,$O(n*n!)$,n: number of vertices,n,,,Word RAM,words,5,n: 5,$O(n^2)$,derived in sheet,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
505,86.0,Graph Isomorphism Problem,2.0,Circulant graphs,667.0,,,1,1,O(n^2),,,[https://londmathsoc.onlinelibrary.wiley.com/doi/abs/10.1112/S0024611503014412 Muzychuk (2004)],Muzychuk,2004,https://londmathsoc.onlinelibrary.wiley.com/doi/abs/10.1112/S0024611503014412,,,,0.0,0,5,n: 5,O(n^2),n: number of vertices,n,,,Word RAM,words,5,n: 5,$O(n^2)$,derived in notes,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,inf,,,inf,,,inf,1,,,Combinatorics
506,87.0,Graph Realization Problems,2.0,Digraph Realization Problem,670.0,Constructs graph,,1,1,O(n),,,[https://linkinghub.elsevier.com/retrieve/pii/0012365X7390037X Kleitman–Wang Algorithm (1973)],Kleitman–Wang Algorithm,1973,https://linkinghub.elsevier.com/retrieve/pii/0012365X7390037X,1,1.0,http://compalg.inf.elte.hu/~tony/Oktatas/TDK/FINAL/Chap%202.PDF,1.0,0,3,n: 3,O(n),$n$: number of degree pairs,n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: Space complexity bounded by time complexity; keep track of a constant number of sets of size $O(n)$,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000.0,,1000000.0,,1000000000.0,,250000.0,1,,250000000000,1,,2.5E+17,1,,4,,,Combinatorics
507,87.0,Graph Realization Problems,2.0,Digraph Realization Problem,671.0,"Makes use of (0,1) matrix properties, checks a property of the input values through the lens of an adjacency matrix",,1,1,O(n),,,[https://www.cambridge.org/core/journals/canadian-journal-of-mathematics/article/properties-of-a-class-of-01matrices-covering-a-given-matrix/9A3857D219511017536142BD7F132C91 Fulkerson–Chen–Anstee (1982)],Fulkerson–Chen–Anstee,1982,https://www.cambridge.org/core/journals/canadian-journal-of-mathematics/article/properties-of-a-class-of-01matrices-covering-a-given-matrix/9A3857D219511017536142BD7F132C91,,,,0.0,0,3,n: 3,O(n),$n$: number of degree pairs,n,,,Word RAM,words,1,n: 1,$O(1)$,"Derived: Checking an inequality that involves 3 summations, of max value $O(n^2)$ each (assuming max degree $\leq n$) which is $O(1)$ words in our Word RAM. We check this inequality for each $k = 1, \ldots, n$, but you can store the summations dynamically, so you only need to run $O(1)$ operations per iteration",1.0,0.0,,0,,0,,0,0,,0,0,https://dl.acm.org/doi/pdf/10.1145/2783258.2783410?casa_token=u46OpjQb5b4AAAAA:7jdo-IEc4gQRd648rIJNa5WhQno8vQGGaHkDzTcu6FJ8K_BIraVU3kQ8qqqjUkO6zVLW71I7iI_VlA,,,,,1.0,1.15443469,1.0,3.641588834,1.0,9.0,,,,,,,,,,4,,,Combinatorics
508,88.0,Duplicate Elimination,2.0,Duplicate Elimination,673.0,,,1,1,O(nlogn),,,[ Sorting based [Merge Sort] (1964)],Sorting based [Merge Sort],1964,,,,,1.0,0,4,n: 4,O(n \log n),,n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: linear space for mergesort,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000.0,,1000000.0,,1000000000.0,,9965.0,1,,19931568.57,1,,29897352854,1,,5,,,Databases
509,88.0,Duplicate Elimination,2.0,Duplicate Elimination,675.0,,,1,1,O(nlogn),,,[ BST Algorithm (1999)],BST Algorithm,1999,,,,,0.0,0,4,n: 4,O(n \log n),,n,,,Word RAM,words,2,n: 2,$O(\log n)$,Derived: Space required for the recursion stack space,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,9.965784285,0.1407366271,19.93156857,0.3623817424,29.89735285,0.6405214824,9965.0,,,,,,,,,5,,,Databases
510,88.0,Duplicate Elimination,2.0,Duplicate Elimination,676.0,Selection sort using priority queue?,,1,1,O(n^2),,,[ Priority Queue Algorithm (1976)],Priority Queue Algorithm,1976,,,,,0.0,0,5,n: 5,O(n^2),,n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: Auxiliary space needed for the priority queue,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,5,,,Databases
511,88.0,Duplicate Elimination,2.0,Duplicate Elimination,677.0,,,1,1,O(n^2),,,[https://link.springer.com/article/10.1023/A:1009761603038 Sorted Neighborhood Algorithm (SNA) (1998)],Sorted Neighborhood Algorithm (SNA),1998,https://link.springer.com/article/10.1023/A:1009761603038,,,,0.0,0,5,n: 5,O(n^2),,n,https://doi.org/10.1145/1255175.1255213,0.0,Word RAM,words,3,n: 3,$O(n)$,"Derived: store a key for each entry in the ""Create Key"" phase",1.0,0.0,,0,,0,,0,0,,0,0,https://ieeexplore.ieee.org/document/5381140,,,,,,,,,,,9965.0,,,,,,,,,5,,,Databases
512,88.0,Duplicate Elimination,2.0,Duplicate Elimination,679.0,SVM string similarity,,1,1,O(n^3),,,[https://dl.acm.org/doi/10.1145/956750.956759 Adaptive Duplicate Detection Algorithm (ADD) (2003)],Adaptive Duplicate Detection Algorithm (ADD),2003,https://dl.acm.org/doi/10.1145/956750.956759,,,,1.0,0,6,n: 6,O(n^3),,n,,,Word RAM,words,1,n: 1,$O(1)$,"Derived: For SVM, only need to store a constant number of support vectors",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1.0,0.7767563268,1.0,1.112931266,1.0,1.338342829,3316.983346,3.004235765,,4316983.346,4.617013078,,4901945847,6.099078567,,5,,,Databases
513,89.0,Hyperbolic Spline Interpolation,1.0,Hyperbolic Spline Interpolation,680.0,Tridiagonal linear system,0.0,1,1,O(n^3 log^2K),,,[https://link.springer.com/article/10.1134/S0965542508040039 B.I. Kvasov (2008)],B.I. Kvasov,2008,https://link.springer.com/article/10.1134/S0965542508040039,,,,1.0,0,6,"n: 6,
K: 2",O(n^3 \log^2K),n: number of points,n,,,Word RAM,words,3,n: 3,O(n)?,Derived: Tridiagonal matrices in the linear system only require O(n) space,1.0,0.0,,0,,0,,0,0,,0,0,https://link.springer.com/content/pdf/10.1134/S0965542511050095.pdf,,,,K=500,,,,,,,7284439084.0,370511.7131,0.3779074509,7.28444E+18,370511713133,0.9463460074,7.28444E+27,3.70512E+17,1.74928681,2,,,Numerical Analysis
514,89.0,Hyperbolic Spline Interpolation,1.0,Hyperbolic Spline Interpolation,684.0,Pentadiagonal linear system,0.0,1,1,O(n^5 \log K),,,"[https://link.springer.com/article/10.1023/A:1018988312596 P. Costantini, B. I. Kvasov, and C. Manni (1999)]","P. Costantini, B. I. Kvasov, and C. Manni",1999,https://link.springer.com/article/10.1023/A:1018988312596,,,,0.0,0,7,"n: 7,
K: 2",O(n^5 \log K),n: number of points,n,,,Word RAM,words,3,n: 3,O(n)?,Derived: Pentadiagonal matrix in the linear system only requires O(n) space,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Numerical Analysis
515,89.0,Hyperbolic Spline Interpolation,1.0,Hyperbolic Spline Interpolation,685.0,Discrete Generalized Splines,0.0,1,1,O(n^4),,,[http://sutir.sut.ac.th:8080/sutir/bitstream/123456789/431/1/bib115.pdf B. I. Kvasov (2000)],B. I. Kvasov,2000,http://sutir.sut.ac.th:8080/sutir/bitstream/123456789/431/1/bib115.pdf,,,,1.0,0,7,n: 7,O(n^4),n: number of points,n,,,Word RAM,words,3,n: 3,O(n)??,Requires computing the coefficients b_i and functions Phi(x) and Psi(x) as in equations 17 and 18,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000000.0,2698.970004,0.280044121,1E+24,2698970.004,0.5884550852,1E+36,2698970004,0.9711738964,2,,,Numerical Analysis
516,91.0,Maximum Likelihood Methods in Unknown Latent Variables,1.0,Maximum Likelihood Methods in Unknown Latent Variables,706.0,,0.0,1,1,O(n^3),,,[https://www.jstor.org/stable/2984875 Expectation-Maximization (EM) algorithm (1977)],Expectation-Maximization (EM) algorithm,1977,https://www.jstor.org/stable/2984875,,,,1.0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta and Z guesses, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000.0,,1000000.0,,1000000000.0,,1000000000.0,1,,1E+18,1,,1E+27,1,,3,,,Statistics
517,91.0,Maximum Likelihood Methods in Unknown Latent Variables,1.0,Maximum Likelihood Methods in Unknown Latent Variables,707.0,,0.0,1,1,O(n^2 log^3 n),,,[https://rss.onlinelibrary.wiley.com/doi/abs/10.1111/1467-9868.00083 EM with Quasi-Newton Methods (Jamshidian; Mortaza; Jennrich; Robert I.) (1997)],EM with Quasi-Newton Methods (Jamshidian; Mortaza; Jennrich; Robert I.),1997,https://rss.onlinelibrary.wiley.com/doi/abs/10.1111/1467-9868.00083,,,,1.0,0,5.03,n: 5.03,O(n^2 \log^3 n),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 5",O(n+r^2)?,"Stores current theta and Hessian matrix guess, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,989770366.8,1.01033536,0.0005142479546,7.91816E+15,126.29192,0.273704779,2.67238E+22,37419.82815,0.6929927154,3,,,Statistics
518,91.0,Maximum Likelihood Methods in Unknown Latent Variables,1.0,Maximum Likelihood Methods in Unknown Latent Variables,708.0,,0.0,1,1,O(n^3),,,[http://www.stat.ucla.edu/~ywu/research/papers/PXEM.pdf Parameter-expanded expectation maximization (PX-EM) (1998)],Parameter-expanded expectation maximization (PX-EM),1998,http://www.stat.ucla.edu/~ywu/research/papers/PXEM.pdf,,,,0.0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta (+ alpha) and Z guesses, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Statistics
519,91.0,Maximum Likelihood Methods in Unknown Latent Variables,1.0,Maximum Likelihood Methods in Unknown Latent Variables,709.0,,0.0,1,1,O(n^3),,,[https://academic.oup.com/biomet/article-abstract/80/2/267/251605?redirectedFrom=fulltext Expectation conditional maximization (ECM) (1993)],Expectation conditional maximization (ECM),1993,https://academic.oup.com/biomet/article-abstract/80/2/267/251605?redirectedFrom=fulltext,,,,0.0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta and Z guesses, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Statistics
520,91.0,Maximum Likelihood Methods in Unknown Latent Variables,1.0,Maximum Likelihood Methods in Unknown Latent Variables,710.0,,0.0,1,1,O(n^3),,,[https://www.jstor.org/stable/2337067 Expectation conditional maximization either (ECME) (Liu; Chuanhai; Rubin; Donald B) (1994)],Expectation conditional maximization either (ECME) (Liu; Chuanhai; Rubin; Donald B),1994,https://www.jstor.org/stable/2337067,,,,0.0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta and Z guesses, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,3,,11.29760188,Statistics
521,91.0,Maximum Likelihood Methods in Unknown Latent Variables,1.0,Maximum Likelihood Methods in Unknown Latent Variables,711.0,,0.0,1,1,O(n^3),,,[https://waseda.pure.elsevier.com/en/publications/the-%CE%B1-em-algorithm-surrogate-likelihood-maximization-using-%CE%B1-loga α-EM Algorithm (2003)],α-EM Algorithm,2003,https://waseda.pure.elsevier.com/en/publications/the-%CE%B1-em-algorithm-surrogate-likelihood-maximization-using-%CE%B1-loga,,,,0.0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta and Z guesses, which is updated each iteration. Also assumes description of alpha-log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Statistics
522,92.0,Collaborative Filtering,2.0,Matrix Factorization,714.0,,,1,1,O(n^3),Any distribution of values,Steps are the same regardless of input,[ LU Matrix Decomposition (1945)],LU Matrix Decomposition,1945,,,,,1.0,0,4.5,"n: 6,
n^2: 4.5",O(n^3),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Computes and stores (intermediate steps of) factorization,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,1,,1E+18,1,,1E+27,1,,3,,,Statistics
523,92.0,Collaborative Filtering,2.0,Matrix Factorization,715.0,,,1,1,O(n^2),Any distribution of values,Steps are the same regardless of input,[ QR Matrix Decomposition (1955)],QR Matrix Decomposition,1955,,,,,1.0,3->4,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Computes and stores (intermediate steps of) factorization,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1000,0.995262315,1000000000000,1000000,2.981071706,1E+18,1000000000,6.943282347,3,,,Statistics
524,92.0,Collaborative Filtering,2.0,Matrix Factorization,716.0,,,1,1,O(n^2),Any distribution of values,Steps are the same regardless of input,[ Cholesky Decomposition (1983)],Cholesky Decomposition,1983,,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Computes and stores (intermediate steps of) factorization,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,3,,,Statistics
525,96.0,Filtering Problem (Stochastic Processes),1.0,Filtering Problem (Stochastic Processes),753.0,,0.0,1,1,O(n^3),,,[ Kalman Filter (1960)],Kalman Filter,1960,,,,,1.0,0,6,n: 6,O(n^3),n: number of dimensions in state space,n,,,Word/Real RAM,words,5,n: 5,O(n^2)?,Generally works with a constant number of O(n)*O(n)-sized matrices per iteration,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000000.0,,1000000000000.0,,1e+18,,1000000000.0,1,,1E+18,1,,1E+27,1,,3,,,Statistics
526,96.0,Filtering Problem (Stochastic Processes),1.0,Filtering Problem (Stochastic Processes),754.0,,0.0,1,1,O(n^3),,,[ Particle filter Del Moral (1996)],Particle filter Del Moral,1996,,,,,0.0,0,6,n: 6,O(n^3),"n: number of dimensions in state space
N: number of particles used",n,,,Word/Real RAM,words,3,"n: 3,
N: 3",O(nN)?,Works with O(N) number of O(n)-sized vectors (containing information about particles) each iteration,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000.0,0.2115276586,1000000.0,0.4677992676,1000000000.0,0.77827941,1000000000.0,,,,,,,,,3,,,Statistics
527,96.0,Filtering Problem (Stochastic Processes),1.0,Filtering Problem (Stochastic Processes),757.0,,0.0,1,1,O(n^3),,,[https://ieeexplore.ieee.org/document/1098671 Kushner non-linear filter (1967)],Kushner non-linear filter,1967,https://ieeexplore.ieee.org/document/1098671,,,,0.0,0,6,n: 6,O(n^3),n: number of dimensions in state space,n,,,Word/Real RAM,words,5,n: 5,O(n^2)??,Generally works with a constant number of non-linear transformations; assumes that the description of the non-linear transformations is O(n^2),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Statistics
528,96.0,Filtering Problem (Stochastic Processes),1.0,Filtering Problem (Stochastic Processes),759.0,,0.0,1,1,O(n^2 log^2 n),,,[ Maybeck; Peter S Extended Kalman Filter (1979)],Maybeck; Peter S Extended Kalman Filter,1979,,,,,1.0,0,5.02,n: 5.02,O(n^2 \log^2 n),n: number of dimensions in state space,n,,,Word/Real RAM,words,5,n: 5,O(n^2)?,Generally works with a constant number of O(n)*O(n)-sized matrices per iteration,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9931685.0,,,,,,,,,3,,,Statistics
529,97.0,Optimal Policies for MDPs,2.0,Optimal Policies for MDPs,763.0,,,1,1,O(2^n),Any distribution of values,Steps are the same regardless of input,[https://www.jstor.org/stable/24900506 Bellman Value Iteration (VI) (1957)],Bellman Value Iteration (VI),1957,https://www.jstor.org/stable/24900506,,,,1.0,0,8,n: 8,O(2^n),n: number of states,n,,,Word/Real RAM,words,3,n: 3,O(n),"Only needs to store values (V) and policy (pi), both size O(n)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Robotics
530,97.0,Optimal Policies for MDPs,2.0,Optimal Policies for MDPs,764.0,,,1,1,O(n^3),Any distribution of values,Steps are the same regardless of input,[http://web.mit.edu/dimitrib/www/dpchapter.pdf Howard Policy Iteration (PI) (1960)],Howard Policy Iteration (PI),1960,http://web.mit.edu/dimitrib/www/dpchapter.pdf,,,,1.0,1->3,6,n: 6,O(n^3),n: number of states,n,,,Word/Real RAM,words,3,n: 3,O(n),"Only needs to store values (V) and policy (pi), both size O(n)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,Inf,inf,1E+18,Inf,inf,1E+27,Inf,inf,1,,,Robotics
531,97.0,Optimal Policies for MDPs,2.0,Optimal Policies for MDPs,765.0,,,1,1,O(n^3),Any distribution of values,Steps are the same regardless of input,[ Puterman Modified Policy Iteration (MPI) (1974)],Puterman Modified Policy Iteration (MPI),1974,,,,,0.0,0,6,n: 6,O(n^3),n: number of states,n,,,Word/Real RAM,words,3,n: 3,O(n),"Only needs to store values (V) and policy (pi), both size O(n)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,1,,,Robotics
532,98.0,The Set-Covering Problem,1.0,,,,,1,1,O(U 2^n),,,[ Brute force (1972)],Brute force,1972,,,,,1.0,0,8,"n: 8,
U: 3",O(U 2^n),"n: number of sets
U: size of universe",n,,,Word RAM,words,1,"U: 3,
n: 1",O(U),,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
533,99.0,Motif Search,1.0,Motif Search,775.0,"Uses oligonucleotides? Also only detects ""short"" motifs, and used for yeast",,1,1,O(nm),,,[https://www.ncbi.nlm.nih.gov/pubmed/9719638 Helden Oligo-Analysis (1998)],Helden Oligo-Analysis,1998,https://www.ncbi.nlm.nih.gov/pubmed/9719638,,,,0.0,0,3,"n: 3,
m: 3,
mn: 3",O(mn),"n: number of sequences
m: length of sequences",mn,,,Word RAM,words,2.5,"m: 3,
mn: 2.5",O(m),Derived: store number of occurances for each motif of a specified length,1.0,0.0,,0,,0,,0,0,,0,0,"https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-8-S7-S21#MOESM1
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6490410/table/T1/?report=objectonly",,,,,500.0,6.93700526,500000.0,78.3700526,500000000.0,792.700526,,,,,,,,,,4,,,Bioinformatics
534,99.0,Motif Search,1.0,Motif Search,776.0,Dyad analysis,,1,1,O(nm),,,[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC102821/ van Helden J; Rios AF; Collado-Vides J (2000)],van Helden J; Rios AF; Collado-Vides J,2000,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC102821/,,,,0.0,0,3,"n: 3,
m: 3,
mn: 3",O(mn),"n: number of sequences
m: length of sequences",mn,,,Word RAM,words,2.5,"m: 3,
mn: 2.5",O(m),Derived: store number of occurances for each motif of a specified length,1.0,0.0,,0,,0,,0,0,,0,0,https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-8-S7-S21#MOESM2,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics
535,99.0,Motif Search,1.0,Motif Search,777.0,,,1,1,O(nm),,,[https://www.aaai.org/Papers/ISMB/1999/ISMB99-030.pdf Tompa M (1999)],Tompa M,1999,https://www.aaai.org/Papers/ISMB/1999/ISMB99-030.pdf,,,,0.0,0,3,"n: 3,
m: 3,
mn: 3",O(mn),"n: number of sequences
m: length of sequences",mn,,,Word RAM,words,3,"m: 5,
mn: 3",O(m^2),"Requires considering an $O(m^2)*O(m^2)$ matrix with $O(m^2)$ nonzero entries, based on a DFA with $O(m^2)$ states",1.0,0.0,,0,,0,,0,0,,0,0,https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-8-S7-S21#MOESM3,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics
536,99.0,Motif Search,1.0,Motif Search,778.0,,,1,1,O(n^{0.66} m),,,[https://www.ncbi.nlm.nih.gov/pubmed/10977095 Sinha S; Tompa M YMF (Yeast Motif Finder) (2000)],Sinha S; Tompa M YMF (Yeast Motif Finder),2000,https://www.ncbi.nlm.nih.gov/pubmed/10977095,,,,1.0,0,2.83,"n: 2.66,
m: 3,
mn: 2.83",O(n^{0.66} m),"n: number of sequences
m: length of sequences",mn,,,Word RAM,words,2.5,"m: 3,
mn: 2.5",O(m),Derived: store number of occurances for each motif of a specified length,1.0,0.0,,0,,0,,0,0,,0,0,https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-8-S7-S21#MOESM4,,,,,,,,,,,30219.70407,1215.55493,0.8074427458,2885959334,601690.1504,2.031198718,275606976773734,215300165.9,3.947893734,4,,,Bioinformatics
537,99.0,Motif Search,1.0,Motif Search,780.0,,,1,1,O(n^2m^2),,,[https://link.springer.com/article/10.1007/BF00993379 Bailey TL; Elkan C MEME (1995)],Bailey TL; Elkan C MEME,1995,https://link.springer.com/article/10.1007/BF00993379,,,,1.0,0,5,"m: 5,
n: 5,
mn: 5",O(n^2m^2),"n: number of sequences
m: length of sequences",mn,https://link.springer.com/article/10.1007/BF00993379,0.0,Word RAM,words,3,"n: 3,
m: 3,
mn: 3",O(mn),"Uses iterations of the EM algorithm as in (Lawrence, Reilly 1990), and thus uses similar amounts of space",1.0,0.0,,0,,0,,0,0,,0,0,https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-8-S7-S21#MOESM6,,,,,250000.0,,250000000000.0,,2.5e+17,,,,,,,,,,,4,,,Bioinformatics
538,99.0,Motif Search,1.0,Motif Search,783.0,,,1,1,O(nm^{0.5}),,,[https://www.worldscientific.com/doi/10.1142/S0219720004000466 Liang Cwinnower (2003)],Liang Cwinnower,2003,https://www.worldscientific.com/doi/10.1142/S0219720004000466,,,,1.0,0,2.75,"n: 3,
m: 2.5,
mn: 2.75",O(nm^{0.5}),"n: number of sequences
m: length of sequences",mn,,,Word RAM,words,3,"m: 5,
mn: 3",O(m^2),Considers a graph on $O(m)$ nodes and $O(m^2)$ edges,1.0,0.0,,0,,0,,0,0,,0,0,https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-8-S7-S21#MOESM9,,,,,,,,,,,11180.33989,3285.562929,0.7156972401,353553390.6,4911431.631,1.793061768,11180339887499,5307372442,3.449644392,4,,,Bioinformatics
539,99.0,Motif Search,1.0,Motif Search,789.0,ILP formulation,,1,1,O(mn),,,[https://link.springer.com/chapter/10.1007/11780441_22 Kingsford (2006)],Kingsford,2006,https://link.springer.com/chapter/10.1007/11780441_22,,,,0.0,0,3,"m: 3,
n: 3,
mn: 3",O(mn),"n: number of sequences
m: length of sequences",mn,,,Word RAM,words,5,"n: 5,
m: 5,
mn: 5",O(m^2n^2),"Creates an ILP with $O(m^2n^2)$ variables and $O(n^2m)$ constraints, each involving $O(m)$ variables",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics
540,100.0,All Maximal Non-Branching Paths in a Graph,1.0,All Maximal Non-Branching Paths in a Graph,791.0,,0.0,1,1,O(m),Any distribution,(need to read entire input),[http://rosalind.info/problems/ba3m/ Naive (1940)],Naive,1940,http://rosalind.info/problems/ba3m/,,,,1.0,0,5,"m: 3,
n: 5",O(m),"n: number of vertices
m: number of edges",n,,,Word RAM,words,3,n: 3,O(n)?,"For each vertex, store whether that vertex is a 1-in-1-out vertex (all of these can be pre-computed at the same time in $O(m)$ time). Unclear if there's a better bound",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Bioinformatics
541,101.0,Link Analysis,1.0,InDegree Analysis,792.0,,,1,1,O(m^2 n ),,,[https://www.w3.org/People/Massimo/papers/quest_hypersearch.pdf The INDEGREE Algorithm (1997)],The INDEGREE Algorithm,1997,https://www.w3.org/People/Massimo/papers/quest_hypersearch.pdf,,,,1.0,0,6,"m: 3,
n: 6",O(mn),"n: number of pages
m: number of hyperlinks?",n,,,Word RAM,words,3,n: 3,O(n),Must maintain a list of visited nodes to eliminate duplication.,1.0,0.0,,0,,0,,0,0,,0,0,https://dl.acm.org/doi/pdf/10.1145/1052934.1052942,,,,,,,,,,,125000000.0,1,,1.25E+17,1,,1.25E+26,1,,3,,,Combinatorics
542,153.0,Link Analysis,1.0,Link Analysis,793.0,,,1,1,O(m n ),,,[http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf The PAGERANK Algorithm (1998)],The PAGERANK Algorithm,1998,http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf,,,,1.0,3->4,6,"m: 3,
n: 6",O(m n ),"n: number of pages
m: number of hyperlinks?",n,,,Word RAM,words,3,n: 3,O(n),Stores and updates an O(n)-sized vector designed to converge to some sort of stationary distribution,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,250000.0,500,499.0,250000000000,500000,499999.0,2.5E+17,500000000,499999999.0,3,,,Combinatorics
543,153.0,Link Analysis,1.0,Link Analysis,794.0,,,1,1,O(n^2 k),,,[https://dl.acm.org/doi/pdf/10.1145/324133.324140 The (Hyperlink-Induced Topic Search) HITS Algorithm (1998)],The (Hyperlink-Induced Topic Search) HITS Algorithm,1998,https://dl.acm.org/doi/pdf/10.1145/324133.324140,,,,1.0,0,5,n: 5,O(n^2 k),"n: number of pages
m: number of hyperlinks?
k: number of iterations",n,,,Word RAM,words,3,n: 3,O(n),Stores and updates hub and authority values per node,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/HITS_algorithm#Algorithm,,,,,,,,,,,125000000.0,1,,1.25E+17,1,,1.25E+26,1,,3,,,Combinatorics
544,153.0,Link Analysis,1.0,Link Analysis,796.0,,,1,1,O(m^2 n ),,,[https://dl.acm.org/doi/abs/10.1145/382979.383041 The (Stochastic Approach for Link Structure Analysis) SALSA Algorithm (2000)],The (Stochastic Approach for Link Structure Analysis) SALSA Algorithm,2000,https://dl.acm.org/doi/abs/10.1145/382979.383041,,,,0.0,0,7,"m: 5,
n: 7",O(m^2 n ),"n: number of pages
m: number of hyperlinks?",n,,,Word RAM,words,3,n: 3,O(n)?,Stores and updates two O(n)-sized vectors (corresponding to 2 random walks) designed to converge to some sort of stationary distribution,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
545,153.0,Link Analysis,1.0,Link Analysis,797.0,,,1,1,O(m nlogn ),,,[https://dl.acm.org/doi/pdf/10.1145/383952.384003 Randomized HITS (2001)],Randomized HITS,2001,https://dl.acm.org/doi/pdf/10.1145/383952.384003,,,,0.0,0,6.01,"m: 3,
n: 6.01",O(m n\log n ),"n: number of pages
m: number of hyperlinks?",n,,,Word RAM,words,3,n: 3,O(n),Stores and updates hub and authority values per node,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
546,153.0,Link Analysis,1.0,Link Analysis,798.0,,,1,1,O(m n ),,,[http://web.cse.msu.edu/~cse960/Papers/LinkAnalysis/phits.pdf PHITS Coheng Chan (2000)],PHITS Coheng Chan,2000,http://web.cse.msu.edu/~cse960/Papers/LinkAnalysis/phits.pdf,,,,0.0,0,6,"m: 3,
n: 6",O(m n ),"n: number of pages
m: number of hyperlinks?
z: # of topics/categories",n,,,Word RAM,words,3,"n: 3,
z: 3",O(nz)?,"Needs to store P(z), P(d|z), and P(c|z) after each EM iteration (algorithm can be smart about intermediate calculations as to not use more than O(nz) space)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
547,153.0,Link Analysis,1.0,Link Analysis,799.0,PageRank with categories/topics,,1,1,O(m n ),,,[http://www-cs-students.stanford.edu/~taherh/papers/topic-sensitive-pagerank.pdf Haveliwala (2002)],Haveliwala,2002,http://www-cs-students.stanford.edu/~taherh/papers/topic-sensitive-pagerank.pdf,,,,0.0,0,6,"m: 3,
n: 6",O(m n ),"n: number of pages
m: number of hyperlinks?
z: # of topics/categories",n,,,Word RAM,words,3,"n: 3,
z: 3",O(nz)?,Stores and updates z O(n)-sized vectors designed to converge to some stationary distributions,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
548,153.0,Link Analysis,1.0,Link Analysis,800.0,Personalized PageRank with hubs,,1,1,O(m n ),,,[http://infolab.stanford.edu/~glenj/spws.pdf Jeh and Widom (2003)],Jeh and Widom,2003,http://infolab.stanford.edu/~glenj/spws.pdf,,,,0.0,0,6,"m: 3,
n: 6",O(m n ),"n: number of pages
m: number of hyperlinks?
h: number of ""hub"" pages",n,,,Word RAM,words,3,"n: 3,
h: 3",O(nh),Stores and updates z O(n)-sized vectors designed to converge to some basis vectors,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
549,153.0,Link Analysis,1.0,Link Analysis,801.0,Query-dependent PageRank,,1,1,O(m n ),,,[https://homes.cs.washington.edu/~pedrod/papers/nips01b.pdf  Richardson and Domingos (2002)], Richardson and Domingos,2002,https://homes.cs.washington.edu/~pedrod/papers/nips01b.pdf,,,,0.0,0,6,"m: 3,
n: 6",O(m n ),"n: number of pages
m: number of hyperlinks?
l: number of words in lexicon",n,,,Word RAM,words,3,"n: 3,
l: 3",O(nl),See paper (noting that sum d_q can be as high as O(nl)),0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
550,153.0,Link Analysis,1.0,Link Analysis,802.0,,,1,1,O(m n ),,,[https://dl.acm.org/doi/10.1145/775152.775202 Tomlin (2003)],Tomlin,2003,https://dl.acm.org/doi/10.1145/775152.775202,,,,0.0,0,6,"m: 3,
n: 6",O(m n ),"n: number of pages
m: number of operations per page?",n,,,Word RAM,words,3,n: 3,O(n)?,Generally computes O(n) values per iteration (row + column sums and their ratios); algorithm can be smart about intermediate calculations as to not use more space asymptotically,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
551,153.0,Link Analysis,1.0,Link Analysis,803.0,,,1,1,O(mn ),,,[https://homes.cs.washington.edu/~karlin/papers/web-search.pdf Achlioptas (2001)],Achlioptas,2001,https://homes.cs.washington.edu/~karlin/papers/web-search.pdf,,,,0.0,0,6,"m: 3,
n: 6",O(mn ),"n: number of pages
m: number of operations per page?
l: number of words in lexicon",n,,,Word RAM,words,5,"n: 5,
l: 5",O((n+l)^2)?,Computes a constant number of SVDs of O((n+l)^2)-sized matrices,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
552,103.0,Distributed Locking Algorithms,1.0,Distributed Locking Algorithms,805.0,,0.0,1,1,O(n),,,[https://web.stanford.edu/class/cs240/readings/89-leases.pdf Leases (Cary G Gray and David R Cheriton) (1989)],Leases (Cary G Gray and David R Cheriton),1989,https://web.stanford.edu/class/cs240/readings/89-leases.pdf,2,0.0,https://web.stanford.edu/class/cs240/readings/89-leases.pdf,1.0,0,3,n: 3,O(n),"n: number of clients?
f: number of files?",n,,,,words,1,"n: 1,
f: 3",O(f)?,Generally need to keep track of one lease/lock per file (exclusivity),1.0,0.0,,0,,0,,0,0,,0,0,(see below),,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Operating Systems
553,103.0,Distributed Locking Algorithms,1.0,Distributed Locking Algorithms,806.0,,0.0,1,1,O(n),,,[https://dl.acm.org/doi/10.5555/1298455.1298487 Chubby (Mike Burrows) (2006)],Chubby (Mike Burrows),2006,https://dl.acm.org/doi/10.5555/1298455.1298487,,,,0.0,0,3,n: 3,O(n),"n: number of clients?
f: number of files?",n,,,,words,1,"n: 1,
f: 3",O(f)?,Generally need to keep track of one lock per file (exclusivity),1.0,0.0,,0,,0,,0,0,,0,0,"https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html

https://redis.io/topics/distlock

https://medium.com/coinmonks/chubby-a-centralized-lock-service-for-distributed-applications-390571273052",,,,,,,,,,,1000.0,,,,,,,,,6,,,Operating Systems
554,104.0,Cyclic Peptide Sequencing Problem,2.0,Cyclic Peptide Sequencing Problem,816.0,,,1,1,2^{(O(n))},,,[ Brute force (1987)],Brute force,1987,,1,1.0,,1.0,0,8,n: 8,$2^{O(n)}$,"n: size of peptide, in daltons
m: number of elements in experimental spectrum",n,,,Word/Real RAM,words,3,n: 3,O(n),Keeps track of current amino acid sequence being checked,1.0,0.0,,0,,0,,0,0,,0,0,https://averyparkinson23.medium.com/sequencing-antibiotics-using-bioinformatics-2af1373ee009,,,,,,,,,,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Bioinformatics
555,104.0,Cyclic Peptide Sequencing Problem,2.0,Cyclic Peptide Sequencing Problem,817.0,Improvement on brute force (despite not doing better asymptotically),,1,1,2^{(O(n))},,,[ Branch and bound (1993)],Branch and bound,1993,,1,1.0,,1.0,4->5,8,n: 8,$2^{O(n)}$,"n: size of peptide, in daltons
m: number of elements in experimental spectrum",n,,,Word/Real RAM,words,8,n: 8,$O(2^{O(n)})$,Keeps track of all possible not fully expanded amino acid sequences so far,1.0,0.0,,0,,0,,0,0,,0,0,https://github.com/xuwd11/Coursera-Bioinformatics/blob/master/23_04_CyclopeptideSequencing.py,,,,,,,,,,,9965.0,100.3512293,,19931568.57,50171.66594,,29897352854,33447777.3,,4,,,Bioinformatics
556,107.0,Point-in-Polygon,2.0,Point-in-Polygon,830.0,,,1,1,O(n),,,[https://dl.acm.org/doi/pdf/10.1145/368637.368653 Ray casting algorithm Shimrat; M (1962)],Ray casting algorithm Shimrat; M,1962,https://dl.acm.org/doi/pdf/10.1145/368637.368653,7,0.0,,1.0,0,3,n: 3,O(n),n: number of edges of polygon,n,,,Real RAM,words,1,n: 1,O(1),Only need to keep track of ray direction and how many polygon sides intersect with the ray,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Image Processing
557,107.0,Point-in-Polygon,2.0,Point-in-Polygon,831.0,,,1,1,O(a),,,[https://doi.org/10.1007/BF01934125 Nordbeck and Rystedt (Grid Method) (1967)],Nordbeck and Rystedt (Grid Method),1967,https://doi.org/10.1007/BF01934125,,,,0.0,0,3,n: 3,O(n),n: number of edges of polygon,n,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,0.0,Real RAM,words,3,n: 3,O(n),https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,0.0,0.0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000.0,,,,,,,,,6,,,Image Processing
558,107.0,Point-in-Polygon,2.0,Point-in-Polygon,832.0,,,1,1,O(nlogn),,,[https://doi.org/10.1016/0098-3004(78)90085-7 Salomon (Swath Method) (1978)],Salomon (Swath Method),1978,https://doi.org/10.1016/0098-3004(78)90085-7,,,,0.0,0,4,n: 4,O(n\log n),n: number of edges of polygon,n,,,Real RAM,words,5,n: 5,O(n^2),https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,0.0,0.0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,,,,,,,,,,6,,,Image Processing
559,107.0,Point-in-Polygon,2.0,Point-in-Polygon,833.0,,,1,1,O(n),,,[https://doi.org/10.1007/BF01934125 Nordbeck and Rystedt (Sum of area) (1967)],Nordbeck and Rystedt (Sum of area),1967,https://doi.org/10.1007/BF01934125,,,,0.0,0,3,n: 3,O(n),n: number of edges of polygon,n,,,Real RAM,words,1,n: 1,O(1),Only need to keep track of current triangle and total area sum,1.0,0.0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000.0,,,,,,,,,6,,,Image Processing
560,107.0,Point-in-Polygon,2.0,Point-in-Polygon,834.0,,,1,1,O(n),,,[http://www.cs.kent.edu/~dragan/CG/CG-Book.pdf Preparata and Shamos (Wedge) (1985)],Preparata and Shamos (Wedge),1985,http://www.cs.kent.edu/~dragan/CG/CG-Book.pdf,,,,0.0,0,3,n: 3,O(n),n: number of edges of polygon,n,,,Real RAM,words,3,n: 3,O(n),https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,0.0,0.0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000.0,,,,,,,,,6,,,Image Processing
561,107.0,Point-in-Polygon,2.0,Point-in-Polygon,835.0,,,1,1,O(n),,,[https://doi.org/10.1080/02693798708927823 Saalfeld (Sign of offset) (1987)],Saalfeld (Sign of offset),1987,https://doi.org/10.1080/02693798708927823,,,,0.0,0,3,n: 3,O(n),n: number of edges of polygon,n,,,Real RAM,words,1,n: 1,O(1),Only need to keep track of current sides (2) being looked at,1.0,0.0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000.0,,,,,,,,,6,,,Image Processing
562,107.0,Point-in-Polygon,2.0,Point-in-Polygon,836.0,,,1,1,O(n),,,[http://www.cs.kent.edu/~dragan/CG/CG-Book.pdf Preparata and Shamos (Intersection sum of angle) (1985)],Preparata and Shamos (Intersection sum of angle),1985,http://www.cs.kent.edu/~dragan/CG/CG-Book.pdf,,,,0.0,0,3,n: 3,O(n),n: number of edges of polygon,n,,,Real RAM,words,1,n: 1,O(1),Only need to keep track of current angle and cumulative angle sum,1.0,0.0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000.0,,,,,,,,,6,,,Image Processing
563,107.0,Point-in-Polygon,2.0,Point-in-Polygon,837.0,,,1,1,O(n),,,[https://doi.org/10.1007/BF01934125 Nordbeck and Rystedt (Orientation) (1967)],Nordbeck and Rystedt (Orientation),1967,https://doi.org/10.1007/BF01934125,,,,0.0,0,3,n: 3,O(n),n: number of edges of polygon,n,,,Real RAM,words,1,n: 1,O(1),Only need to keep track of current side being looked at,1.0,0.0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000.0,,,,,,,,,6,,,Image Processing
564,110.0,Clock Synchronization in Distributed Systems,2.0,Clock Synchronization in Distributed Systems,879.0,,0.0,1,1,O(n),,,[https://ieeexplore.ieee.org/document/1281624 ASP (2005)],ASP,2005,https://ieeexplore.ieee.org/document/1281624,1,1.0,,1.0,0,3,n: 3,O(n),n: number of nodes in network,n,,,Word/Real RAM (per node),words,3,n: 3,O(n) (per node),"Each node needs to keep track of O(1) information about itself, and O(1) information per neighbor for synchronization purposes",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Operating Systems
565,110.0,Clock Synchronization in Distributed Systems,1.0,Clock Synchronization in Distributed Systems,880.0,,0.0,1,1,O(n),,,[https://www.researchgate.net/publication/224306349_Clock-Sampling_Mutual_Network_Synchronization_for_Mobile_Multi-hop_Wireless_Ad_Hoc_Networks Clock-sampling mutual network synchronization (2007)],Clock-sampling mutual network synchronization,2007,https://www.researchgate.net/publication/224306349_Clock-Sampling_Mutual_Network_Synchronization_for_Mobile_Multi-hop_Wireless_Ad_Hoc_Networks,,,,0.0,0,3,n: 3,O(n),n: number of nodes in network,n,,,Word/Real RAM (per node),words,1,n: 1,O(1)? (per node),"Only needs to keep track of multiplicative correction $s$, its own clocks, and possibly O(1) other info",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1.0,9.0,1.0,99.0,1.0,999.0,1000.0,,,,,,,,,6,,,Operating Systems
566,110.0,Clock Synchronization in Distributed Systems,1.0,Clock Synchronization in Distributed Systems,881.0,,0.0,1,1,O(n),,,[https://ieeexplore.ieee.org/document/4359404 MATSF (2004)],MATSF,2004,https://ieeexplore.ieee.org/document/4359404,,,,0.0,0,3,n: 3,O(n),n: number of nodes in network,n,,,Word/Real RAM (per node),words,3,n: 3,O(n)? (per node),"Each node needs to keep track of O(1) information about itself, and O(1) information per neighbor for synchronization purposes",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000.0,,1000000.0,,1000000000.0,,1000.0,,,,,,,,,6,,,Operating Systems
567,116.0,d-Neighborhood of a String,2.0,d-Neighborhood of a String,911.0,,0.0,1,1,"$O(f_{bin}(\sigma-1, n, d))$ where $f_{bin}(x, y, z) = sum_{i=0}^z C(y, i)*x^i$",Any distribution,(output is of that size),[http://rosalind.info/problems/ba1n/ Iterative naive (1940)],Iterative naive,1940,http://rosalind.info/problems/ba1n/,1,1.0,,1.0,0,8,n: 8,"O(f_{bin}(sigma-1, n, d)) where f_{bin}(x, y, z) = sum_{i=0}^z C(y, i)*x^i","n: length of string
d: neighborhood distance threshold
sigma: size of alphabet",n,,,Word RAM,words,3,n: 3,O(n),"Keep track of which indices the differing letters are on, along with which set of letters are replacing the letters in these indices",1.0,0.0,,0,,0,,0,0,,0,0,http://rosalind.info/problems/ba1n/,,,,,,,,,,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Bioinformatics
568,119.0,Determinant of Matrices with Integer Entries,2.0,Determinant of Matrices with Integer Entries,919.0,,,1,1,O(n^5L^2 (log(n)^2 + L^2)),Any distribution of values?,(behavior same across all inputs),[https://www.ams.org/journals/mcom/1968-22-103/S0025-5718-1968-0226829-0/S0025-5718-1968-0226829-0.pdf Bareiss algorithm (1968)],Bareiss algorithm,1968,https://www.ams.org/journals/mcom/1968-22-103/S0025-5718-1968-0226829-0/S0025-5718-1968-0226829-0.pdf,,,,1.0,0,5.52,"n: 7,
L: 7,
n^2: 5.52",O(n^5 L^2 (\log(n)^2 + L^2)),"n: dimension of matrix
L: maximum length (in bits) of any entry",n^2,,,Word RAM? (without O(1) multiplication),bits,4.51,"n: 6,
L: 3,
n^2: 4.51",O(n^2(n*log(n)+nL)),Keeps track of $O(n^2)$ entries that have absolute value at most $O(n^{(n/2)}2^{(nL)})$,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Bareiss_algorithm,,,,,,,,,,,6.2801e+20,1,,2.80003E+42,1,,6.52388E+63,1,,2,,,Numerical Analysis
569,119.0,Determinant of Matrices with Integer Entries,2.0,Determinant of Matrices with Integer Entries,920.0,,,1,1,O(n^4L(log(n) + L)log(log(n) + L)),Any distribution of values?,(behavior same across all inputs),[- Bareiss algorithm with fast multiplication (1968)],Bareiss algorithm with fast multiplication,1968,-,,,,1.0,0,5.011,"n: 7,
L: 5.01,
n^2: 5.011",O(n^4 L (\log(n) + L) \log(\log(n) + L)),"n: dimension of matrix
L: maximum length (in bits) of any entry",n^2,,,Word RAM? (without O(1) multiplication),bits,4.51,"n: 6,
L: 3,
n^2: 4.51",O(n^2(n*log(n)+nL)),Keeps track of $O(n^2)$ entries that have absolute value at most $O(n^{(n/2)}2^{(nL)})$,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Bareiss_algorithm,,,,,,,,,,,100661655579702.0,6238821.104,,1.3259E+29,21117970662591,,1.51652E+44,4.30188E+19,,2,,,Numerical Analysis
570,120.0,Integer Relation,2.0,Integer Relation,921.0,,,1,1,O(n^3),,,[https://www.ams.org/journals/bull/1979-01-06/S0273-0979-1979-14691-3/S0273-0979-1979-14691-3.pdf Ferguson–Forcade algorithm (1979)],Ferguson–Forcade algorithm,1979,https://www.ams.org/journals/bull/1979-01-06/S0273-0979-1979-14691-3/S0273-0979-1979-14691-3.pdf,,,,1.0,0,6,n: 6,O(n^3),n: number of real numbers to find integer relation for,n,,,Word RAM,words,5,n: 5,O(n^2),Derived: Uses auxiliary $n\times n$ matrices,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,1,,1E+18,1,,1E+27,1,,3,,,Numerical Analysis
571,120.0,Integer Relation,2.0,Integer Relation,922.0,Lattice-based,,1,1,O(n^4),,,[https://www.math.leidenuniv.nl/~hwl/PUBLICATIONS/1982f/art.pdf LLL algorithm (1982)],LLL algorithm,1982,https://www.math.leidenuniv.nl/~hwl/PUBLICATIONS/1982f/art.pdf,,,,0.0,0,7,n: 7,O(n^4),n: number of real numbers to find integer relation for,n,https://www.math.leidenuniv.nl/~hwl/PUBLICATIONS/1982f/art.pdf,0.0,Word RAM,words,5,n: 5,O(n^2),"Derived: Uses n auxiliary vectors each of length n, as well as an nxn matrix",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Numerical Analysis
572,120.0,Integer Relation,2.0,Integer Relation,924.0,Partial Sum of Squares,,1,1,O(n^3),,,[https://www.ams.org/journals/mcom/1989-53-188/S0025-5718-1989-0979934-9/S0025-5718-1989-0979934-9.pdf PSOS algorithm (1988)],PSOS algorithm,1988,https://www.ams.org/journals/mcom/1989-53-188/S0025-5718-1989-0979934-9/S0025-5718-1989-0979934-9.pdf,,,,0.0,0,6,n: 6,O(n^3),n: number of real numbers to find integer relation for,n,,,Word RAM,words,5,n: 5,O(n^2),Derived: Uses multiple nxn auxiliary matrices,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Numerical Analysis
573,120.0,Integer Relation,2.0,Integer Relation,925.0,Partial Sum of Squares using QR decomposition,,1,1,O(n^3),,,[https://www.ams.org/journals/mcom/1999-68-225/S0025-5718-99-00995-3/S0025-5718-99-00995-3.pdf PSLQ algorithm (1992)],PSLQ algorithm,1992,https://www.ams.org/journals/mcom/1999-68-225/S0025-5718-99-00995-3/S0025-5718-99-00995-3.pdf,,,,0.0,0,6,n: 6,O(n^3),n: number of real numbers to find integer relation for,n,,,Word RAM,words,5,n: 5,O(n^2),Derived: Uses multiple nxn auxiliary matrices,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Numerical Analysis
574,122.0,Sequence-to-Graph Alignment,1.0,Sequence-to-Graph Alignment,932.0,,,1,1,O(m(|V | log |V | + |E|)),,,[https://link.springer.com/chapter/10.1007/3-540-63307-3_56 Amir et al. (1997)],Amir et al.,1997,https://link.springer.com/chapter/10.1007/3-540-63307-3_56,1,0.0,https://reader.elsevier.com/reader/sd/pii/S0196677499910635?token=B149D19F22DC42C8DCC1DFAA76A22B88E61FC2018BF3ED1937F7C5951F9BD810C4726C3153D36F697AE499721F3422A1,1.0,0,6,"V: 6,
E: 3,
m: 3,
N: 6",O(m(n \log m + E)),"V: number of vertices in original hypertext graph
E: number of edges in original hypertext graph
m: length of pattern
n: number of vertices in converted graph (total text size)
e: number of edges in converted graph",N,,,Word RAM,words,6,"m: 3,
n: 6,
N: 6",O(mn),https://www.sciencedirect.com/science/article/pii/S0304397599003333,0.0,0.0,,0,,0,,0,0,,0,0,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,,,"V:E
2:3
m = 300",120000.0,,120000000.0,,120000000000.0,,1217262.743,1,,2413156857,1,,3609050971092,1,,3,,,Combinatorics
575,122.0,Sequence-to-Graph Alignment,1.0,Sequence-to-Graph Alignment,933.0,,,1,1,O(m(|V | + |E|)) ,,,[https://www.sciencedirect.com/science/article/pii/S0304397599003333 Navarro (2000)],Navarro,2000,https://www.sciencedirect.com/science/article/pii/S0304397599003333,3,1.0,https://reader.elsevier.com/reader/sd/pii/S0304397599003333?token=C0E6BDF7BA98CD5C338EDB86675CB3A29AF44F5B046E169EE0F115788255757C815F0F0307EAF080CDF9A9DE7AA37764,1.0,3->4,5,"V: 5,
E: 3,
m: 3,
N: 5",O(n(V + E)) ,"total text size $n$, vertices $V$, edges $E$",N,,,Word RAM,words,3,"V: 3,
N: 3",O(V),https://www.sciencedirect.com/science/article/pii/S0304397599003333,0.0,1.0,,0,,0,,0,0,,0,0,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,,,,400.0,5.694329501,400000.0,5.694329501,400000000.0,5.694329501,300000.0,4.057542476,0.5949767558,300000000,8.04385619,1.003648024,300000000000,12.0301699,1.291345542,3,,,Combinatorics
576,122.0,Sequence-to-Graph Alignment,2.0,Sequence-to-Graph Alignment,934.0,,,1,1,O(m(|V | log(m|V |) + |E|)),,,[https://www.ncbi.nlm.nih.gov/pubmed/26589280 HybridSpades (2015)],HybridSpades,2015,https://www.ncbi.nlm.nih.gov/pubmed/26589280,,,,0.0,0,7,"V: 7,
E: 3,
m: 4,
N: 7",O(m(V \log(mV) + E)),"string length $m$, vertices V, edges E",N,,,Word RAM,words,7,"m: 3,
V: 7,
E: 3,
N: 7",O(m*(V+E)),,1.0,0.0,,0,,0,,0,0,,0,0,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
577,122.0,Sequence-to-Graph Alignment,2.0,Sequence-to-Graph Alignment,935.0,Dynamic Programming,,1,1,O(mVE) ,,,[https://www.biorxiv.org/content/10.1101/124941v1.full V-ALIGN (2018)],V-ALIGN,2018,https://www.biorxiv.org/content/10.1101/124941v1.full,,,,0.0,0,6,"V: 6,
E: 3,
m: 3,
N: 6",O(mVE) ,"m: length of input sequence
V: number of vertices
E: number of edges",N,https://www.biorxiv.org/content/10.1101/124941v1.full,0.0,Word RAM,words,3,"V: 3,
m: 3,
N: 3",O(mV),https://www.biorxiv.org/content/10.1101/124941v1.full,0.0,1.0,,0,,0,,0,0,,0,0,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
578,122.0,Sequence-to-Graph Alignment,2.0,Sequence-to-Graph Alignment,936.0,,,1,1,O(V+ mE),,,[https://www.biorxiv.org/content/10.1101/216127v1 Rautiainen and Marschall (2017)],Rautiainen and Marschall,2017,https://www.biorxiv.org/content/10.1101/216127v1,,,,0.0,0,5,"V: 5,
E: 3,
m: 3,
N: 5",O(V+ mE),"m: length of input sequence
V: number of vertices
E: number of edges",N,https://www.biorxiv.org/content/10.1101/216127v1,0.0,Word RAM,words,3,"V: 3,
m: 2.5,
N: 3",$O(\sqrt(m)V)$,https://www.biorxiv.org/content/10.1101/216127v1,0.0,1.0,,0,,0,,0,0,,0,0,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
579,122.0,Sequence-to-Graph Alignment,2.0,Sequence-to-Graph Alignment,937.0,,,1,1,O(V+ mE),,,"[https://www.biorxiv.org/content/10.1101/522912v1.full.pdf Jain, Chang (2019)]","Jain, Chang",2019,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,,,0.0,0,5,"V: 5,
E: 3,
m: 3,
N: 5",O(V+ mE),"m: length of input sequence
V: number of vertices
E: number of edges",N,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,0.0,Word RAM,words,3,"V: 3,
N: 3",O(V),https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,0.0,1.0,,0,,0,,0,0,,0,0,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
580,123.0,Logarithm Calculations,2.0,Discrete Logarithm Over Finite Fields,939.0,,,1,1,O(2^n),,,[NA Trial Multiplication (1940)],Trial Multiplication,1940,,,,,0.0,0,8,n: 8,O(2^n),n: number of digits/bits in the order of the finite group,n,,,Word RAM,words,1,n: 1,$O(1)$,"Derived: Each power $k$ that you try in the brute force search is size $O(\log n)$, which is $O(1)$ when considering $O(\log n)$ size words. Only need to keep track of one at a time.",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Discrete_logarithm#Algorithms,,,,,1.0,,1.0,,1.0,,inf,,,,,,,,,1,,,Statistics
581,123.0,Logarithm Calculations,2.0,Discrete Logarithm Over Finite Fields,940.0,,,1,1,O(2^{\sqrt{n}}),,,[https://doi.org/10.1090/pspum/020 Baby-step Giant-step (1971)],Baby-step Giant-step,1971,https://doi.org/10.1090/pspum/020,,,,0.0,0,8,n: 8,O(2^{\sqrt{n}}),n: number of digits/bits in the order of the finite group,n,,,Word RAM,words,8,n: 8,$O(2^{\sqrt{n}})$,Derived: Uses a hash table of this size,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Baby-step_giant-step,,,,,,,,,,,inf,,,,,,,,,1,,,Statistics
582,123.0,Logarithm Calculations,1.0,Discrete Logarithm Over Finite Fields,941.0,,,1,1,O(2^n),,,[https://www.sciencedirect.com/science/article/pii/S0890540198927614 Function Field Sieve (FFS) (1999)],Function Field Sieve (FFS),1999,https://www.sciencedirect.com/science/article/pii/S0890540198927614,,,,0.0,0,8,n: 8,O(2^n),n: number of digits/bits in the order of the finite group,n,,,,bits,3,n: 3,O(n^{2/3})?,same space as Number Field Sieve?,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Statistics
583,123.0,Logarithm Calculations,1.0,"Discrete Logarithm Over Finite Fields, F_q",942.0,,,1,1,$O(e^{(sqrt(2) sqrt(n*logn))})$,,,[NA Index calculus algorithm (1922)],Index calculus algorithm,1922,,,,,1.0,0,8,n: 8,$O(e^{(\sqrt(2) \sqrt(n*logn))})$,"n: number of digits/bits in the order of the finite group
r: size of factor base",n,,,RAM?,bits,3,"n: 3,
r: 5",O(n+r^2)?,See Dixon's algorithm for factoring integers; also works with an O(r)-by-O(r) sized matrix (to obtain discrete logs of primes in factor base),1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Index_calculus_algorithm,,,,,1000.0,,1000000.0,,1000000000.0,,inf,1,,Inf,1,,Inf,1,,1,,,Statistics
584,123.0,Logarithm Calculations,2.0,Discrete Logarithm Over Finite Fields,943.0,,,1,1,O(2^n),,,[http://www.ams.org/notices/199612/pomerance.pdf Number Field Sieve (NFS) (1990)],Number Field Sieve (NFS),1990,http://www.ams.org/notices/199612/pomerance.pdf,,,,0.0,0,8,n: 8,$O(2^n)$,n: number of digits/bits in the order of the finite group,n,,,,bits,3,n: 3,O(n^{2/3}),http://www.ams.org/notices/199612/pomerance.pdf,0.0,1.0,,0,,0,,0,0,,0,0,https://core.ac.uk/download/pdf/15590206.pdf,,,,,,,,,,,inf,,,,,,,,,1,,,Statistics
585,123.0,Logarithm Calculations,1.0,Discrete Logarithm Over Finite Fields,944.0,,,1,1,"O(2^{\sqrt{n}}), only for primes; does much better for composites",,,[https://dl.acm.org/citation.cfm?id=2269283 Pohlig-Hellman (1978)],Pohlig-Hellman,1978,https://dl.acm.org/citation.cfm?id=2269283,,,,0.0,0,8,n: 8,"O(2^{\sqrt{n}}), only for primes; does much better for composites",n: number of digits/bits in the order of the finite group,n,,,Word RAM,words,8,n: 8,$O(2^{\sqrt{n}})$ (though only for primes),A step in the algorithm involves using baby-steps giant-steps to compute discrete logs; the rest of the algorithm (including CRT and repeated powers) isn't as intensive,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Statistics
586,123.0,Logarithm Calculations,1.0,Discrete Logarithm Over Finite Fields,945.0,,,1,1,O(2^{(n/2)}),,,[https://www.ams.org/mcom/1978-32-143/S0025-5718-1978-0491431-9/S0025-5718-1978-0491431-9.pdf Pollard's rho algorithm (1978)],Pollard's rho algorithm,1978,https://www.ams.org/mcom/1978-32-143/S0025-5718-1978-0491431-9/S0025-5718-1978-0491431-9.pdf,,,,0.0,0,8,n: 8,$O(2^{(n/2)})$,n: number of digits/bits in the order of the finite group,n,,,Word RAM,words,1,n: 1,O(1),Stores a constant number of O(n)-bit values per iteration,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Statistics
587,123.0,Logarithm Calculations,1.0,Discrete Logarithm Over Finite Fields,946.0,,,1,1,O(2^n),,,[https://www.ams.org/mcom/1978-32-143/S0025-5718-1978-0491431-9/S0025-5718-1978-0491431-9.pdf Pollard's kangaroo algorithm (1978)],Pollard's kangaroo algorithm,1978,https://www.ams.org/mcom/1978-32-143/S0025-5718-1978-0491431-9/S0025-5718-1978-0491431-9.pdf,,,,0.0,0,8,n: 8,O(2^n),n: number of digits/bits in the order of the finite group,n,,,Word RAM,words,1,n: 1,O(1),"Stores a constant number of O(n)-bit values (a, b, x_i, d, x_N, y_i, d_i) per iteration; assumes that the pseudorandom map is part of the input",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Pollard%27s_kangaroo_algorithm,,,,,,,,,,,inf,,,,,,,,,1,,,Statistics
588,125.0,Self-Balancing Trees Creation,1.0,,1401.0,,,1,1,O(nlogn),,,[ AVL Tree (1962)],AVL Tree,1962,,,,,1.0,0,4,n: 4,O(n \log n),n: number of nodes,n,,,Word RAM,words,3,n: 3,O(n),Need to keep track of intermediary stages of tree before outputting,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.784285,1,,19931568.57,1,,29897352854,1,,5,,,Combinatorics
589,125.0,Self-Balancing Trees Creation,1.0,,1031.0,,,1,1,O(nlogn),,,"[https://ieeexplore.ieee.org/document/4567957 Guibas, Sedgewick Red-Black Tree (1972)]","Guibas, Sedgewick Red-Black Tree",1972,https://ieeexplore.ieee.org/document/4567957,,,,0.0,0,4,n: 4,O(n \log n),n: number of nodes,n,,,Word RAM,words,3,n: 3,O(n),Need to keep track of intermediary stages of tree before outputting,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,5,,,Combinatorics
590,125.0,Self-Balancing Trees Creation,1.0,,1032.0,,,1,1,O(nlogn),,,[ Hopcroft 2-3 Tree (1970)],Hopcroft 2-3 Tree,1970,,1,1.0,https://www.cs.drexel.edu/~amd435/courses/cs260/lectures/L-6_2-3_Trees.pdf,0.0,0,4,n: 4,O(n \log n),n: number of nodes,n,,,Word RAM,words,3,n: 3,O(n),Need to keep track of intermediary stages of tree before outputting,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.784285,1,,19931568.57,1,,29897352854,1,,5,,,Combinatorics
591,125.0,Self-Balancing Trees Creation,1.0,,1033.0,,,1,1,O(nlogn),,,[ Tarjan Splay Tree (1985)],Tarjan Splay Tree,1985,,,,,0.0,0,4,n: 4,O(n \log n),n: number of nodes,n,,,Word RAM,words,3,n: 3,O(n),Need to keep track of intermediary stages of tree before outputting,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,5,,,Combinatorics
592,125.0,Self-Balancing Trees Creation,1.0,,1034.0,,,1,1,O(n*b*log(n)/log(b))?,,,"[ Bayer, McCreight B-Tree (1970)]","Bayer, McCreight B-Tree",1970,,,,,0.0,0,4,n: 4,O(n*b*\log(n)/\log(b))?,"n: number of nodes
b: branching factor",n,,,Word RAM,words,3,n: 3,O(n),Need to keep track of intermediary stages of tree before outputting,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,5,,,Combinatorics
593,126.0,Self-Balancing Trees Insertion,1.0,,1059.0,,,1,1,O(logn),,,[ Hopcroft 2-3 Tree (1970)],Hopcroft 2-3 Tree,1970,,1,1.0,https://www.cs.drexel.edu/~amd435/courses/cs260/lectures/L-6_2-3_Trees.pdf,1.0,0,2,n: 2,O(\log n),n: number of nodes,n,,,Word RAM,words,1,n: 1,O(1),Each node being changed requires constant auxiliary space to make changes; can reuse space across nodes being changed,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9.965784285,1,,19.93156857,1,,29.89735285,1,,7,,,Combinatorics
594,126.0,Self-Balancing Trees Insertion,1.0,,1035.0,,,1,1,$O(1)$ amortized,,,"[https://ieeexplore.ieee.org/document/4567957 Guibas, Sedgewick Red-Black Tree (1972)]","Guibas, Sedgewick Red-Black Tree",1972,https://ieeexplore.ieee.org/document/4567957,,,,0.0,0,2,n: 2,O(\log n),n: number of nodes,n,,,Word RAM,words,1,n: 1,O(1),^see above,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9.965784285,1,,19.93156857,1,,29.89735285,1,,7,,,Combinatorics
595,127.0,Self-Balancing Trees Deletion,1.0,,1060.0,,,1,1,O(logn),,,[ Hopcroft 2-3 Tree (1970)],Hopcroft 2-3 Tree,1970,,1,1.0,https://www.cs.drexel.edu/~amd435/courses/cs260/lectures/L-6_2-3_Trees.pdf,1.0,0,2,n: 2,O(\log n),n: number of nodes,n,,,Word RAM,words,1,n: 1,O(1),^see above,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9.965784285,1,,19.93156857,1,,29.89735285,1,,7,,,Combinatorics
596,127.0,Self-Balancing Trees Deletion,1.0,,1036.0,,,1,1,$O(1)$ amortized,,,"[https://ieeexplore.ieee.org/document/4567957 Guibas, Sedgewick Red-Black Tree (1972)]","Guibas, Sedgewick Red-Black Tree",1972,https://ieeexplore.ieee.org/document/4567957,,,,1.0,0,2,n: 2,O(\log n),n: number of nodes,n,,,Word RAM,words,1,n: 1,O(1),^see above,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9.965784285,1,,19.93156857,1,,29.89735285,1,,7,,,Combinatorics
597,128.0,Self-Balancing Trees Search,1.0,,1061.0,,,1,1,O(logn),,,[ Hopcroft 2-3 Tree (1970)],Hopcroft 2-3 Tree,1970,,1,1.0,https://www.cs.drexel.edu/~amd435/courses/cs260/lectures/L-6_2-3_Trees.pdf,1.0,0,2,n: 2,O(\log n),n: number of nodes,n,,,Word RAM,words,1,n: 1,O(1),Need to keep track of constant amount of info during search (i.e. which node we're on and what direction to go),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9.965784285,1,,19.93156857,1,,29.89735285,1,,7,,,Combinatorics
598,128.0,Self-Balancing Trees Search,1.0,,1037.0,,,1,1,O(logn),,,"[https://ieeexplore.ieee.org/document/4567957 Guibas, Sedgewick Red-Black Tree (1972)]","Guibas, Sedgewick Red-Black Tree",1972,https://ieeexplore.ieee.org/document/4567957,,,,1.0,0,2,n: 2,O(\log n),n: number of nodes,n,,,Word RAM,words,1,n: 1,O(1),Need to keep track of constant amount of info during search (i.e. which node we're on and what direction to go),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9.965784285,1,,19.93156857,1,,29.89735285,1,,7,,,Combinatorics
599,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,958.5,,,1,1,$O(n^\omega)$ where omega is the exponent on boolean matrix multiplication,Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (1972)]","Aho, Garey & Ullman",1972,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,1.0,0,5.3728596,n: 5.3728596,O(n^omega) where omega is the exponent on boolean matrix multiplication,"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,263633138.6,1,,6.95024E+16,1,,1.83231E+25,1,,3,,,Combinatorics
600,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,949.0,,,1,1,O(n^{2.807}),^see above,^see above,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (1972)]","Aho, Garey & Ullman",1972,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,1.0,0,5.807,n: 5.807,O(n^2.807),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,263633138.6,1,,6.95024E+16,1,,1.83231E+25,1,,3,,,Combinatorics
601,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,950.0,,,1,1,O(n^{2.8}),^see above,^see above,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (1978)]","Aho, Garey & Ullman",1978,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,1.0,0,5.8,n: 5.8,O(n^2.8),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,251188643.2,1.049542429,,6.30957E+16,1.10153931,,1.58489E+25,1.156112242,,3,,,Combinatorics
602,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,951.0,,,1,1,O(n^{2.78}),^see above,^see above,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (1979)]","Aho, Garey & Ullman",1979,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,1.0,0,5.78,n: 5.78,O(n^2.78),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,218776162.4,1.20503594,,4.7863E+16,1.452111618,,1.04713E+25,1.749846689,,3,,,Combinatorics
603,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,952.0,,,1,1,O(n^{2.52}),^see above,^see above,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (1980)]","Aho, Garey & Ullman",1980,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,1.0,0,5.52,n: 5.52,O(n^2.52),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,36307805.48,7.261059574,,1.31826E+15,52.72298614,,4.7863E+22,382.8247433,,3,,,Combinatorics
604,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,953.0,,,1,1,O(n^{2.518}),^see above,^see above,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (1980)]","Aho, Garey & Ullman",1980,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,1.0,0,5.518,n: 5.518,O(n^2.518),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,35809643.71,7.362070975,,1.28233E+15,54.20008904,,4.59198E+22,399.0249024,,3,,,Combinatorics
605,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,954.0,,,1,1,O(n^{2.495}),^see above,^see above,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (1981)]","Aho, Garey & Ullman",1981,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,1.0,0,5.495,n: 5.495,O(n^2.495),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,30549211.13,8.629785478,,933254300796992,74.47319739,,933254300796992,19633602768,,3,,,Combinatorics
606,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,955.0,,,1,1,O(n^{2.48}),^see above,^see above,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (1986)]","Aho, Garey & Ullman",1986,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,1.0,0,5.48,n: 5.48,O(n^2.48),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,27542287.03,9.571940713,,758577575029184,91.62204901,,2.0893E+22,877.0008211,,3,,,Combinatorics
607,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,956.0,,,1,1,O(n^{2.372}),^see above,^see above,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (1990)]","Aho, Garey & Ullman",1990,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,1.0,0,5.372,n: 5.372,O(n^2.372),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,13061708.88,20.18366364,,170608238900312,407.3802778,,2.22844E+21,8222.426499,,3,,,Combinatorics
608,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,957.0,,,1,1,O(n^{2.373}),^see above,^see above,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (2014)]","Aho, Garey & Ullman",2014,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,0.0,0,5.373,n: 5.373,O(n^2.373),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
609,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,958.0,,,1,1,O(n^{2.371}),^see above,^see above,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (2014)]","Aho, Garey & Ullman",2014,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,1.0,0,5.371,n: 5.371,O(n^2.371),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,12971792.71,20.32357011,,168267406107047,413.047502,,2.18273E+21,8394.599865,,3,,,Combinatorics
610,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,959.0,,,1,1,O(n^3),Any distribution/runtime same regardless of input,(same general behavior regardless of input),"[https://www.sciencedirect.com/science/article/pii/0167642389900397 Gries, Martin (1989)]","Gries, Martin",1989,https://www.sciencedirect.com/science/article/pii/0167642389900397,,,,0.0,0,6,n: 6,O(n^3),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),"Generally keeps track of O(1) information for every pair (u, v) of vertices? and not much additional information needed",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
611,131.0,Turnpike Problem,1.0,Turnpike Problem,963.0,,,1,1,O(2^n nlogn),,,[NA Outside-In algorithm (1991)],Outside-In algorithm,1991,,,,,1.0,0,8,n: 8,O(2^n nlogn),n: number of points,n,,,Word RAM,words,3,n: 3,O(n),Seems like this just needs to keep track of current configuration being tested,1.0,0.0,,0,,0,,0,0,,0,0,http://hariharan-ramesh.com/ppts/turnpike.pdf,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
612,132.0,n-Queens Problem,2.0,Counting Solutions,969.0,,,1,1,O(8^n*poly(n)),(no distribution to talk about here),(none),"[http://www.cs.cornell.edu/~rdz/Papers/RZ-IPL92.pdf Rivin, Zabih (1992)]","Rivin, Zabih",1992,http://www.cs.cornell.edu/~rdz/Papers/RZ-IPL92.pdf,,,,0.0,0,8,"n: 8,
n^2: 8",O(8^n*poly(n)),n: size of chessboard,n^2,,,Word RAM,words,8,"n: 8,
n^2: 8",O(8^n*n^2),http://www.cs.cornell.edu/~rdz/Papers/RZ-IPL92.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics
613,133.0,Median String Problem,2.0,Median String Problem with Unbounded Alphabets,971.0,,,1,1,2^O(n),Any distribution/runtime same regardless of input,(same general behavior regardless of input),[ Naive Solution (1965)],Naive Solution,1965,,1.5,0.0,https://link.springer.com/chapter/10.1007/3-540-44888-8_23,1.0,0,8,n: 8,2^O(n),"n: maximum of (number of strings, max length of one of the strings)",n,,,Word RAM,words,3,n:3,O(n),"Keep track of current string being checked, current best string, and Levenshtein distances (which can be computed recursively using O(n) space)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
614,134.0,Frequent Words with Mismatches Problem,1.0,,972.0,,0.0,1,1,"$O(n*f_{bin}(sigma-1, k, d))$ where $f_{bin}(x, y, z) = sum_{i=0}^z C(y, i)*x^i$",,,[ Naive solution (1940)],Naive solution,1940,,,,,1.0,0,8,n: 8,"O(n*f_{bin}(sigma-1, k, d)) where f_{bin}(x, y, z) = sum_{i=0}^z C(y, i)*x^i","n: length of string
k: length of words
d: number of allowed mismatches
sigma: size of alphabet",n,,,Word RAM,words,8,n: 8,"O(max(n*f_{bin}(sigma-1, k, d), sigma^k)) auxiliary where f_{bin}(x, y, z) = sum_{i=0}^z C(y, i)*x^i",Keep track of counts on at most that many words,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Combinatorics
615,135.0,Tower of Hanoi,2.0,Tower of Hanoi,973.0,,0.0,1,1,O(2^n),(no distribution to talk about here),(none),[NA Iteration based (1883)],Iteration based,1883,,1,1.0,https://marcin-chwedczuk.github.io/iterative-solution-to-towers-of-hanoi-problem,1.0,0,8,n: 8,O(2^n),n: number of disks,n,,,Word RAM,bits,3,n: 3,O(n),Only need to keep track of current configuration,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Tower_of_Hanoi,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
616,135.0,Tower of Hanoi,2.0,Tower of Hanoi,974.0,,0.0,1,1,O(2^n),(no distribution to talk about here),(none),[NA Recursion based (1940)],Recursion based,1940,,,,,0.0,0,8,n: 8,O(2^n),n: number of disks,n,,,Word RAM,bits,4,n: 4,O(n \log n),"Need to keep track of an O(n)-sized recursive stack, each entry requiring O(log n) space (i.e. which tower size to manipulate)",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Tower_of_Hanoi,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics
617,135.0,Tower of Hanoi,2.0,Tower of Hanoi,975.0,,0.0,1,1,O(2^n),(no distribution to talk about here),(none),[NA Non-recursion based (1940)],Non-recursion based,1940,,,,,0.0,0,8,n: 8,O(2^n),n: number of disks,n,,,Word RAM,bits,3,n: 3,O(n),Only need to keep track of current configuration,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Tower_of_Hanoi,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics
618,135.0,Tower of Hanoi,2.0,Tower of Hanoi,976.0,,0.0,1,1,O(2^n),(no distribution to talk about here),(none),[NA Gray-code based (1940)],Gray-code based,1940,,,,,0.0,0,8,n: 8,O(2^n),n: number of disks,n,,,Word RAM,bits,3,n: 3,O(n),Need to keep track of an n-bit counter for Gray codes,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Tower_of_Hanoi,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics
619,136.0,The Frequent Words Problem,2.0,The Frequent Words Problem,978.0,,,1,1,O(n),any distribution?,needs to read entire string,[ Naive solution (1940)],Naive solution,1940,,2,1.0,http://bioinformaticsalgorithms.com/data/debugdatasets/replication/FrequentWordsProblem.pdf,1.0,0,3,n: 3,O(n),"n: length of string
k: length of words
sigma: size of alphabet",n,,,Word RAM,words,3,n: 3,"O(max(n, \sigma^k))",Keep track of counts on at most $n-k+1$ or $\sigma^k$ words,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Statistics
620,136.0,The Frequent Words Problem,1.0,The Frequent Words Problem,1984.0,,,1,1,O(n),any distribution?,needs to read entire string,[ Rabin Karp (1987)],Rabin Karp,1987,,,,,0.0,0,3,n: 3,O(n),"n: length of string
k: length of words
sigma: size of alphabet",n,,,Word RAM,words,3,n: 3,"O(max(n, \sigma^k))?",Keep track of counts on at most $n-k+1$ or $\sigma^k$ words,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Statistics
621,139.0,Secret Sharing,1.0,,988.0,,,1,1,$O(t^2)$ for secret computation? (requires polynomial interpolation),,,[ Shamir's scheme (1979)],Shamir's scheme,1979,,,,,1.0,0,5,"n: 5,
t: 5",O(t^2) for secret computation? (requires polynomial interpolation),"n: size of the group the secret is being shared with
t: threshold number of players",n,,,Word RAM,words,5,"n: 5,
t: 5","O(1) per person, O(t^2) to figure out secret?",Each person only needs to keep track of a single point (O(1) info); figuring out secret depends on polynomial interpolation algorithm,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,1,,,1,,,1,,4,,,Cryptography
622,139.0,Secret Sharing,1.0,,989.0,,,1,1,$O(t^3)$ for secret computation? (requires linear solver),,,[ Blakley's scheme (1979)],Blakley's scheme,1979,,,,,0.0,0,6,"n: 6,
5: 6",O(t^3) for secret computation? (requires linear solver),"n: size of the group the secret is being shared with
t: threshold number of players",n,,,Word RAM,words,5,"n: 5,
t: 5","O(t) per person, O(t^2) to figure out secret","Each person needs to keep track of coefficients of hyperplane; figuring out secret requires O(t) hyperplanes, with O(t) coefficients",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Cryptography
623,140.0,Solutions to Nonlinear Equations,1.0,Solutions to Nonlinear Equations,990.0,,0.0,1,1,$O(log((b-a)/\epsilon)$,,,[ Bisection method (-150)],Bisection method,-150,,,,,0.0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
a, b: endpoint values, with b>a
n_{max}: maximum number of iterations",n_max,,,Word/Real RAM,words,1,n_max: 1,O(1),"Store current endpoint values; iterations take O(1) time and thus O(1) space, and space can be re-used across iterations",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Numerical Analysis
624,140.0,Solutions to Nonlinear Equations,1.0,Solutions to Nonlinear Equations,991.0,,0.0,1,1,O(n),,,[ Regula Falsi method (-200)],Regula Falsi method,-200,,,,,0.0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
a, b: endpoint values, with b>a
n_{max}: maximum number of iterations",n_max,,,Word/Real RAM,words,1,n_max: 1,O(1),"Store current endpoint values; iterations take O(1) time and thus O(1) space, and space can be re-used across iterations",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Numerical Analysis
625,140.0,Solutions to Nonlinear Equations,1.0,Solutions to Nonlinear Equations,992.0,,0.0,1,1,(order of convergence = phi~1.618),,,[ Secant method (-1400)],Secant method,-1400,,1,1.0,,1.0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
a, b: endpoint values, with b>a
n_{max}: maximum number of iterations",n_max,,,Word/Real RAM,words,1,n_max: 1,O(1),"Store previous 2 estimates x_i and x_{i-1}; iterations take O(1) time and thus O(1) space, and space can be re-used across iterations",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Numerical Analysis
626,140.0,Solutions to Nonlinear Equations,1.0,Solutions to Nonlinear Equations,993.0,,0.0,1,1,(order of convergence = 2),,,[ Newton's method (1669)],Newton's method,1669,,,,,0.0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
a, b: endpoint values, with b>a
n_{max}: maximum number of iterations",n_max,,,Word/Real RAM,words,1,n_max: 1,O(1),"Store current estimate x_i and the derivative f' (assuming this takes O(1) space); iterations take O(1) time and thus O(1) space, and space can be re-used across iterations",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Numerical Analysis
627,142.0,Polynomial Interpolation,1.0,2-D Polynomial Interpolation,999.0,,,1,1,O(n^3),,,[ Gaussian elimination (-150)],Gaussian elimination,-150,,1,1.0,,1.0,0,8,n: 8,O(n^3),n: text length (block size),n,,,Word/Real RAM,words,5,n: 5,O(n^2),Requires computation of inverse of O(n^2)-sized Vandermonde matrix,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000000.0,,1000000000000.0,,1e+18,,1000000000.0,1,,1E+18,1,,1E+27,1,,3,,,Numerical Analysis
628,142.0,Polynomial Interpolation,1.0,2-D Polynomial Interpolation,1000.0,,,1,1,O(n^2),,,[https://www.jstor.org/stable/2004623?origin=crossref&seq=5#metadata_info_tab_contents Bjorck (1970)],Bjorck,1970,https://www.jstor.org/stable/2004623?origin=crossref&seq=5#metadata_info_tab_contents,0.5,0.0,https://www.ams.org/journals/mcom/1970-24-112/S0025-5718-1970-0290541-1/S0025-5718-1970-0290541-1.pdf,1.0,3->4,5,n: 5,O(n^2),n: text length (block size),n,,,Word/Real RAM,words,3,n: 3,O(n),https://academic.oup.com/imajna/article/8/4/473/758789?login=true,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000.0,0.2589254118,1000000.0,0.5848931925,1000000000.0,0.995262315,1000000.0,1000,0.2589254118,1000000000000,1000000,0.5848931925,1E+18,1000000000,0.995262315,3,,,Numerical Analysis
629,142.0,Polynomial Interpolation,1.0,2-D Polynomial Interpolation,1001.0,,,1,1,O(n^2),,,[https://academic.oup.com/imajna/article/8/4/473/758789?login=true Higham (1988)],Higham,1988,https://academic.oup.com/imajna/article/8/4/473/758789?login=true,,,,0.0,0,5,n: 5,O(n^2),n: text length (block size),n,,,Word/Real RAM,words,3,n: 3,O(n),https://academic.oup.com/imajna/article/8/4/473/758789?login=true,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,3,,,Numerical Analysis
630,142.0,Polynomial Interpolation,1.0,2-D Polynomial Interpolation,1002.0,,,1,1,O(n^2),,,"[https://link.springer.com/article/10.1007/BF01990529 Calvetti, Reichel (1993)]","Calvetti, Reichel",1993,https://link.springer.com/article/10.1007/BF01990529,,,,0.0,0,5,n: 5,O(n^2),n: text length (block size),n,,,Word/Real RAM,words,3,n: 3,O(n)?,(maybe similar to the other O(n^2) algorithms?),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,3,,,Numerical Analysis
631,143.0,Greatest Common Divisor,1.0,Greatest Common Divisor,1003.0,,,1,1,O(n^2),,,[ Euclid's algorithm (-300)],Euclid's algorithm,-300,,1,1.0,,1.0,0,5,n: 5,O(n^2),n: sum of number of bits among the two integers,n,,,Word RAM? words size O(1),bits,3,n: 3,O(n),Store only the current values being iterated on,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Statistics
632,143.0,Greatest Common Divisor,1.0,Greatest Common Divisor,1004.0,,,1,1,O(n^2),,,[ Lehmer's GCD algorithm (1940)],Lehmer's GCD algorithm,1940,,,,,0.0,0,5,n: 5,O(n^2),n: sum of number of bits among the two integers,n,,,Word RAM? words size O(1),bits,3,n: 3,O(n),"Store only the current values being iterated on, and an O(1)-sized matrix with O(n)-bit numbers",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Statistics
633,143.0,Greatest Common Divisor,1.0,Greatest Common Divisor,1005.0,,,1,1,O(n^2),,,[https://arxiv.org/abs/0910.0095 Binary GCD algorithm (1967)],Binary GCD algorithm,1967,https://arxiv.org/abs/0910.0095,,,,0.0,0,5,n: 5,O(n^2),n: sum of number of bits among the two integers,n,,,Word RAM? words size O(1),bits,3,n: 3,O(n),Store only the current values being iterated on,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Statistics
634,143.0,Greatest Common Divisor,1.0,Greatest Common Divisor,,,,1,1,O(n log^2 n log log n),,,"[https://hal.inria.fr/file/index/docid/71533/filename/RR-5050.pdf Sthele, Zimmermann (2006)]","Sthele, Zimmermann",2006,https://hal.inria.fr/file/index/docid/71533/filename/RR-5050.pdf,,,,1.0,0,4.011,n: 4.011,O(n \log^2 n \log \log n),n: sum of number of bits among the two integers,n,,,Word RAM? words size O(1),bits,3,n: 3,O(n)??,Depends on Schonhage-Strassen multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,33056.34051,30.25138248,0.05301736662,86044249.58,11621.92715,0.1523784375,146555204661,6823367.361,0.2692449252,4,,,Statistics
635,145.0,Interval Scheduling,2.0,Weighted Activity Selection Problem,1006.0,,,1,1,O(2^n),Any distribution,(behavior same regardless of input),[ Brute force algorithm (1940)],Brute force algorithm,1940,,,,,1.0,0,8,n: 8,O(2^n),n: number of tasks (intervals),n,,,Word RAM,words,3,n: 3,O(n),Need to keep track of which subset is being checked,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics
636,145.0,Interval Scheduling,1.0,Weighted Activity Selection Problem,1007.0,,,1,1,O(n^3),,,[ $O(n^3)$ Dynamic Programming (1953)],$O(n^3)$ Dynamic Programming,1953,,,,,1.0,1->3,6,n: 6,O(n^3),n: number of tasks (intervals),n,,,Word RAM,words,5,n: 5,O(n^2),"Keep track of answers to O(n^2) subproblems [i, j]",1.0,0.0,,0,,0,,0,0,,0,0,https://www.cs.ubc.ca/~liorma/cpsc320/files/weighted-activity-selection.pdf,,,,,,,,,,,1000000000.0,1,,1E+18,1,,1E+27,1,,1,,,Combinatorics
637,145.0,Interval Scheduling,1.0,Weighted Activity Selection Problem,1008.0,,,1,1,O(n^2),,,[ $O(n^2)$ Dynamic Programming (1953)],$O(n^2)$ Dynamic Programming,1953,,,,,1.0,3->4,5,n: 5,O(n^2),n: number of tasks (intervals),n,,,Word RAM,words,3,n: 3,O(n),"Keep track of answers to O(n) subproblems (cache), and sorted list of intervals",1.0,0.0,,0,,0,,0,0,,0,0,https://www.cs.ubc.ca/~liorma/cpsc320/files/weighted-activity-selection.pdf,,,,,,,,,,,1000000.0,,,,,,,,,1,,,Combinatorics
638,145.0,Interval Scheduling,1.0,Weighted Activity Selection Problem,1009.0,,,1,1,O(nlogn),,,[ $O(n\log n)$ Dynamic Programming (1953)],$O(n\log n)$ Dynamic Programming,1953,,,,,1.0,4->5,4,n: 4,O(n \log n),n: number of tasks (intervals),n,,,Word RAM,words,3,n: 3,O(n),"Keep track of answers to O(n) subproblems (cache), and sorted list of intervals",1.0,0.0,,0,,0,,0,0,,0,0,https://www.cs.ubc.ca/~liorma/cpsc320/files/weighted-activity-selection.pdf,,,,,,,,,,,9965.0,100351.2293,inf,19931568.57,50171665944,inf,29897352854,3.34478E+16,inf,1,,,Combinatorics
639,145.0,Interval Scheduling,1.0,"Unweighted Interval Scheduling, Online",1010.0,,,1,1,O(n),,,[ Fixed priority shortest job first (1940)],Fixed priority shortest job first,1940,,1,1.0,,1.0,0,4,n: 4,O(n \log n),"n: number of tasks (intervals)
k: number of machines (resources)",n,,,Word RAM,words,3,"n: 3,
k: 3",O(n+k)?,"Keep track of (sorted, based on criteria) list of (unscheduled, running, etc.; just un-done) tasks, along with machine statuses and task priorities",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,1,,19931568.57,1,,29897352854,1,,5,,,Operating Systems
640,145.0,Interval Scheduling,1.0,"Unweighted Interval Scheduling, Online",1011.0,,,1,1,O(n),,,[ Priority scheduling (1940)],Priority scheduling,1940,,,,,0.0,0,3,n: 3,O(n),"n: number of tasks (intervals)
k: number of machines (resources)",n,,,Word RAM,words,3,"n: 3,
k: 3",O(n+k)?,"Keep track of (sorted, based on criteria) list of (unscheduled, running, etc.; just un-done) tasks, along with machine statuses",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,5,,,Operating Systems
641,145.0,Interval Scheduling,1.0,"Unweighted Interval Scheduling, Online",1012.0,,,1,1,O(n),,,[ Shortest remaining time first (1940)],Shortest remaining time first,1940,,,,,0.0,0,3,n: 3,O(n),"n: number of tasks (intervals)
k: number of machines (resources)",n,,,Word RAM,words,3,"n: 3,
k: 3",O(n+k)?,^see above,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,5,,,Operating Systems
642,145.0,Interval Scheduling,1.0,"Unweighted Interval Scheduling, Online",1013.0,,,1,1,O(n),,,"[ First come, first served (1940)]","First come, first served",1940,,,,,0.0,0,3,n: 3,O(n),"n: number of tasks (intervals)
k: number of machines (resources)",n,,,Word RAM,words,3,"n: 3,
k: 3",O(n+k)?,^see above,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,5,,,Operating Systems
643,145.0,Interval Scheduling,1.0,"Unweighted Interval Scheduling, Online",1014.0,,,1,1,O(n),,,[ Round-robin scheduling (1940)],Round-robin scheduling,1940,,,,,0.0,0,3,n: 3,O(n),"n: number of tasks (intervals)
k: number of machines (resources)",n,,,Word RAM,words,3,"n: 3,
k: 3",O(n+k)?,^see above,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,5,,,Operating Systems
644,145.0,Interval Scheduling,1.0,"Unweighted Interval Scheduling, Online",1015.0,,,1,1,O(n),,,[ Multilevel queue scheduling (1940)],Multilevel queue scheduling,1940,,,,,0.0,0,3,n: 3,O(n),"n: number of tasks (intervals)
k: number of machines (resources)",n,,,Word RAM,words,3,"n: 3,
k: 3",O(n+k)?,^see above; also level information for each task,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,5,,,Operating Systems
645,147.0,Deadlock avoidance,1.0,Deadlock Avoidance,1019.0,,,1,1,O(mn^2),,,[https://www.cs.utexas.edu/users/EWD/ewd01xx/EWD108.PDF Banker's Algorithm (1966)],Banker's Algorithm,1966,https://www.cs.utexas.edu/users/EWD/ewd01xx/EWD108.PDF,,,,1.0,0,5,"m: 3,
n: 5",O(mn^2),"n: number of processes
m: number of resource types",n,,,Word RAM,words,3,"n: 3,
m: 3",O(mn),"Main space-consuming arrays needed include ""Max,"" ""Allocation,"" and ""Need,"" which are all n*m arrays. Other arrays are either O(n) or O(m)-sized",1.0,0.0,,0,,0,,0,0,,0,0,https://www.cs.colorado.edu/~rhan/CSCI_3753_Spring_2005/CSCI_3753_Spring_2005/Lectures/03_01_05_deadlock.pdf,,,,,,,,,,,,1,,,1,,,1,,3,,,Operating Systems
646,148.0,Page Replacements,1.0,Offline,1020.0,,,1,1,O(n^2),,,[ The theoretically optimal page replacement algorithm (1940)],The theoretically optimal page replacement algorithm,1940,,2,1.0,,1.0,0,5,n: 5,O(n^2),"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache; linear scan for searching for page not being used for the longest only requires O(1) auxiliary space,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1000000000000,1,,1E+18,1,,4,,,Operating Systems
647,148.0,Page Replacements,1.0,Online,1021.0,,,1,1,O(nk)?,,,[ Not recently used (1940)],Not recently used,1940,,,,,0.0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + reference bits only,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Operating Systems
648,148.0,Page Replacements,1.0,Online,1022.0,,,1,1,O(nk)?,,,"[ First-in, first-out (1940)]","First-in, first-out",1940,,,,,0.0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + reference bits only,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Operating Systems
649,148.0,Page Replacements,1.0,Online,1023.0,,,1,1,O(nk)?,,,[ Second-chance (1940)],Second-chance,1940,,,,,0.0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + reference bits only,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Operating Systems
650,148.0,Page Replacements,1.0,Online,1024.0,,,1,1,O(nk)?,,,[ Clock (1940)],Clock,1940,,,,,0.0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + reference bits only (plus iterator),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Operating Systems
651,148.0,Page Replacements,1.0,Online,1025.0,,,1,1,O(nk)?,,,[ Least recently used (1940)],Least recently used,1940,,,,,0.0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + info related to time last referenced for each of k pages,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Operating Systems
652,148.0,Page Replacements,1.0,Online,1026.0,,,1,0,O(n),,,[ Random (1940)],Random,1940,,,,,0.0,0,3,n: 3,O(n),"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k)?,Need to keep track of cache?,1.0,0.0,,1,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,4,,,Operating Systems
653,148.0,Page Replacements,1.0,Online,1027.0,,,1,1,O(nk)?,,,[ Not frequently used (NFU) (1940)],Not frequently used (NFU),1940,,,,,0.0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + reference counters only,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Operating Systems
654,148.0,Page Replacements,1.0,Online,1028.0,,,1,1,O(nk)?,,,[ Aging (1940)],Aging,1940,,,,,0.0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + reference counters only,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Operating Systems
655,148.0,Page Replacements,1.0,Online,1029.0,,,1,1,O(nk)?,,,[https://www.researchgate.net/profile/Gyanendra-Kumar-3/publication/319467661_A_Novel_Longest_Distance_First_Page_Replacement_Algorithm/links/59b209f1aca2728472d14684/A-Novel-Longest-Distance-First-Page-Replacement-Algorithm.pdf Longest distance first (LDF) page replacement algorithm (2017)],Longest distance first (LDF) page replacement algorithm,2017,https://www.researchgate.net/profile/Gyanendra-Kumar-3/publication/319467661_A_Novel_Longest_Distance_First_Page_Replacement_Algorithm/links/59b209f1aca2728472d14684/A-Novel-Longest-Distance-First-Page-Replacement-Algorithm.pdf,,,,0.0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + information related to position of pages,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Operating Systems
656,149.0,Recovery,2.0,"Steal, No-Force",1030.0,,,1,1,O(n),Any distribution/doesn't make too much sense to talk about distribution here,(behavior same regardless of input),[https://dl.acm.org/doi/10.1145/128765.128770 ARIES (1992)],ARIES,1992,https://dl.acm.org/doi/10.1145/128765.128770,4,1.0,,1.0,0,3,n: 3,O(n),n: number of transactions before crash,n,,,Word RAM,words,3,n: 3,O(n)?,"Uses write-ahead logging, so keeps track of transaction log, whose entries may be augmented with O(1) more information each. During recovery, needs to keep track of variable/page states",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Operating Systems
657,9.0,Linear System,2.0,General Linear System,102.0,,,1,1,O(n^3),Presumably any continuous random matrix distribution?,"(none, though intuitively it seems ""rare"" to run into special cases where runtime is smaller)",[- Gaussian-Jordan Elimination (-150)],Gaussian-Jordan Elimination,-150,-,1,1.0,,1.0,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Levinson_recursion,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,36926037.0,1,,3.7037E+16,1,,3.7037E+25,1,,3,,,Numerical Analysis
658,9.0,Linear System,2.0,"Positive Definite, Hermitian Matrix",102.0,,,1,1,O(n^3),Presumably any continuous random matrix distribution?,"(none, though intuitively it seems ""rare"" to run into special cases where runtime is smaller)",[- Gaussian-Jordan Elimination (-150)],Gaussian-Jordan Elimination,-150,-,1,1.0,,1.0,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Levinson_recursion,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,36926037.0,1,,3.7037E+16,1,,3.7037E+25,1,,3,,,Numerical Analysis
659,9.0,Linear System,2.0,"Non-Definite, Symmetric Matrix",102.0,,,1,1,O(n^3),Presumably any continuous random matrix distribution?,"(none, though intuitively it seems ""rare"" to run into special cases where runtime is smaller)",[- Gaussian-Jordan Elimination (-150)],Gaussian-Jordan Elimination,-150,-,1,1.0,,1.0,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Levinson_recursion,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,36926037.0,1,,3.7037E+16,1,,3.7037E+25,1,,3,,,Numerical Analysis
660,9.0,Linear System,2.0,Toeplitz Matrix,102.0,,,1,1,O(n^3),Presumably any continuous random matrix distribution?,"(none, though intuitively it seems ""rare"" to run into special cases where runtime is smaller)",[- Gaussian-Jordan Elimination (-150)],Gaussian-Jordan Elimination,-150,-,1,1.0,,1.0,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Levinson_recursion,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,36926037.0,1,,3.7037E+16,1,,3.7037E+25,1,,3,,,Numerical Analysis
661,9.0,Linear System,2.0,Vandermonde Matrix,102.0,,,1,1,O(n^3),Presumably any continuous random matrix distribution?,"(none, though intuitively it seems ""rare"" to run into special cases where runtime is smaller)",[- Gaussian-Jordan Elimination (-150)],Gaussian-Jordan Elimination,-150,-,1,1.0,,1.0,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Levinson_recursion,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,36926037.0,1,,3.7037E+16,1,,3.7037E+25,1,,3,,,Numerical Analysis
662,25.0,Line Clipping,2.0,Convex Polygonal Window,267.0,,,1,1,O(np),^ see above,^ see above,[https://www.sciencedirect.com/science/article/pii/0097849378900213 Cyrus–Beck (1978)],Cyrus–Beck,1978,https://www.sciencedirect.com/science/article/pii/0097849378900213,,,,0.0,0,3,"n: 3,
p: 3",O(np),"n: number of lines
p: number of edges/faces on polygon/polyhedron",n,,,Word/Real RAM,words,1,n: 1,O(1),"Easily derived? (O(1) per segment, space can be re-used)",1.0,0.0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000.0,1,,,,,,,,6,,,Image Processing
663,25.0,Line Clipping,2.0,Convex Polyhedral window,267.0,,,1,1,O(np),^ see above,^ see above,[https://www.sciencedirect.com/science/article/pii/0097849378900213 Cyrus–Beck (1978)],Cyrus–Beck,1978,https://www.sciencedirect.com/science/article/pii/0097849378900213,,,,0.0,0,3,"n: 3,
p: 3",O(np),"n: number of lines
p: number of edges/faces on polygon/polyhedron",n,,,Word/Real RAM,words,1,n: 1,O(1),"Easily derived? (O(1) per segment, space can be re-used)",1.0,0.0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000.0,1,,,,,,,,6,,,Image Processing
664,12.0,Convex Hull,1.0,2-dimensional,131.0,,,1,1,O(nlogn),,,[https://dl.acm.org/citation.cfm?id=359430 Preparata and Hong (1977)],Preparata and Hong,1977,https://dl.acm.org/citation.cfm?id=359430,,,,0.0,0,4,n: 4,$O(nlogn)$,"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,O(n)?,Divide and conquer can be done in linear space total as space can be reused after conquer steps,1.0,0.0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9965.0,100351.2293,,,,,,,,3,,,Image Processing
665,12.0,Convex Hull,1.0,3-dimensional,131.0,,,1,1,O(nlogn),,,[https://dl.acm.org/citation.cfm?id=359430 Preparata and Hong (1977)],Preparata and Hong,1977,https://dl.acm.org/citation.cfm?id=359430,,,,0.0,0,4,n: 4,$O(nlogn)$,"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,O(n)?,Divide and conquer can be done in linear space total as space can be reused after conquer steps,1.0,0.0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9965.0,100351.2293,,,,,,,,3,,,Image Processing
666,12.0,Convex Hull,1.0,2-dimensional,135.0,,,1,1,O(n log h),,,[https://link.springer.com/article/10.1007/BF02712873 Chan's algorithm (1996)],Chan's algorithm,1996,https://link.springer.com/article/10.1007/BF02712873,,,,0.0,0,4,"n: 4,
h: 2",$O(n log h)$,"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,O(n),https://link.springer.com/article/10.1007/BF02712873,0.0,1.0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,4982.0,200722.6014,,#VALUE!,#VALUE!,,#VALUE!,#VALUE!,,3,,,Image Processing
667,12.0,Convex Hull,1.0,3-dimensional,135.0,,,1,1,O(n log h),,,[https://link.springer.com/article/10.1007/BF02712873 Chan's algorithm (1996)],Chan's algorithm,1996,https://link.springer.com/article/10.1007/BF02712873,,,,0.0,0,4,"n: 4,
h: 2",$O(n log h)$,"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,O(n),https://link.springer.com/article/10.1007/BF02712873,0.0,1.0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,4982.0,200722.6014,,#VALUE!,#VALUE!,,#VALUE!,#VALUE!,,3,,,Image Processing
668,17.0,All-Pairs Shortest Paths (APSP),2.0,APSP on Dense Undirected Unweighted Graphs,186.0,,,1,1,O (n^{2.373} \log n),,,[https://www.sciencedirect.com/science/article/pii/S0022000085710781 Seidel's algorithm (1995)],Seidel's algorithm,1995,https://www.sciencedirect.com/science/article/pii/S0022000085710781,,,,1.0,0,5.373,n: 5.373,$O (n^{2.373} \log n)$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: Uses four auxiliary $V \times V$ matrices,1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,8100011.0,1524.155833,0.1906562983,234070670188821,52743383.02,0.5270777256,4.75081E+21,2598646354631,0.9751005894,2,,,Combinatorics
669,17.0,All-Pairs Shortest Paths (APSP),2.0,APSP on Sparse Undirected Unweighted Graphs,186.0,,,1,1,O (n^{2.373} \log n),,,[https://www.sciencedirect.com/science/article/pii/S0022000085710781 Seidel's algorithm (1995)],Seidel's algorithm,1995,https://www.sciencedirect.com/science/article/pii/S0022000085710781,,,,1.0,0,5.373,n: 5.373,$O (n^{2.373} \log n)$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: Uses four auxiliary $V \times V$ matrices,1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,8100011.0,1524.155833,0.1906562983,234070670188821,52743383.02,0.5270777256,4.75081E+21,2598646354631,0.9751005894,2,,,Combinatorics
670,17.0,All-Pairs Shortest Paths (APSP),2.0,APSP on Dense Undirected Graphs with Positive Integer Weights,189.0,,,1,1,O(mn),,,[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.22.7128&rep=rep1&type=pdf Thorup (1999)],Thorup,1999,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.22.7128&rep=rep1&type=pdf,1,1.0,https://dl.acm.org/doi/pdf/10.1145/316542.316548,1.0,3->4,6,"n: 6,
m: 3",$O(mn)$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,6,"n: 6,
m: 3",$O(mn)$,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.22.7128&rep=rep1&type=pdf,0.0,1.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,222222.0,55555.61111,,222222222222,55555555556,,2.22222E+17,5.55556E+16,,2,,,Combinatorics
671,17.0,All-Pairs Shortest Paths (APSP),2.0,APSP on Sparse Undirected Graphs with Positive Integer Weights,189.0,,,1,1,O(mn),,,[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.22.7128&rep=rep1&type=pdf Thorup (1999)],Thorup,1999,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.22.7128&rep=rep1&type=pdf,1,1.0,https://dl.acm.org/doi/pdf/10.1145/316542.316548,1.0,3->4,6,"n: 6,
m: 3",$O(mn)$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,6,"n: 6,
m: 3",$O(mn)$,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.22.7128&rep=rep1&type=pdf,0.0,1.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,222222.0,55555.61111,,222222222222,55555555556,,2.22222E+17,5.55556E+16,,2,,,Combinatorics
672,17.0,All-Pairs Shortest Paths (APSP),2.0,APSP on Dense Directed Graphs with Arbitrary Weights,191.0,,,1,1,O(n^3 \log^3 \log n / \log^2 n),,,[http://tmc.web.engr.illinois.edu/moreapsp.pdf Chan (2009)],Chan,2009,http://tmc.web.engr.illinois.edu/moreapsp.pdf,,,,0.0,0,6,n: 6,$O(n^3 \log^3 \log n / \log^2 n)$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,"n: 5,
m: 1",$O(n^2)$,"Derived: Dividing $A$ and $B$ into $V \times q$ and $q \times V$ matrices, in total using $O(V^2)$ space ",1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,15111217.0,816.9877391,,,,,,,,2,,,Combinatorics
673,17.0,All-Pairs Shortest Paths (APSP),2.0,APSP on Dense Undirected Graphs with Arbitrary Weights,191.0,,,1,1,O(n^3 \log^3 \log n / \log^2 n),,,[http://tmc.web.engr.illinois.edu/moreapsp.pdf Chan (2009)],Chan,2009,http://tmc.web.engr.illinois.edu/moreapsp.pdf,,,,0.0,0,6,n: 6,$O(n^3 \log^3 \log n / \log^2 n)$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,"n: 5,
m: 1",$O(n^2)$,"Derived: Dividing $A$ and $B$ into $V \times q$ and $q \times V$ matrices, in total using $O(V^2)$ space ",1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,15111217.0,816.9877391,,,,,,,,2,,,Combinatorics
674,47.0,Eigenvalues (Iterative Methods),2.0,Eigenpair closest to mu,398.0,,0.0,1,1,O(n^2),,,[https://onlinelibrary.wiley.com/doi/abs/10.1002/zamm.19210010104 Inverse iteration (1921)],Inverse iteration,1921,https://onlinelibrary.wiley.com/doi/abs/10.1002/zamm.19210010104,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Need to compute and store $(A-mu*I)^{(-1)}$,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis
675,47.0,Eigenvalues (Iterative Methods),2.0,Any eigenpair,398.0,,0.0,1,1,O(n^2),,,[https://onlinelibrary.wiley.com/doi/abs/10.1002/zamm.19210010104 Inverse iteration (1921)],Inverse iteration,1921,https://onlinelibrary.wiley.com/doi/abs/10.1002/zamm.19210010104,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Need to compute and store $(A-mu*I)^{(-1)}$,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis
676,47.0,Eigenvalues (Iterative Methods),2.0,Any eigenvalue,398.0,,0.0,1,1,O(n^2),,,[https://onlinelibrary.wiley.com/doi/abs/10.1002/zamm.19210010104 Inverse iteration (1921)],Inverse iteration,1921,https://onlinelibrary.wiley.com/doi/abs/10.1002/zamm.19210010104,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Need to compute and store $(A-mu*I)^{(-1)}$,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis
677,47.0,Eigenvalues (Iterative Methods),2.0,Any eigenpair,399.0,,0.0,1,1,O(n^2),,,[- Rayleigh quotient iteration (1940)],Rayleigh quotient iteration,1940,-,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Need to compute and store $(A-mu_i*I)^{(-1)}$,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Rayleigh_quotient_iteration#Algorithm,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis
678,47.0,Eigenvalues (Iterative Methods),2.0,Any eigenvalue,399.0,,0.0,1,1,O(n^2),,,[- Rayleigh quotient iteration (1940)],Rayleigh quotient iteration,1940,-,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Need to compute and store $(A-mu_i*I)^{(-1)}$,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Rayleigh_quotient_iteration#Algorithm,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis
679,47.0,Eigenvalues (Iterative Methods),1.0,Eigenpair closest to mu,400.0,,0.0,1,1,O(n^2),,,[- LOBPCG algorithm (1948)],LOBPCG algorithm,1948,-,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,2.5,"n: 3,
n^2: 2.5",O(n)?,Requires only a constant number of $O(n)$-sized vectors per iteration,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/LOBPCG,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis
680,47.0,Eigenvalues (Iterative Methods),1.0,Any eigenpair,400.0,,0.0,1,1,O(n^2),,,[- LOBPCG algorithm (1948)],LOBPCG algorithm,1948,-,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,2.5,"n: 3,
n^2: 2.5",O(n)?,Requires only a constant number of $O(n)$-sized vectors per iteration,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/LOBPCG,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis
681,47.0,Eigenvalues (Iterative Methods),1.0,Any eigenvalue,400.0,,0.0,1,1,O(n^2),,,[- LOBPCG algorithm (1948)],LOBPCG algorithm,1948,-,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,2.5,"n: 3,
n^2: 2.5",O(n)?,Requires only a constant number of $O(n)$-sized vectors per iteration,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/LOBPCG,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis
682,47.0,Eigenvalues (Iterative Methods),2.0,All eigenvalues,403.0,,0.0,1,1,O(n^2),,,[https://academic.oup.com/comjnl/article/4/4/332/432033 QR algorithm (1962)],QR algorithm,1962,https://academic.oup.com/comjnl/article/4/4/332/432033,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Computes and stores QR factorization at each iteration,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis
683,47.0,Eigenvalues (Iterative Methods),2.0,Any eigenvalue,403.0,,0.0,1,1,O(n^2),,,[https://academic.oup.com/comjnl/article/4/4/332/432033 QR algorithm (1962)],QR algorithm,1962,https://academic.oup.com/comjnl/article/4/4/332/432033,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Computes and stores QR factorization at each iteration,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis
684,47.0,Eigenvalues (Iterative Methods),1.0,All eigenvalues,404.0,,0.0,1,1,O(n^2),,,[https://gdz.sub.uni-goettingen.de/id/PPN243919689_0030 Jacobi eigenvalue algorithm (1846)],Jacobi eigenvalue algorithm,1846,https://gdz.sub.uni-goettingen.de/id/PPN243919689_0030,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2)?,Computes and stores results of GSG^T iterations,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000000.0,,1000000000000.0,,1e+18,,1000000.0,,,,,,,,,4,,,Numerical Analysis
685,47.0,Eigenvalues (Iterative Methods),1.0,Any eigenvalue,404.0,,0.0,1,1,O(n^2),,,[https://gdz.sub.uni-goettingen.de/id/PPN243919689_0030 Jacobi eigenvalue algorithm (1846)],Jacobi eigenvalue algorithm,1846,https://gdz.sub.uni-goettingen.de/id/PPN243919689_0030,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2)?,Computes and stores results of GSG^T iterations,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000000.0,,1000000000000.0,,1e+18,,1000000.0,,,,,,,,,4,,,Numerical Analysis
686,47.0,Eigenvalues (Iterative Methods),2.0,All eigenvalues,405.0,,0.0,1,1,O(nlogn),,,[https://link.springer.com/content/pdf/10.1007/BF01389480.pdf Divide-and-conquer (1986)],Divide-and-conquer,1986,https://link.springer.com/content/pdf/10.1007/BF01389480.pdf,,,,1.0,4->5,2.51,"n: 4,
n^2: 2.51",O(n \log n),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Stores reduction to tridiagonal form; recursion (S(n)=2S(n/2)+O(n^2)) should work out to O(n^2),1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm,,,,,,,,,,,9965.0,100.3512293,0.1053793904,19931568.57,50171.66594,0.2652719521,29897352854,33447777.3,0.4573813291,4,,,Numerical Analysis
687,47.0,Eigenvalues (Iterative Methods),2.0,Any eigenvalue,405.0,,0.0,1,1,O(nlogn),,,[https://link.springer.com/content/pdf/10.1007/BF01389480.pdf Divide-and-conquer (1986)],Divide-and-conquer,1986,https://link.springer.com/content/pdf/10.1007/BF01389480.pdf,,,,1.0,4->5,2.51,"n: 4,
n^2: 2.51",O(n \log n),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Stores reduction to tridiagonal form; recursion (S(n)=2S(n/2)+O(n^2)) should work out to O(n^2),1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm,,,,,,,,,,,9965.0,100.3512293,0.1053793904,19931568.57,50171.66594,0.2652719521,29897352854,33447777.3,0.4573813291,4,,,Numerical Analysis
688,47.0,Eigenvalues (Iterative Methods),1.0,All eigenpairs,406.0,,0.0,1,1,O(n^2),,,[https://www.scirp.org/(S(czeh2tfqyw2orz553k1w0r45))/reference/ReferencesPapers.aspx?ReferenceID=530065 Homotopy method (1992)],Homotopy method,1992,https://www.scirp.org/(S(czeh2tfqyw2orz553k1w0r45))/reference/ReferencesPapers.aspx?ReferenceID=530065,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2)??,Conservative bound on space used per iteration,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis
689,47.0,Eigenvalues (Iterative Methods),1.0,Eigenpair closest to mu,406.0,,0.0,1,1,O(n^2),,,[https://www.scirp.org/(S(czeh2tfqyw2orz553k1w0r45))/reference/ReferencesPapers.aspx?ReferenceID=530065 Homotopy method (1992)],Homotopy method,1992,https://www.scirp.org/(S(czeh2tfqyw2orz553k1w0r45))/reference/ReferencesPapers.aspx?ReferenceID=530065,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2)??,Conservative bound on space used per iteration,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis
690,47.0,Eigenvalues (Iterative Methods),1.0,Any eigenpair,406.0,,0.0,1,1,O(n^2),,,[https://www.scirp.org/(S(czeh2tfqyw2orz553k1w0r45))/reference/ReferencesPapers.aspx?ReferenceID=530065 Homotopy method (1992)],Homotopy method,1992,https://www.scirp.org/(S(czeh2tfqyw2orz553k1w0r45))/reference/ReferencesPapers.aspx?ReferenceID=530065,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2)??,Conservative bound on space used per iteration,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis
691,47.0,Eigenvalues (Iterative Methods),1.0,Any eigenvalue,406.0,,0.0,1,1,O(n^2),,,[https://www.scirp.org/(S(czeh2tfqyw2orz553k1w0r45))/reference/ReferencesPapers.aspx?ReferenceID=530065 Homotopy method (1992)],Homotopy method,1992,https://www.scirp.org/(S(czeh2tfqyw2orz553k1w0r45))/reference/ReferencesPapers.aspx?ReferenceID=530065,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2)??,Conservative bound on space used per iteration,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis
692,47.0,Eigenvalues (Iterative Methods),1.0,All eigenvalues,406.0,,0.0,1,1,O(n^2),,,[https://www.scirp.org/(S(czeh2tfqyw2orz553k1w0r45))/reference/ReferencesPapers.aspx?ReferenceID=530065 Homotopy method (1992)],Homotopy method,1992,https://www.scirp.org/(S(czeh2tfqyw2orz553k1w0r45))/reference/ReferencesPapers.aspx?ReferenceID=530065,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2)??,Conservative bound on space used per iteration,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis
693,47.0,Eigenvalues (Iterative Methods),1.0,Eigenpair closest to mu,407.0,,0.0,1,1,O(n^2),,,[https://journals.aps.org/pr/abstract/10.1103/PhysRev.46.828 Folded spectrum method (1934)],Folded spectrum method,1934,https://journals.aps.org/pr/abstract/10.1103/PhysRev.46.828,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,2.5,"n: 3,
n^2: 2.5",O(n)?,Requires only a constant number of O(n)-sized vectors per iteration; matrix-to-vector multiplication only requires O(n) aux space,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis
694,47.0,Eigenvalues (Iterative Methods),1.0,Any eigenpair,407.0,,0.0,1,1,O(n^2),,,[https://journals.aps.org/pr/abstract/10.1103/PhysRev.46.828 Folded spectrum method (1934)],Folded spectrum method,1934,https://journals.aps.org/pr/abstract/10.1103/PhysRev.46.828,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,2.5,"n: 3,
n^2: 2.5",O(n)?,Requires only a constant number of O(n)-sized vectors per iteration; matrix-to-vector multiplication only requires O(n) aux space,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis
695,47.0,Eigenvalues (Iterative Methods),1.0,Any eigenvalue,407.0,,0.0,1,1,O(n^2),,,[https://journals.aps.org/pr/abstract/10.1103/PhysRev.46.828 Folded spectrum method (1934)],Folded spectrum method,1934,https://journals.aps.org/pr/abstract/10.1103/PhysRev.46.828,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,2.5,"n: 3,
n^2: 2.5",O(n)?,Requires only a constant number of O(n)-sized vectors per iteration; matrix-to-vector multiplication only requires O(n) aux space,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis
696,47.0,Eigenvalues (Iterative Methods),2.0,Any eigenpair,408.0,,0.0,1,1,O(n),,,[https://www.cs.utexas.edu/users/inderjit/public_papers/DesignMRRR_toms06.pdf MRRR algorithm (1999)],MRRR algorithm,1999,https://www.cs.utexas.edu/users/inderjit/public_papers/DesignMRRR_toms06.pdf,2,1.0,http://www.cs.utexas.edu/~inderjit/public_papers/DesignMRRR_toms06.pdf,1.0,5->6,2.5,"n: 3,
n^2: 2.5",O(n),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Need to compute and store some matrix of the form $(A-mu*I)^{(-1)}$ (for inverse iteration-like uses),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1000,0.1242100351,1000000,1000000,0.2638482029,1000000000,1000000000,0.4208308325,4,,,Numerical Analysis
697,47.0,Eigenvalues (Iterative Methods),2.0,Any eigenvalue,408.0,,0.0,1,1,O(n),,,[https://www.cs.utexas.edu/users/inderjit/public_papers/DesignMRRR_toms06.pdf MRRR algorithm (1999)],MRRR algorithm,1999,https://www.cs.utexas.edu/users/inderjit/public_papers/DesignMRRR_toms06.pdf,2,1.0,http://www.cs.utexas.edu/~inderjit/public_papers/DesignMRRR_toms06.pdf,1.0,5->6,2.5,"n: 3,
n^2: 2.5",O(n),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Need to compute and store some matrix of the form $(A-mu*I)^{(-1)}$ (for inverse iteration-like uses),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1000,0.1242100351,1000000,1000000,0.2638482029,1000000000,1000000000,0.4208308325,4,,,Numerical Analysis
698,76.0,Factorization of Polynomials Over Finite Fields,1.0,Distinct-degree,604.0,,,1,1,O(n^3 logn),,,[https://ieeexplore.ieee.org/document/6768643/ Berlekamp's algorithm (1967)],Berlekamp's algorithm,1967,https://ieeexplore.ieee.org/document/6768643/,,,,0.0,0,6.01,n: 6.01,O(n^3 \log n),"n: degree of polynomial
p: characteristic of finite field",n,,,Word RAM,words,3,"n: 3,
p: 1",O(n),Computes the remainder of $g^{((p-1)/2)}-1 mod f$ (in order to find gcd of $g^{((p-1)/2)}-1$ and f),1.0,0.0,,1,Monte Carlo,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis
699,76.0,Factorization of Polynomials Over Finite Fields,1.0,Equal-degree,604.0,,,1,1,O(n^3 logn),,,[https://ieeexplore.ieee.org/document/6768643/ Berlekamp's algorithm (1967)],Berlekamp's algorithm,1967,https://ieeexplore.ieee.org/document/6768643/,,,,0.0,0,6.01,n: 6.01,O(n^3 \log n),"n: degree of polynomial
p: characteristic of finite field",n,,,Word RAM,words,3,"n: 3,
p: 1",O(n),Computes the remainder of $g^{((p-1)/2)}-1 mod f$ (in order to find gcd of $g^{((p-1)/2)}-1$ and f),1.0,0.0,,1,Monte Carlo,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis
700,91.0,Maximum Likelihood Methods in Unknown Latent Variables,1.0,Maximum Likelihood Methods in Unknown Latent Variables,712.0,,0.0,1,1,O(n^2 log^2 n),,,[https://faculty.cc.gatech.edu/~bboots3/files/SpectralExteriorPoint-NIPSWorkshop.pdf Shaban; Amirreza; Mehrdad; Farajtabar (2015)],Shaban; Amirreza; Mehrdad; Farajtabar,2015,https://faculty.cc.gatech.edu/~bboots3/files/SpectralExteriorPoint-NIPSWorkshop.pdf,,,,0.0,0,5.02,n: 5.02,O(n^2 \log^2 n),"n: number of observations in sample
k: number of distributions in ""mixture"" (n_s)
d: dimensions of parameter for each discrete distribution (n_o)",n,,,Real RAM,words,1,"k: 3,
d: 6,
n: 1",O(kd+d^3)??,"vector of parameters has size at least Theta(kd), and tensor M has size at least Theta(d^3) in paper",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1.0,0.1993539462,1.0,0.4384498883,1.0,0.7252105499,9931685.0,,,,,,,,,3,,,Statistics
701,91.0,Maximum Likelihood Methods in Unknown Latent Variables,1.0,"multi-view model, discrete observations",712.0,,0.0,1,1,O(n^2 log^2 n),,,[https://faculty.cc.gatech.edu/~bboots3/files/SpectralExteriorPoint-NIPSWorkshop.pdf Shaban; Amirreza; Mehrdad; Farajtabar (2015)],Shaban; Amirreza; Mehrdad; Farajtabar,2015,https://faculty.cc.gatech.edu/~bboots3/files/SpectralExteriorPoint-NIPSWorkshop.pdf,,,,0.0,0,5.02,n: 5.02,O(n^2 \log^2 n),"n: number of observations in sample
k: number of distributions in ""mixture"" (n_s)
d: dimensions of parameter for each discrete distribution (n_o)",n,,,Real RAM,words,1,"k: 3,
d: 6,
n: 1",O(kd+d^3)??,"vector of parameters has size at least Theta(kd), and tensor M has size at least Theta(d^3) in paper",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1.0,0.1993539462,1.0,0.4384498883,1.0,0.7252105499,9931685.0,,,,,,,,,3,,,Statistics
702,132.0,n-Queens Problem,2.0,Counting Solutions,964.0,,,1,1,O(n^n),(no distribution to talk about here),(none),[ Naive Algorithm (1848)],Naive Algorithm,1848,,1,1.0,,1.0,0,8,"n: 8,
n^2: 8",O(n^n),n: size of chessboard,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",O(n),"Keep track of current configuration being tested, along with current count",1.0,0.0,,0,,0,,0,0,,0,0,https://web.northeastern.edu/seigen/11Magic/Books/Rouse%20Ball.pdf,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
703,132.0,n-Queens Problem,2.0,Constructing solutions,964.0,,,1,1,O(n^n),(no distribution to talk about here),(none),[ Naive Algorithm (1848)],Naive Algorithm,1848,,1,1.0,,1.0,0,8,"n: 8,
n^2: 8",O(n^n),n: size of chessboard,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",O(n),"Keep track of current configuration being tested, along with current count",1.0,0.0,,0,,0,,0,0,,0,0,https://web.northeastern.edu/seigen/11Magic/Books/Rouse%20Ball.pdf,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
704,132.0,n-Queens Problem,2.0,Counting Solutions,965.0,,,1,1,O(n!),(no distribution to talk about here),(none),[ Naive + 1 queen per row restriction (1850)],Naive + 1 queen per row restriction,1850,,,,,1.0,0,8,"n: 8,
n^2: 8",O(n!),n: size of chessboard,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",O(n),"Keep track of current configuration being tested, along with current count",1.0,0.0,,0,,0,,0,0,,0,0,https://web.northeastern.edu/seigen/11Magic/Books/Rouse%20Ball.pdf,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
705,132.0,n-Queens Problem,2.0,Constructing solutions,965.0,,,1,1,O(n!),(no distribution to talk about here),(none),[ Naive + 1 queen per row restriction (1850)],Naive + 1 queen per row restriction,1850,,,,,1.0,0,8,"n: 8,
n^2: 8",O(n!),n: size of chessboard,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",O(n),"Keep track of current configuration being tested, along with current count",1.0,0.0,,0,,0,,0,0,,0,0,https://web.northeastern.edu/seigen/11Magic/Books/Rouse%20Ball.pdf,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
706,132.0,n-Queens Problem,2.0,Counting Solutions,966.0,,,1,1,O(n!),(no distribution to talk about here),(none),[https://dl.acm.org/citation.cfm?id=1243380 Dijkstra (1972)],Dijkstra,1972,https://dl.acm.org/citation.cfm?id=1243380,1,1.0,https://www.geeksforgeeks.org/n-queen-problem-backtracking-3/,1.0,0,8,"n: 8,
n^2: 8",O(n!),n: size of chessboard,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",O(n),"Keep track of current configuration being tested and restrictions on where next queen can be placed, along with current count",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
707,132.0,n-Queens Problem,2.0,Constructing solutions,966.0,,,1,1,O(n!),(no distribution to talk about here),(none),[https://dl.acm.org/citation.cfm?id=1243380 Dijkstra (1972)],Dijkstra,1972,https://dl.acm.org/citation.cfm?id=1243380,1,1.0,https://www.geeksforgeeks.org/n-queen-problem-backtracking-3/,1.0,0,8,"n: 8,
n^2: 8",O(n!),n: size of chessboard,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",O(n),"Keep track of current configuration being tested and restrictions on where next queen can be placed, along with current count",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
708,132.0,n-Queens Problem,2.0,Counting Solutions,968.0,,,1,1,O(n!),(no distribution to talk about here),(none),[ Gunther Determinants solution (1874)],Gunther Determinants solution,1874,,,,,0.0,0,8,"n: 8,
n^2: 8",O(n!),n: size of chessboard,n^2,,,Word RAM,words,8,"n: 8,
n^2: 8",O(n!) ?,Seems like this one lists out all of the terms in the discriminant; presumably there is a better way but that amounts to the naive algorithm,1.0,0.0,,0,,0,,0,0,,0,0,https://web.northeastern.edu/seigen/11Magic/Books/Rouse%20Ball.pdf,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics
709,132.0,n-Queens Problem,2.0,Constructing solutions,968.0,,,1,1,O(n!),(no distribution to talk about here),(none),[ Gunther Determinants solution (1874)],Gunther Determinants solution,1874,,,,,0.0,0,8,"n: 8,
n^2: 8",O(n!),n: size of chessboard,n^2,,,Word RAM,words,8,"n: 8,
n^2: 8",O(n!) ?,Seems like this one lists out all of the terms in the discriminant; presumably there is a better way but that amounts to the naive algorithm,1.0,0.0,,0,,0,,0,0,,0,0,https://web.northeastern.edu/seigen/11Magic/Books/Rouse%20Ball.pdf,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics
